use serde::{Deserialize, Serialize};
use std::path::PathBuf;

/// Compiler configuration options
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Config {
    /// Target Java version (default: 8)
    pub target_java_version: u8,
    
    /// Output directory for generated .class files
    pub output_dir: PathBuf,
    
    /// Whether to generate debug information
    pub debug: bool,

    /// Whether to emit StackMapTable frames
    pub emit_frames: bool,
    
    /// Whether to optimize the generated bytecode
    pub optimize: bool,
    
    /// Whether to generate verbose output
    pub verbose: bool,
    
    /// Whether to treat warnings as errors
    pub warnings_as_errors: bool,
    
    /// Include paths for resolving imports
    pub include_paths: Vec<PathBuf>,
    
    /// Classpath for resolving dependencies
    pub classpath: Vec<PathBuf>,
}

impl Default for Config {
    fn default() -> Self {
        Self {
            target_java_version: 8,
            output_dir: PathBuf::from("output"),
            debug: false,
            emit_frames: false,
            optimize: true,
            verbose: false,
            warnings_as_errors: false,
            include_paths: Vec::new(),
            classpath: Vec::new(),
        }
    }
}

impl Config {
    /// Create a new configuration with default values
    pub fn new() -> Self {
        Self::default()
    }
    
    /// Set the target Java version
    pub fn with_target_java_version(mut self, version: u8) -> Self {
        self.target_java_version = version;
        self
    }
    
    /// Set the output directory
    pub fn with_output_dir(mut self, output_dir: PathBuf) -> Self {
        self.output_dir = output_dir;
        self
    }
    
    /// Enable debug mode
    pub fn with_debug(mut self, debug: bool) -> Self {
        self.debug = debug;
        self
    }

    /// Control whether to emit StackMapTable frames
    pub fn with_emit_frames(mut self, emit_frames: bool) -> Self {
        self.emit_frames = emit_frames;
        self
    }
    
    /// Enable optimization
    pub fn with_optimize(mut self, optimize: bool) -> Self {
        self.optimize = optimize;
        self
    }
    
    /// Enable verbose output
    pub fn with_verbose(mut self, verbose: bool) -> Self {
        self.verbose = verbose;
        self
    }
    
    /// Set warnings as errors
    pub fn with_warnings_as_errors(mut self, warnings_as_errors: bool) -> Self {
        self.warnings_as_errors = warnings_as_errors;
        self
    }
    
    /// Add include paths
    pub fn with_include_paths(mut self, include_paths: Vec<PathBuf>) -> Self {
        self.include_paths = include_paths;
        self
    }
    
    /// Add classpath entries
    pub fn with_classpath(mut self, classpath: Vec<PathBuf>) -> Self {
        self.classpath = classpath;
        self
    }
    
    /// Validate the configuration
    pub fn validate(&self) -> crate::common::error::Result<()> {
        if self.target_java_version < 6 || self.target_java_version > 17 {
            return Err(crate::common::error::Error::InvalidJavaVersion {
                version: self.target_java_version.to_string(),
            });
        }
        
        Ok(())
    }
}
