use phf::phf_map;

#[derive(Debug)]
pub struct MethodMeta { pub owner_internal: &'static str, pub name: &'static str, pub desc: &'static str, pub flags: u16 }
#[derive(Debug)]
pub struct FieldMeta  { pub owner_internal: &'static str, pub name: &'static str, pub desc: &'static str, pub flags: u16 }
#[derive(Debug)]
pub struct ClassMeta  { pub internal: &'static str, pub is_interface: bool, pub super_internal: Option<&'static str>, pub interfaces: &'static [&'static str], pub methods: &'static [MethodMeta], pub fields: &'static [FieldMeta] }

pub static METHODS_JAVA_BASE_ADDENDUM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Addendum", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_ADDENDUM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/Addendum", name: "pool", desc: "Ljava/base/Singleton;", flags: 1 },
    FieldMeta { owner_internal: "java/base/Addendum", name: "annotationTable", desc: "Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/base/Addendum", name: "signature", desc: "Ljava/lang/Object;", flags: 1 },
];

pub static METHODS_JAVA_BASE_ANNOTATIONINVOCATIONHANDLER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/AnnotationInvocationHandler", name: "<init>", desc: "([Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/AnnotationInvocationHandler", name: "invoke", desc: "(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
];
pub static FIELDS_JAVA_BASE_ANNOTATIONINVOCATIONHANDLER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/AnnotationInvocationHandler", name: "data", desc: "[Ljava/lang/Object;", flags: 2 },
];

pub static METHODS_JAVA_BASE_ASSEMBLER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Assembler", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Assembler", name: "writeClass", desc: "(Ljava/io/OutputStream;Ljava/util/List;II[I[Ljava/base/FieldData;[Ljava/base/MethodData;)V", flags: 9 },
];
pub static FIELDS_JAVA_BASE_ASSEMBLER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/Assembler", name: "ACC_PUBLIC", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "ACC_STATIC", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "aaload", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "aastore", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "aload", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "aload_0", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "aload_1", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "astore_0", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "anewarray", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "areturn", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "dload", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "dreturn", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "dup", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "fload", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "freturn", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "getfield", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "goto_", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "iload", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "invokeinterface", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "invokespecial", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "invokestatic", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "invokevirtual", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "ireturn", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "jsr", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "ldc_w", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "lload", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "lreturn", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "new_", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "pop", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "putfield", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "ret", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/base/Assembler", name: "return_", desc: "I", flags: 25 },
];

pub static METHODS_JAVA_BASE_ATOMIC: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Atomic", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Atomic", name: "getOffset", desc: "(Ljava/lang/reflect/Field;)J", flags: 265 },
    MethodMeta { owner_internal: "java/base/Atomic", name: "compareAndSwapObject", desc: "(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z", flags: 265 },
];
pub static FIELDS_JAVA_BASE_ATOMIC: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_CALLABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Callable", name: "call", desc: "()Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_BASE_CALLABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_CALLBACK: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Callback", name: "handleResult", desc: "(Ljava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/base/Callback", name: "handleException", desc: "(Ljava/lang/Throwable;)V", flags: 1025 },
];
pub static FIELDS_JAVA_BASE_CALLBACK: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_CELL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Cell", name: "<init>", desc: "(Ljava/lang/Object;Ljava/base/Cell;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Cell", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/base/Cell", name: "cons", desc: "(Ljava/lang/Object;Ljava/base/Cell;)Ljava/base/Cell;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Cell", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/base/Cell", name: "equal", desc: "(Ljava/base/Cell;Ljava/base/Cell;)Z", flags: 9 },
];
pub static FIELDS_JAVA_BASE_CELL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/Cell", name: "value", desc: "Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/base/Cell", name: "next", desc: "Ljava/base/Cell;", flags: 1 },
];

pub static METHODS_JAVA_BASE_CLASSADDENDUM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/ClassAddendum", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_CLASSADDENDUM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/ClassAddendum", name: "interfaceTable", desc: "[Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/base/ClassAddendum", name: "innerClassTable", desc: "[Ljava/base/InnerClassReference;", flags: 1 },
    FieldMeta { owner_internal: "java/base/ClassAddendum", name: "declaredMethodCount", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/base/ClassAddendum", name: "enclosingClass", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/ClassAddendum", name: "enclosingMethod", desc: "Ljava/base/Pair;", flags: 1 },
];

pub static METHODS_JAVA_BASE_CLASSPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/ClassPoolEntry", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/ClassPoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/ClassPoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_CLASSPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/ClassPoolEntry", name: "CONSTANT_Class", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/ClassPoolEntry", name: "nameIndex", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_CLASSES: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Classes", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Classes", name: "defineVMClass", desc: "(Ljava/lang/ClassLoader;[BII)Ljava/base/VMClass;", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "primitiveClass", desc: "(C)Ljava/base/VMClass;", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "initialize", desc: "(Ljava/base/VMClass;)V", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "isAssignableFrom", desc: "(Ljava/base/VMClass;Ljava/base/VMClass;)Z", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "toVMClass", desc: "(Ljava/lang/Class;)Ljava/base/VMClass;", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "toVMMethod", desc: "(Ljava/lang/reflect/Method;)Ljava/base/VMMethod;", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "resolveVMClass", desc: "(Ljava/lang/ClassLoader;[B)Ljava/base/VMClass;", flags: 266 },
    MethodMeta { owner_internal: "java/base/Classes", name: "loadVMClass", desc: "(Ljava/lang/ClassLoader;[BII)Ljava/base/VMClass;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "parseAnnotationValue", desc: "(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)Ljava/lang/Object;", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "parseAnnotation", desc: "(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)[Ljava/lang/Object;", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "parseAnnotationTable", desc: "(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)[Ljava/lang/Object;", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "parseAnnotationTable", desc: "(Ljava/lang/ClassLoader;Ljava/base/Addendum;)V", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "resolveSpec", desc: "(Ljava/lang/ClassLoader;[BI)I", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "declaredMethodCount", desc: "(Ljava/base/VMClass;)I", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "link", desc: "(Ljava/base/VMClass;Ljava/lang/ClassLoader;)V", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "link", desc: "(Ljava/base/VMClass;)V", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "forName", desc: "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "forCanonicalName", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "forCanonicalName", desc: "(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/Class;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "next", desc: "(CLjava/lang/String;I)I", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "getParameterTypes", desc: "(Ljava/base/VMMethod;)[Ljava/lang/Class;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "findField", desc: "(Ljava/base/VMClass;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "toString", desc: "([B)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "match", desc: "(Ljava/base/VMClass;Ljava/base/VMClass;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "match", desc: "([Ljava/lang/Class;[Ljava/lang/Class;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "findMethod", desc: "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/base/VMMethod;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "findMethod", desc: "(Ljava/base/VMClass;Ljava/lang/String;[Ljava/lang/Class;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "countMethods", desc: "(Ljava/base/VMClass;Z)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "getMethods", desc: "(Ljava/base/VMClass;Z)[Ljava/lang/reflect/Method;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "countFields", desc: "(Ljava/base/VMClass;Z)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "getFields", desc: "(Ljava/base/VMClass;Z)[Ljava/lang/reflect/Field;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "getAnnotation", desc: "(Ljava/lang/ClassLoader;[Ljava/lang/Object;)Ljava/lang/annotation/Annotation;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "getAnnotationDefaultValue", desc: "(Ljava/lang/ClassLoader;Ljava/base/MethodAddendum;)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "index", desc: "(Ljava/base/VMMethod;)I", flags: 10 },
    MethodMeta { owner_internal: "java/base/Classes", name: "makeMethod", desc: "(Ljava/base/VMMethod;)Ljava/lang/reflect/Method;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Classes", name: "makeMethod", desc: "(Ljava/lang/Class;I)Ljava/lang/reflect/Method;", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "makeField", desc: "(Ljava/lang/Class;I)Ljava/lang/reflect/Field;", flags: 265 },
    MethodMeta { owner_internal: "java/base/Classes", name: "acquireClassLock", desc: "()V", flags: 266 },
    MethodMeta { owner_internal: "java/base/Classes", name: "releaseClassLock", desc: "()V", flags: 266 },
    MethodMeta { owner_internal: "java/base/Classes", name: "makeString", desc: "([BII)Ljava/lang/String;", flags: 265 },
];
pub static FIELDS_JAVA_BASE_CLASSES: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/Classes", name: "LinkFlag", desc: "I", flags: 26 },
];

pub static METHODS_JAVA_BASE_CODE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Code", name: "<init>", desc: "()V", flags: 0 },
];
pub static FIELDS_JAVA_BASE_CODE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_CONSTANTPOOL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "add", desc: "(Ljava/util/List;Ljava/base/PoolEntry;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addInteger", desc: "(Ljava/util/List;I)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addUtf8", desc: "(Ljava/util/List;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addString", desc: "(Ljava/util/List;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addClass", desc: "(Ljava/util/List;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addNameAndType", desc: "(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addFieldRef", desc: "(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addMethodRef", desc: "(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/ConstantPool", name: "addInterfaceMethodRef", desc: "(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", flags: 9 },
];
pub static FIELDS_JAVA_BASE_CONSTANTPOOL: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_DATA: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Data", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Data", name: "nextPowerOfTwo", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Data", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/base/Data", name: "toArray", desc: "(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Data", name: "toString", desc: "(Ljava/util/Collection;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Data", name: "toString", desc: "(Ljava/util/Map;)Ljava/lang/String;", flags: 9 },
];
pub static FIELDS_JAVA_BASE_DATA: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_DATAENTRYMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/DataEntryMap", name: "size", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/base/DataEntryMap", name: "find", desc: "(Ljava/lang/Object;)Ljava/util/Entry;", flags: 1025 },
    MethodMeta { owner_internal: "java/base/DataEntryMap", name: "remove", desc: "(Ljava/lang/Object;)Ljava/util/Entry;", flags: 1025 },
    MethodMeta { owner_internal: "java/base/DataEntryMap", name: "clear", desc: "()V", flags: 1025 },
    MethodMeta { owner_internal: "java/base/DataEntryMap", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
];
pub static FIELDS_JAVA_BASE_DATAENTRYMAP: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_DATAENTRYSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "<init>", desc: "(Ljava/base/DataEntryMap;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "add", desc: "(Ljava/util/Entry;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "remove", desc: "(Ljava/util/Entry;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataEntrySet", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 4161 },
];
pub static FIELDS_JAVA_BASE_DATAENTRYSET: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/DataEntrySet", name: "map", desc: "Ljava/base/DataEntryMap;", flags: 18 },
];

pub static METHODS_JAVA_BASE_DATAKEYITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/DataKeyIterator", name: "<init>", desc: "(Ljava/util/Iterator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeyIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeyIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeyIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_DATAKEYITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/DataKeyIterator", name: "it", desc: "Ljava/util/Iterator;", flags: 18 },
];

pub static METHODS_JAVA_BASE_DATAKEYSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "<init>", desc: "(Ljava/base/DataEntryMap;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataKeySet", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
];
pub static FIELDS_JAVA_BASE_DATAKEYSET: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/DataKeySet", name: "map", desc: "Ljava/base/DataEntryMap;", flags: 18 },
];

pub static METHODS_JAVA_BASE_DATAVALUEITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/DataValueIterator", name: "<init>", desc: "(Ljava/util/Iterator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValueIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValueIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValueIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_DATAVALUEITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/DataValueIterator", name: "it", desc: "Ljava/util/Iterator;", flags: 18 },
];

pub static METHODS_JAVA_BASE_DATAVALUES: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/DataValues", name: "<init>", desc: "(Ljava/base/DataEntryMap;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "containsAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "removeAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "retainAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/DataValues", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
];
pub static FIELDS_JAVA_BASE_DATAVALUES: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/DataValues", name: "map", desc: "Ljava/base/DataEntryMap;", flags: 18 },
];

pub static METHODS_JAVA_BASE_FIELDADDENDUM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/FieldAddendum", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_FIELDADDENDUM: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_FIELDDATA: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/FieldData", name: "<init>", desc: "(III)V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_FIELDDATA: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/FieldData", name: "flags", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/base/FieldData", name: "nameIndex", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/base/FieldData", name: "specIndex", desc: "I", flags: 17 },
];

pub static METHODS_JAVA_BASE_FIELDREFPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/FieldRefPoolEntry", name: "<init>", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/FieldRefPoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/FieldRefPoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_FIELDREFPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/FieldRefPoolEntry", name: "CONSTANT_Fieldref", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/FieldRefPoolEntry", name: "classIndex", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/base/FieldRefPoolEntry", name: "nameAndTypeIndex", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_FUNCTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Function", name: "call", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_BASE_FUNCTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_INCOMPATIBLECONTINUATIONEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/IncompatibleContinuationException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/IncompatibleContinuationException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_INCOMPATIBLECONTINUATIONEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_INNERCLASSREFERENCE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/InnerClassReference", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_INNERCLASSREFERENCE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/InnerClassReference", name: "inner", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/InnerClassReference", name: "outer", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/InnerClassReference", name: "name", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/InnerClassReference", name: "flags", desc: "S", flags: 1 },
];

pub static METHODS_JAVA_BASE_INTEGERPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/IntegerPoolEntry", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/IntegerPoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/IntegerPoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_INTEGERPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/IntegerPoolEntry", name: "CONSTANT_Integer", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/IntegerPoolEntry", name: "value", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_INTERFACEMETHODREFPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/InterfaceMethodRefPoolEntry", name: "<init>", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/InterfaceMethodRefPoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/InterfaceMethodRefPoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_INTERFACEMETHODREFPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/InterfaceMethodRefPoolEntry", name: "CONSTANT_InterfaceMethodref", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/InterfaceMethodRefPoolEntry", name: "classIndex", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/base/InterfaceMethodRefPoolEntry", name: "nameAndTypeIndex", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_METHODADDENDUM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/MethodAddendum", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_METHODADDENDUM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/MethodAddendum", name: "exceptionTable", desc: "Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/base/MethodAddendum", name: "annotationDefault", desc: "Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/base/MethodAddendum", name: "parameterAnnotationTable", desc: "Ljava/lang/Object;", flags: 1 },
];

pub static METHODS_JAVA_BASE_METHODDATA: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/MethodData", name: "<init>", desc: "(III[B)V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_METHODDATA: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/MethodData", name: "flags", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/base/MethodData", name: "nameIndex", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/base/MethodData", name: "specIndex", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/base/MethodData", name: "code", desc: "[B", flags: 17 },
];

pub static METHODS_JAVA_BASE_METHODREFPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/MethodRefPoolEntry", name: "<init>", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/MethodRefPoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/MethodRefPoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_METHODREFPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/MethodRefPoolEntry", name: "CONSTANT_Methodref", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/MethodRefPoolEntry", name: "classIndex", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/base/MethodRefPoolEntry", name: "nameAndTypeIndex", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_NAMEANDTYPEPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/NameAndTypePoolEntry", name: "<init>", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/NameAndTypePoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/NameAndTypePoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_NAMEANDTYPEPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/NameAndTypePoolEntry", name: "CONSTANT_NameAndType", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/NameAndTypePoolEntry", name: "nameIndex", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/base/NameAndTypePoolEntry", name: "typeIndex", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_PAIR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Pair", name: "<init>", desc: "()V", flags: 0 },
];
pub static FIELDS_JAVA_BASE_PAIR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_POOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/PoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1025 },
];
pub static FIELDS_JAVA_BASE_POOLENTRY: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_SINGLETON: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Singleton", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Singleton", name: "getInt", desc: "(Ljava/lang/Object;I)I", flags: 265 },
    MethodMeta { owner_internal: "java/base/Singleton", name: "getLong", desc: "(Ljava/lang/Object;I)J", flags: 265 },
    MethodMeta { owner_internal: "java/base/Singleton", name: "getObject", desc: "(Ljava/lang/Object;I)Ljava/lang/Object;", flags: 265 },
];
pub static FIELDS_JAVA_BASE_SINGLETON: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_STREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Stream", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Stream", name: "write1", desc: "(Ljava/io/OutputStream;I)V", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "read1", desc: "(Ljava/io/InputStream;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "write2", desc: "(Ljava/io/OutputStream;I)V", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "read2", desc: "(Ljava/io/InputStream;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "write4", desc: "(Ljava/io/OutputStream;I)V", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "read4", desc: "(Ljava/io/InputStream;)I", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "write8", desc: "(Ljava/io/OutputStream;J)V", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "read8", desc: "(Ljava/io/InputStream;)J", flags: 9 },
    MethodMeta { owner_internal: "java/base/Stream", name: "set4", desc: "([BII)V", flags: 9 },
];
pub static FIELDS_JAVA_BASE_STREAM: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_STRINGPOOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/StringPoolEntry", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/StringPoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/StringPoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_STRINGPOOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/StringPoolEntry", name: "CONSTANT_String", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/StringPoolEntry", name: "valueIndex", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_BASE_SYSTEMCLASSLOADER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "appLoader", desc: "()Ljava/lang/ClassLoader;", flags: 265 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "findVMClass", desc: "(Ljava/lang/String;)Ljava/base/VMClass;", flags: 258 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "findClass", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "getClass", desc: "(Ljava/base/VMClass;)Ljava/lang/Class;", flags: 265 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "vmClass", desc: "(Ljava/lang/Class;)Ljava/base/VMClass;", flags: 265 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "findLoadedVMClass", desc: "(Ljava/lang/String;)Ljava/base/VMClass;", flags: 258 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "reallyFindLoadedClass", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "loadClass", desc: "(Ljava/lang/String;Z)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "resourceURLPrefix", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 258 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "findResource", desc: "(Ljava/lang/String;)Ljava/lang/Object;", flags: 4 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "getPackageSource", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 268 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "getResource", desc: "(Ljava/lang/String;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "getResources", desc: "(Ljava/lang/String;)Ljava/util/Enumeration;", flags: 1 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "findResources", desc: "(Ljava/lang/String;)Ljava/util/Enumeration;", flags: 4 },
    MethodMeta { owner_internal: "java/base/SystemClassLoader", name: "getSystemClassLoader", desc: "()Ljava/lang/ClassLoader;", flags: 9 },
];
pub static FIELDS_JAVA_BASE_SYSTEMCLASSLOADER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_UTF8: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Utf8", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "test", desc: "(Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "encode", desc: "([CII)[B", flags: 9 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "decode", desc: "([BII)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "decode16", desc: "([BII)[C", flags: 9 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "cram", desc: "(Ljava/lang/Object;II)V", flags: 10 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "widen", desc: "(Ljava/lang/Object;II)Ljava/lang/Object;", flags: 10 },
    MethodMeta { owner_internal: "java/base/Utf8", name: "trim", desc: "(Ljava/lang/Object;I)Ljava/lang/Object;", flags: 10 },
];
pub static FIELDS_JAVA_BASE_UTF8: &[FieldMeta] = &[
];

pub static METHODS_JAVA_BASE_UTF8POOLENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/Utf8PoolEntry", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Utf8PoolEntry", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/base/Utf8PoolEntry", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_UTF8POOLENTRY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/Utf8PoolEntry", name: "CONSTANT_Utf8", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/base/Utf8PoolEntry", name: "data", desc: "Ljava/lang/String;", flags: 18 },
];

pub static METHODS_JAVA_BASE_VMCLASS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/VMClass", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_VMCLASS: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/VMClass", name: "flags", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "vmFlags", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "fixedSize", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "arrayElementSize", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "arrayDimensions", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "arrayElementClass", desc: "Ljava/base/VMClass;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "runtimeDataIndex", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "objectMask", desc: "[I", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "name", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "sourceFile", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "super_", desc: "Ljava/base/VMClass;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "interfaceTable", desc: "[Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "virtualTable", desc: "[Ljava/base/VMMethod;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "fieldTable", desc: "[Ljava/base/VMField;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "methodTable", desc: "[Ljava/base/VMMethod;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "addendum", desc: "Ljava/base/ClassAddendum;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "staticTable", desc: "Ljava/base/Singleton;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "loader", desc: "Ljava/lang/ClassLoader;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMClass", name: "source", desc: "[B", flags: 1 },
];

pub static METHODS_JAVA_BASE_VMFIELD: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/VMField", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_BASE_VMFIELD: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/VMField", name: "vmFlags", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "code", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "flags", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "offset", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "nativeID", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "name", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "spec", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "addendum", desc: "Ljava/base/FieldAddendum;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMField", name: "class_", desc: "Ljava/base/VMClass;", flags: 1 },
];

pub static METHODS_JAVA_BASE_VMMETHOD: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/base/VMMethod", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/base/VMMethod", name: "hasAnnotations", desc: "()Z", flags: 1 },
];
pub static FIELDS_JAVA_BASE_VMMETHOD: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/base/VMMethod", name: "vmFlags", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "returnCode", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "parameterCount", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "parameterFootprint", desc: "B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "flags", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "offset", desc: "S", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "nativeID", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "runtimeDataIndex", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "name", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "spec", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "addendum", desc: "Ljava/base/MethodAddendum;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "class_", desc: "Ljava/base/VMClass;", flags: 1 },
    FieldMeta { owner_internal: "java/base/VMMethod", name: "code", desc: "Ljava/base/Code;", flags: 1 },
];

pub static METHODS_JAVA_IO_BYTEARRAYINPUTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/ByteArrayInputStream", name: "<init>", desc: "([BII)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayInputStream", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayInputStream", name: "read", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayInputStream", name: "read", desc: "([BII)I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayInputStream", name: "available", desc: "()I", flags: 1 },
];
pub static FIELDS_JAVA_IO_BYTEARRAYINPUTSTREAM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/io/ByteArrayInputStream", name: "array", desc: "[B", flags: 18 },
    FieldMeta { owner_internal: "java/io/ByteArrayInputStream", name: "position", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/io/ByteArrayInputStream", name: "limit", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_IO_BYTEARRAYOUTPUTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "reset", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "write", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "copy", desc: "([BII)[B", flags: 2 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "write", desc: "([BII)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "chainCell", desc: "(Ljava/io/ByteArrayOutputStreamCell;)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "flushBuffer", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "toByteArray", desc: "()[B", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "writeTo", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "toString", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 1 },
];
pub static FIELDS_JAVA_IO_BYTEARRAYOUTPUTSTREAM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "BufferSize", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "firstCell", desc: "Ljava/io/ByteArrayOutputStreamCell;", flags: 2 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "curCell", desc: "Ljava/io/ByteArrayOutputStreamCell;", flags: 2 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "length", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "buffer", desc: "[B", flags: 2 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStream", name: "position", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_IO_BYTEARRAYOUTPUTSTREAMCELL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/ByteArrayOutputStreamCell", name: "<init>", desc: "([BII)V", flags: 1 },
];
pub static FIELDS_JAVA_IO_BYTEARRAYOUTPUTSTREAMCELL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStreamCell", name: "array", desc: "[B", flags: 1 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStreamCell", name: "offset", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStreamCell", name: "length", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/io/ByteArrayOutputStreamCell", name: "next", desc: "Ljava/io/ByteArrayOutputStreamCell;", flags: 1 },
];

pub static METHODS_JAVA_IO_CHARTOPRIMITIVETYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/CharToPrimitiveType", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/io/CharToPrimitiveType", name: "charToPrimitiveType", desc: "(I)Ljava/lang/Class;", flags: 9 },
];
pub static FIELDS_JAVA_IO_CHARTOPRIMITIVETYPE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_CLOSEABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/Closeable", name: "close", desc: "()V", flags: 1025 },
];
pub static FIELDS_JAVA_IO_CLOSEABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_EOFEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/EOFException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/EOFException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_IO_EOFEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_FLUSHABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/Flushable", name: "flush", desc: "()V", flags: 1025 },
];
pub static FIELDS_JAVA_IO_FLUSHABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_IOEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/IOException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/IOException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/IOException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/IOException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_IO_IOEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_INPUTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/InputStream", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "read", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "read", desc: "([B)I", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "read", desc: "([BII)I", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "skip", desc: "(J)J", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "available", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "mark", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "reset", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "markSupported", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/io/InputStream", name: "close", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_IO_INPUTSTREAM: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_OBJECTINPUTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "<init>", desc: "(Ljava/io/InputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "read", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawByte", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawShort", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawInt", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawLong", desc: "()J", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawString", desc: "()Ljava/lang/String;", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "read", desc: "([BII)I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readFully", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readFully", desc: "([BII)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readLine", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "close", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawBlockDataByte", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawBlockDataShort", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawBlockDataInt", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "rawBlockDataLong", desc: "()J", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readBoolean", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readByte", desc: "()B", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readChar", desc: "()C", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readShort", desc: "()S", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readInt", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readLong", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readUnsignedByte", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readUnsignedShort", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readUTF", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "skipBytes", desc: "(I)I", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "expectToken", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "field", desc: "(Ljava/lang/reflect/Field;Ljava/lang/Object;)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "readObject", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "classDesc", desc: "()Ljava/io/ObjectInputStreamClassDesc;", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "defaultReadObject", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "defaultReadObject", desc: "(Ljava/lang/Object;[Ljava/lang/reflect/Field;)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectInputStream", name: "makeInstance", desc: "(Ljava/base/VMClass;)Ljava/lang/Object;", flags: 266 },
];
pub static FIELDS_JAVA_IO_OBJECTINPUTSTREAM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/io/ObjectInputStream", name: "HANDLE_OFFSET", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/io/ObjectInputStream", name: "in", desc: "Ljava/io/InputStream;", flags: 18 },
    FieldMeta { owner_internal: "java/io/ObjectInputStream", name: "references", desc: "Ljava/util/ArrayList;", flags: 18 },
    FieldMeta { owner_internal: "java/io/ObjectInputStream", name: "remainingBlockData", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/io/ObjectInputStream", name: "current", desc: "Ljava/lang/Object;", flags: 2 },
    FieldMeta { owner_internal: "java/io/ObjectInputStream", name: "currentFields", desc: "[Ljava/lang/reflect/Field;", flags: 2 },
];

pub static METHODS_JAVA_IO_OBJECTINPUTSTREAMCLASSDESC: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/ObjectInputStreamClassDesc", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_IO_OBJECTINPUTSTREAMCLASSDESC: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/io/ObjectInputStreamClassDesc", name: "clazz", desc: "Ljava/lang/Class;", flags: 0 },
    FieldMeta { owner_internal: "java/io/ObjectInputStreamClassDesc", name: "flags", desc: "I", flags: 0 },
    FieldMeta { owner_internal: "java/io/ObjectInputStreamClassDesc", name: "fields", desc: "[Ljava/lang/reflect/Field;", flags: 0 },
    FieldMeta { owner_internal: "java/io/ObjectInputStreamClassDesc", name: "superClassDesc", desc: "Ljava/io/ObjectInputStreamClassDesc;", flags: 0 },
];

pub static METHODS_JAVA_IO_OBJECTOUTPUTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "<init>", desc: "(Ljava/io/OutputStream;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "write", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "write", desc: "([BII)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "flush", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "close", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "rawByte", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "rawShort", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "rawInt", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "rawLong", desc: "(J)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "blockData", desc: "([I)V", flags: 130 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "blockData", desc: "([I[B[C)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeBoolean", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeByte", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeShort", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeChar", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeInt", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeLong", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeBytes", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeChars", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeUTF", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "string", desc: "(Ljava/lang/String;)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "primitiveTypeChar", desc: "(Ljava/lang/Class;)C", flags: 10 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "classDesc", desc: "(Ljava/lang/Class;I)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "field", desc: "(Ljava/lang/Object;Ljava/lang/reflect/Field;)V", flags: 2 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "getFields", desc: "(Ljava/lang/Class;)[Ljava/lang/reflect/Field;", flags: 10 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "writeObject", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "getReadOrWriteMethod", desc: "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/reflect/Method;", flags: 8 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "defaultWriteObject", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/ObjectOutputStream", name: "defaultWriteObject", desc: "(Ljava/lang/Object;)V", flags: 2 },
];
pub static FIELDS_JAVA_IO_OBJECTOUTPUTSTREAM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "STREAM_MAGIC", desc: "S", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "STREAM_VERSION", desc: "S", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_NULL", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_REFERENCE", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_CLASSDESC", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_OBJECT", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_STRING", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_ARRAY", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_CLASS", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_BLOCKDATA", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_ENDBLOCKDATA", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_RESET", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_BLOCKDATALONG", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_EXCEPTION", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_LONGSTRING", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_PROXYCLASSDESC", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "TC_ENUM", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "SC_WRITE_METHOD", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "SC_BLOCK_DATA", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "SC_SERIALIZABLE", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "SC_EXTERNALIZABLE", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "SC_ENUM", desc: "B", flags: 24 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "out", desc: "Ljava/io/OutputStream;", flags: 18 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "classHandle", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/io/ObjectOutputStream", name: "current", desc: "Ljava/lang/Object;", flags: 2 },
];

pub static METHODS_JAVA_IO_OUTPUTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/OutputStream", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/OutputStream", name: "write", desc: "(I)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/OutputStream", name: "write", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/OutputStream", name: "write", desc: "([BII)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/OutputStream", name: "flush", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/OutputStream", name: "close", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_IO_OUTPUTSTREAM: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_PRINTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "(Ljava/lang/String;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "(Ljava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "(Z)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "(C)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "(I)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "(J)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "print", desc: "([C)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "()V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "(Ljava/lang/String;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "(Ljava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "(Z)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "(C)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "(I)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "(J)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "println", desc: "([C)V", flags: 1025 },
    MethodMeta { owner_internal: "java/io/PrintStream", name: "flush", desc: "()V", flags: 1025 },
];
pub static FIELDS_JAVA_IO_PRINTSTREAM: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_SERIALIZABLE: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_IO_SERIALIZABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_SYSTEMPRINTSTREAM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "(C)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "([C)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "print", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "(C)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "([C)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "println", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "flush", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "nativePrint", desc: "(J)V", flags: 266 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "nativePrint", desc: "([C)V", flags: 266 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "nativePrint", desc: "(Ljava/lang/Object;)V", flags: 266 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "nativePrint", desc: "(Z)V", flags: 266 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "nativePrint", desc: "(I)V", flags: 266 },
    MethodMeta { owner_internal: "java/io/SystemPrintStream", name: "nativePrint", desc: "(Ljava/lang/String;)V", flags: 266 },
];
pub static FIELDS_JAVA_IO_SYSTEMPRINTSTREAM: &[FieldMeta] = &[
];

pub static METHODS_JAVA_IO_UNSUPPORTEDENCODINGEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/io/UnsupportedEncodingException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/io/UnsupportedEncodingException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_IO_UNSUPPORTEDENCODINGEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ABSTRACTMETHODERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/AbstractMethodError", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AbstractMethodError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ABSTRACTMETHODERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ADDRESS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Address", name: "<init>", desc: "(Ljava/lang/Uint160;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "<init>", desc: "(ILjava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "<init>", desc: "(ILjava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "toUint", desc: "()Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "isZeroAddress", desc: "()Z", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Address", name: "getTypeAsString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "getValue", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Address", name: "getValue", desc: "()Ljava/lang/Object;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Address", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_ADDRESS: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Address", name: "TYPE_NAME", desc: "Ljava/lang/String;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Address", name: "DEFAULT_LENGTH", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Address", name: "DEFAULT", desc: "Ljava/lang/Address;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Address", name: "ZERO_ADDRESS", desc: "Ljava/lang/Address;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Address", name: "value", desc: "Ljava/lang/Uint160;", flags: 18 },
];

pub static METHODS_JAVA_LANG_APPENDABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Appendable", name: "append", desc: "(C)Ljava/lang/Appendable;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/Appendable", name: "append", desc: "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/Appendable", name: "append", desc: "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_APPENDABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_APPROVAL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Approval", name: "<init>", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_APPROVAL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Approval", name: "indexed_owner", desc: "Ljava/lang/Address;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/Approval", name: "indexed_spender", desc: "Ljava/lang/Address;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/Approval", name: "value", desc: "Ljava/lang/Uint256;", flags: 17 },
];

pub static METHODS_JAVA_LANG_ARITHMETICEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ArithmeticException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ArithmeticException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ARITHMETICEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ARRAYINDEXOUTOFBOUNDSEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ArrayIndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ArrayIndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ArrayIndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ArrayIndexOutOfBoundsException", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ArrayIndexOutOfBoundsException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ARRAYINDEXOUTOFBOUNDSEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ARRAYSTOREEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ArrayStoreException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ArrayStoreException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ARRAYSTOREEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ASSERTIONERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(C)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(D)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(F)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/AssertionError", name: "<init>", desc: "(Ljava/lang/Object;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ASSERTIONERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_AUTOCLOSEABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/AutoCloseable", name: "close", desc: "()V", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_AUTOCLOSEABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_BOOL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bool", name: "<init>", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "<init>", desc: "(Ljava/lang/Boolean;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "getTypeAsString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "getValue", desc: "()Ljava/lang/Boolean;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "booleanValue", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "getValue", desc: "()Ljava/lang/Object;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Bool", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BOOL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bool", name: "TYPE_NAME", desc: "Ljava/lang/String;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Bool", name: "DEFAULT", desc: "Ljava/lang/Bool;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Bool", name: "TRUE", desc: "Ljava/lang/Bool;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Bool", name: "FALSE", desc: "Ljava/lang/Bool;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Bool", name: "value", desc: "Z", flags: 2 },
];

pub static METHODS_JAVA_LANG_BOOLEAN: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Boolean", name: "<init>", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "valueOf", desc: "(Z)Ljava/lang/Boolean;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/Boolean;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "compareTo", desc: "(Ljava/lang/Boolean;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "toString", desc: "(Z)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "booleanValue", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "getBoolean", desc: "(Ljava/lang/String;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "parseBoolean", desc: "(Ljava/lang/String;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Boolean", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BOOLEAN: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Boolean", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Boolean", name: "FALSE", desc: "Ljava/lang/Boolean;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Boolean", name: "TRUE", desc: "Ljava/lang/Boolean;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Boolean", name: "value", desc: "Z", flags: 18 },
];

pub static METHODS_JAVA_LANG_BYTE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Byte", name: "<init>", desc: "(B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "valueOf", desc: "(B)Ljava/lang/Byte;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "compareTo", desc: "(Ljava/lang/Byte;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "toString", desc: "(BI)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "toString", desc: "(B)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "parseByte", desc: "(Ljava/lang/String;)B", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "byteValue", desc: "()B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "shortValue", desc: "()S", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "intValue", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "longValue", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "floatValue", desc: "()F", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "doubleValue", desc: "()D", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Byte", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Byte", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Byte", name: "MIN_VALUE", desc: "B", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Byte", name: "MAX_VALUE", desc: "B", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Byte", name: "value", desc: "B", flags: 18 },
];

pub static METHODS_JAVA_LANG_BYTES: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes", name: "<init>", desc: "(I[B)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/Bytes", name: "isValid", desc: "(I)Z", flags: 2 },
];
pub static FIELDS_JAVA_LANG_BYTES: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes", name: "TYPE_NAME", desc: "Ljava/lang/String;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES1: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes1", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes1", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES1: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes1", name: "DEFAULT", desc: "Ljava/lang/Bytes1;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES10: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes10", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes10", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES10: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes10", name: "DEFAULT", desc: "Ljava/lang/Bytes10;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES11: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes11", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes11", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES11: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes11", name: "DEFAULT", desc: "Ljava/lang/Bytes11;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES12: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes12", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes12", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES12: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes12", name: "DEFAULT", desc: "Ljava/lang/Bytes12;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES13: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes13", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes13", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES13: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes13", name: "DEFAULT", desc: "Ljava/lang/Bytes13;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES14: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes14", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes14", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES14: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes14", name: "DEFAULT", desc: "Ljava/lang/Bytes14;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES15: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes15", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes15", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES15: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes15", name: "DEFAULT", desc: "Ljava/lang/Bytes15;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES16: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes16", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes16", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES16: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes16", name: "DEFAULT", desc: "Ljava/lang/Bytes16;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES17: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes17", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes17", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES17: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes17", name: "DEFAULT", desc: "Ljava/lang/Bytes17;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES18: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes18", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes18", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES18: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes18", name: "DEFAULT", desc: "Ljava/lang/Bytes18;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES19: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes19", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes19", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES19: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes19", name: "DEFAULT", desc: "Ljava/lang/Bytes19;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES2: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes2", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes2", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES2: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes2", name: "DEFAULT", desc: "Ljava/lang/Bytes2;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES20: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes20", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes20", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES20: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes20", name: "DEFAULT", desc: "Ljava/lang/Bytes20;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES21: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes21", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes21", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES21: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes21", name: "DEFAULT", desc: "Ljava/lang/Bytes21;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES22: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes22", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes22", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES22: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes22", name: "DEFAULT", desc: "Ljava/lang/Bytes22;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES23: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes23", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes23", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES23: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes23", name: "DEFAULT", desc: "Ljava/lang/Bytes23;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES24: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes24", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes24", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES24: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes24", name: "DEFAULT", desc: "Ljava/lang/Bytes24;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES25: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes25", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes25", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES25: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes25", name: "DEFAULT", desc: "Ljava/lang/Bytes25;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES26: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes26", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes26", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES26: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes26", name: "DEFAULT", desc: "Ljava/lang/Bytes26;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES27: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes27", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes27", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES27: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes27", name: "DEFAULT", desc: "Ljava/lang/Bytes27;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES28: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes28", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes28", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES28: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes28", name: "DEFAULT", desc: "Ljava/lang/Bytes28;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES29: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes29", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes29", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES29: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes29", name: "DEFAULT", desc: "Ljava/lang/Bytes29;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES3: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes3", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes3", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES3: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes3", name: "DEFAULT", desc: "Ljava/lang/Bytes3;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES30: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes30", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes30", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES30: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes30", name: "DEFAULT", desc: "Ljava/lang/Bytes30;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES31: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes31", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes31", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES31: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes31", name: "DEFAULT", desc: "Ljava/lang/Bytes31;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES32: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes32", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes32", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES32: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes32", name: "DEFAULT", desc: "Ljava/lang/Bytes32;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES4: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes4", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes4", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES4: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes4", name: "DEFAULT", desc: "Ljava/lang/Bytes4;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES5: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes5", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes5", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES5: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes5", name: "DEFAULT", desc: "Ljava/lang/Bytes5;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES6: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes6", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes6", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES6: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes6", name: "DEFAULT", desc: "Ljava/lang/Bytes6;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES7: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes7", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes7", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES7: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes7", name: "DEFAULT", desc: "Ljava/lang/Bytes7;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES8: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes8", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes8", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES8: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes8", name: "DEFAULT", desc: "Ljava/lang/Bytes8;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTES9: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Bytes9", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Bytes9", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES9: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Bytes9", name: "DEFAULT", desc: "Ljava/lang/Bytes9;", flags: 25 },
];

pub static METHODS_JAVA_LANG_BYTESTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/BytesType", name: "<init>", desc: "([BLjava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/BytesType", name: "bytes32PaddedLength", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/BytesType", name: "getValue", desc: "()[B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/BytesType", name: "getTypeAsString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/BytesType", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/BytesType", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/BytesType", name: "getValue", desc: "()Ljava/lang/Object;", flags: 4161 },
];
pub static FIELDS_JAVA_LANG_BYTESTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/BytesType", name: "value", desc: "[B", flags: 2 },
    FieldMeta { owner_internal: "java/lang/BytesType", name: "type", desc: "Ljava/lang/String;", flags: 2 },
];

pub static METHODS_JAVA_LANG_CALLABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Callable", name: "call", desc: "()Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_CALLABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CHARSEQUENCE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/CharSequence", name: "charAt", desc: "(I)C", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/CharSequence", name: "length", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/CharSequence", name: "subSequence", desc: "(II)Ljava/lang/CharSequence;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/CharSequence", name: "toString", desc: "()Ljava/lang/String;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_CHARSEQUENCE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CHARACTER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Character", name: "<init>", desc: "(C)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Character", name: "valueOf", desc: "(C)Ljava/lang/Character;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "compareTo", desc: "(Ljava/lang/Character;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Character", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Character", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toString", desc: "(C)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "charValue", desc: "()C", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toLowerCase", desc: "(C)C", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toLowerCase", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toUpperCase", desc: "(C)C", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toUpperCase", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isDigit", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isDigit", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "digit", desc: "(CI)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "forDigit", desc: "(II)C", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLetter", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLetter", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLetterOrDigit", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLetterOrDigit", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLowerCase", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLowerCase", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isUpperCase", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isUpperCase", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isWhitespace", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isWhitespace", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isSpaceChar", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isHighSurrogate", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isLowSurrogate", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isISOControl", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isJavaIdentifierStart", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isJavaIdentifierStart", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isJavaIdentifierPart", desc: "(C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isJavaIdentifierPart", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toCodePoint", desc: "(CC)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isSupplementaryCodePoint", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "canCastToChar", desc: "(I)Z", flags: 10 },
    MethodMeta { owner_internal: "java/lang/Character", name: "toChars", desc: "(I)[C", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "isSurrogatePair", desc: "(CC)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "codePointAt", desc: "(Ljava/lang/CharSequence;I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "codePointCount", desc: "(Ljava/lang/CharSequence;II)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Character", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Character", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_CHARACTER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Character", name: "MIN_RADIX", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Character", name: "MAX_RADIX", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Character", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Character", name: "value", desc: "C", flags: 18 },
];

pub static METHODS_JAVA_LANG_CLASS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Class", name: "<init>", desc: "(Ljava/base/VMClass;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "replace", desc: "(II[BII)[B", flags: 10 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getName", desc: "(Ljava/base/VMClass;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getCanonicalName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getSimpleName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "newInstance", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "forName", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Class", name: "forName", desc: "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getComponentType", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isAssignableFrom", desc: "(Ljava/lang/Class;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredField", desc: "(Ljava/lang/String;)Ljava/lang/reflect/Field;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getField", desc: "(Ljava/lang/String;)Ljava/lang/reflect/Field;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredMethod", desc: "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", flags: 129 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getMethod", desc: "(Ljava/lang/String;)Ljava/lang/reflect/Method;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getMethod", desc: "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", flags: 129 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getConstructor", desc: "()Ljava/lang/reflect/Constructor;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getConstructor", desc: "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", flags: 129 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredConstructor", desc: "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", flags: 129 },
    MethodMeta { owner_internal: "java/lang/Class", name: "countConstructors", desc: "(Z)I", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredConstructors", desc: "()[Ljava/lang/reflect/Constructor;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getConstructors", desc: "()[Ljava/lang/reflect/Constructor;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredFields", desc: "()[Ljava/lang/reflect/Field;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "countPublicFields", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getFields", desc: "()[Ljava/lang/reflect/Field;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getAllFields", desc: "(Ljava/base/VMClass;Ljava/util/ArrayList;)V", flags: 10 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getAllFields", desc: "()[Ljava/lang/reflect/Field;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredMethods", desc: "()[Ljava/lang/reflect/Method;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getMethods", desc: "()[Ljava/lang/reflect/Method;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getInterfaces", desc: "()[Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getEnclosingClass", desc: "()Ljava/lang/Class;", flags: 257 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getEnclosingMethod", desc: "()Ljava/lang/reflect/Method;", flags: 257 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getEnclosingConstructor", desc: "()Ljava/lang/reflect/Constructor;", flags: 257 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getEnumConstants", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredClasses", desc: "()[Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaringClass", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getClassLoader", desc: "()Ljava/lang/ClassLoader;", flags: 257 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getModifiers", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isInterface", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isAnnotation", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getSuperclass", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getClassType", desc: "()Ljava/lang/ClassType;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isAnonymousClass", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isLocalClass", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isMemberClass", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isArray", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isInstance", desc: "(Ljava/base/VMClass;Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isInstance", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isPrimitive", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isEnum", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getResource", desc: "(Ljava/lang/String;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getResourceAsStream", desc: "(Ljava/lang/String;)Ljava/io/InputStream;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "desiredAssertionStatus", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "asSubclass", desc: "(Ljava/lang/Class;)Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "cast", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getPackage", desc: "()Ljava/lang/Package;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "isAnnotationPresent", desc: "(Ljava/lang/Class;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getAnnotation", desc: "(Ljava/base/VMClass;[Ljava/lang/Object;)Ljava/lang/annotation/Annotation;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getAnnotation", desc: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getDeclaredAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "countAnnotations", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getTypeParameters", desc: "()[Ljava/lang/reflect/TypeVariable;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getGenericTypeSignatures", desc: "()[Ljava/lang/String;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getGenericInterfaces", desc: "()[Ljava/lang/reflect/Type;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Class", name: "getGenericSuperclass", desc: "()Ljava/lang/reflect/Type;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CLASS: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Class", name: "PrimitiveFlag", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/Class", name: "EnumFlag", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/Class", name: "vmClass", desc: "Ljava/base/VMClass;", flags: 17 },
];

pub static METHODS_JAVA_LANG_CLASSCASTEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ClassCastException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassCastException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CLASSCASTEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CLASSLOADER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "<init>", desc: "(Ljava/lang/ClassLoader;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "<init>", desc: "()V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "packages", desc: "()Ljava/util/Map;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getPackage", desc: "(Ljava/lang/String;)Ljava/lang/Package;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getPackages", desc: "()[Ljava/lang/Package;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "definePackage", desc: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Package;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getSystemClassLoader", desc: "()Ljava/lang/ClassLoader;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "defineClass", desc: "(Ljava/lang/String;[BII)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "findClass", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "reallyFindLoadedClass", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "findLoadedClass", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 20 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "loadClass", desc: "(Ljava/lang/String;)Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "loadClass", desc: "(Ljava/lang/String;Z)Ljava/lang/Class;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "resolveClass", desc: "(Ljava/lang/Class;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getParent", desc: "()Ljava/lang/ClassLoader;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "findResource", desc: "(Ljava/lang/String;)Ljava/lang/Object;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "findResources", desc: "(Ljava/lang/String;)Ljava/util/Enumeration;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getResource", desc: "(Ljava/lang/String;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getResourceAsStream", desc: "(Ljava/lang/String;)Ljava/io/InputStream;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getSystemResource", desc: "(Ljava/lang/String;)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getSystemResourceAsStream", desc: "(Ljava/lang/String;)Ljava/io/InputStream;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getSystemResources", desc: "(Ljava/lang/String;)Ljava/util/Enumeration;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getResources", desc: "(Ljava/lang/String;)Ljava/util/Enumeration;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "collectResources", desc: "(Ljava/lang/String;)Ljava/util/Collection;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "findLibrary", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "getCaller", desc: "()Ljava/lang/Class;", flags: 264 },
    MethodMeta { owner_internal: "java/lang/ClassLoader", name: "load", desc: "(Ljava/lang/String;Ljava/lang/Class;Z)V", flags: 264 },
];
pub static FIELDS_JAVA_LANG_CLASSLOADER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/ClassLoader", name: "parent", desc: "Ljava/lang/ClassLoader;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/ClassLoader", name: "packages", desc: "Ljava/util/Map;", flags: 2 },
];

pub static METHODS_JAVA_LANG_CLASSNOTFOUNDEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ClassNotFoundException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassNotFoundException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassNotFoundException", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ClassNotFoundException", name: "getException", desc: "()Ljava/lang/Throwable;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CLASSNOTFOUNDEXCEPTION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/ClassNotFoundException", name: "cause2", desc: "Ljava/lang/Throwable;", flags: 18 },
];

pub static METHODS_JAVA_LANG_CLASSTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ClassType", name: "values", desc: "()[Ljava/lang/ClassType;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/ClassType", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/ClassType;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/ClassType", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/ClassType", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_CLASSTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/ClassType", name: "GLOBAL", desc: "Ljava/lang/ClassType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/ClassType", name: "MEMBER", desc: "Ljava/lang/ClassType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/ClassType", name: "LOCAL", desc: "Ljava/lang/ClassType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/ClassType", name: "ANONYMOUS", desc: "Ljava/lang/ClassType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/ClassType", name: "$VALUES", desc: "[Ljava/lang/ClassType;", flags: 4122 },
];

pub static METHODS_JAVA_LANG_CLONENOTSUPPORTEDEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/CloneNotSupportedException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/CloneNotSupportedException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CLONENOTSUPPORTEDEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CLONEABLE: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_CLONEABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_COMPARABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Comparable", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_COMPARABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTEXT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Context", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Context", name: "_msgSender", desc: "()Ljava/lang/Address;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Context", name: "revert", desc: "(Ljava/lang/RuntimeException;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Context", name: "emit", desc: "(Ljava/lang/EventLog;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTEXT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Context", name: "sender", desc: "Ljava/lang/Address;", flags: 0 },
];

pub static METHODS_JAVA_LANG_DEPRECATED: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_DEPRECATED: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ENUM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Enum", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "compareTo", desc: "(Ljava/lang/Enum;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "valueOf", desc: "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "ordinal", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "name", desc: "()Ljava/lang/String;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "getDeclaringClass", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Enum", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
];
pub static FIELDS_JAVA_LANG_ENUM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Enum", name: "name", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Enum", name: "ordinal", desc: "I", flags: 20 },
];

pub static METHODS_JAVA_LANG_ERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Error", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Error", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Error", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Error", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_EVENTLOG: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/EventLog", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/EventLog", name: "getMessage", desc: "()Ljava/lang/String;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_EVENTLOG: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/EventLog", name: "message", desc: "Ljava/lang/String;", flags: 2 },
];

pub static METHODS_JAVA_LANG_EXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Exception", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Exception", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Exception", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Exception", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_EXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_EXCEPTIONININITIALIZERERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ExceptionInInitializerError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/ExceptionInInitializerError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_EXCEPTIONININITIALIZERERROR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/ExceptionInInitializerError", name: "exception", desc: "Ljava/lang/Throwable;", flags: 18 },
];

pub static METHODS_JAVA_LANG_ILLEGALACCESSERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IllegalAccessError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalAccessError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ILLEGALACCESSERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ILLEGALACCESSEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IllegalAccessException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalAccessException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ILLEGALACCESSEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ILLEGALARGUMENTEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IllegalArgumentException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalArgumentException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalArgumentException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalArgumentException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ILLEGALARGUMENTEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ILLEGALMONITORSTATEEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IllegalMonitorStateException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalMonitorStateException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ILLEGALMONITORSTATEEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ILLEGALSTATEEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IllegalStateException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalStateException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalStateException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IllegalStateException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_ILLEGALSTATEEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INCOMPATIBLECLASSCHANGEERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IncompatibleClassChangeError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IncompatibleClassChangeError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INCOMPATIBLECLASSCHANGEERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INDEXOUTOFBOUNDSEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IndexOutOfBoundsException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INDEXOUTOFBOUNDSEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INSTANTIATIONERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/InstantiationError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/InstantiationError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INSTANTIATIONERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INSTANTIATIONEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/InstantiationException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/InstantiationException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INSTANTIATIONEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int", name: "<init>", desc: "(ILjava/math/BigInteger;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/Int", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int", name: "TYPE_NAME", desc: "Ljava/lang/String;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Int", name: "DEFAULT", desc: "Ljava/lang/Int;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT104: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int104", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int104", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int104", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT104: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int104", name: "DEFAULT", desc: "Ljava/lang/Int104;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT112: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int112", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int112", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int112", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT112: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int112", name: "DEFAULT", desc: "Ljava/lang/Int112;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT120: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int120", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int120", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int120", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT120: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int120", name: "DEFAULT", desc: "Ljava/lang/Int120;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT128: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int128", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int128", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int128", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT128: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int128", name: "DEFAULT", desc: "Ljava/lang/Int128;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT136: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int136", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int136", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int136", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT136: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int136", name: "DEFAULT", desc: "Ljava/lang/Int136;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT144: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int144", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int144", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int144", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT144: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int144", name: "DEFAULT", desc: "Ljava/lang/Int144;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT152: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int152", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int152", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int152", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT152: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int152", name: "DEFAULT", desc: "Ljava/lang/Int152;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT16: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int16", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int16", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int16", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT16: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int16", name: "DEFAULT", desc: "Ljava/lang/Int16;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT160: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int160", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int160", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int160", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT160: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int160", name: "DEFAULT", desc: "Ljava/lang/Int160;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT168: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int168", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int168", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int168", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT168: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int168", name: "DEFAULT", desc: "Ljava/lang/Int168;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT176: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int176", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int176", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int176", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT176: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int176", name: "DEFAULT", desc: "Ljava/lang/Int176;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT184: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int184", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int184", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int184", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT184: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int184", name: "DEFAULT", desc: "Ljava/lang/Int184;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT192: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int192", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int192", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int192", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT192: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int192", name: "DEFAULT", desc: "Ljava/lang/Int192;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT200: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int200", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int200", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int200", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT200: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int200", name: "DEFAULT", desc: "Ljava/lang/Int200;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT208: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int208", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int208", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int208", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT208: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int208", name: "DEFAULT", desc: "Ljava/lang/Int208;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT216: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int216", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int216", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int216", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT216: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int216", name: "DEFAULT", desc: "Ljava/lang/Int216;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT224: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int224", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int224", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int224", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT224: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int224", name: "DEFAULT", desc: "Ljava/lang/Int224;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT232: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int232", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int232", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int232", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT232: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int232", name: "DEFAULT", desc: "Ljava/lang/Int232;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT24: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int24", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int24", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int24", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT24: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int24", name: "DEFAULT", desc: "Ljava/lang/Int24;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT240: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int240", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int240", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int240", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT240: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int240", name: "DEFAULT", desc: "Ljava/lang/Int240;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT248: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int248", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int248", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int248", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT248: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int248", name: "DEFAULT", desc: "Ljava/lang/Int248;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT256: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int256", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int256", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int256", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT256: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int256", name: "DEFAULT", desc: "Ljava/lang/Int256;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT32: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int32", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int32", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int32", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT32: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int32", name: "DEFAULT", desc: "Ljava/lang/Int32;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT40: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int40", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int40", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int40", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT40: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int40", name: "DEFAULT", desc: "Ljava/lang/Int40;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT48: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int48", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int48", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int48", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT48: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int48", name: "DEFAULT", desc: "Ljava/lang/Int48;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT56: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int56", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int56", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int56", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT56: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int56", name: "DEFAULT", desc: "Ljava/lang/Int56;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT64: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int64", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int64", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int64", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT64: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int64", name: "DEFAULT", desc: "Ljava/lang/Int64;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT72: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int72", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int72", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int72", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT72: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int72", name: "DEFAULT", desc: "Ljava/lang/Int72;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT8: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int8", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int8", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int8", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT8: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int8", name: "DEFAULT", desc: "Ljava/lang/Int8;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT80: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int80", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int80", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int80", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT80: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int80", name: "DEFAULT", desc: "Ljava/lang/Int80;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT88: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int88", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int88", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int88", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT88: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int88", name: "DEFAULT", desc: "Ljava/lang/Int88;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INT96: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Int96", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int96", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Int96", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INT96: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Int96", name: "DEFAULT", desc: "Ljava/lang/Int96;", flags: 25 },
];

pub static METHODS_JAVA_LANG_INTTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/IntType", name: "<init>", desc: "(Ljava/lang/String;ILjava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IntType", name: "getBitSize", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/IntType", name: "valid", desc: "()Z", flags: 4 },
    MethodMeta { owner_internal: "java/lang/IntType", name: "isValidBitSize", desc: "(I)Z", flags: 10 },
    MethodMeta { owner_internal: "java/lang/IntType", name: "isValidBitCount", desc: "(ILjava/math/BigInteger;)Z", flags: 10 },
];
pub static FIELDS_JAVA_LANG_INTTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/IntType", name: "bitSize", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_LANG_INTEGER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Integer", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "valueOf", desc: "(I)Ljava/lang/Integer;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/Integer;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "compareTo", desc: "(Ljava/lang/Integer;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toString", desc: "(II)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toString", desc: "(I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toHexString", desc: "(I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toOctalString", desc: "(I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toBinaryString", desc: "(I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "byteValue", desc: "()B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "shortValue", desc: "()S", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "intValue", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "longValue", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "floatValue", desc: "()F", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "doubleValue", desc: "()D", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "signum", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "bitCount", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "reverseBytes", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "parseInt", desc: "(Ljava/lang/String;)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "parseInt", desc: "(Ljava/lang/String;I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "decode", desc: "(Ljava/lang/String;)Ljava/lang/Integer;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "numberOfLeadingZeros", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "numberOfTrailingZeros", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toUnsignedString", desc: "(II)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "toUnsignedString", desc: "(I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "compareUnsigned", desc: "(II)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "compare", desc: "(II)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Integer", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INTEGER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Integer", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Integer", name: "MIN_VALUE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Integer", name: "MAX_VALUE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Integer", name: "value", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_LANG_INTERNALERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/InternalError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/InternalError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INTERNALERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INTERRUPTEDEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/InterruptedException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/InterruptedException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/InterruptedException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/InterruptedException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INTERRUPTEDEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ITERABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Iterable", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_ITERABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_LINKAGEERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/LinkageError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/LinkageError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_LINKAGEERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_LONG: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Long", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/Long;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "valueOf", desc: "(J)Ljava/lang/Long;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "compareTo", desc: "(Ljava/lang/Long;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toString", desc: "(JI)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toString", desc: "(J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toHexString", desc: "(J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toOctalString", desc: "(J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toBinaryString", desc: "(J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "byteValue", desc: "()B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "shortValue", desc: "()S", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "intValue", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "longValue", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "floatValue", desc: "()F", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "doubleValue", desc: "()D", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Long", name: "signum", desc: "(J)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "pow", desc: "(JJ)J", flags: 10 },
    MethodMeta { owner_internal: "java/lang/Long", name: "parseLong", desc: "(Ljava/lang/String;)J", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "parseLong", desc: "(Ljava/lang/String;I)J", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "numberOfLeadingZeros", desc: "(J)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toUnsignedString", desc: "(JI)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "toUnsignedString", desc: "(J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "compareUnsigned", desc: "(JJ)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "compare", desc: "(JJ)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Long", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Long", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_LONG: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Long", name: "MIN_VALUE", desc: "J", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Long", name: "MAX_VALUE", desc: "J", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Long", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Long", name: "value", desc: "J", flags: 18 },
];

pub static METHODS_JAVA_LANG_MAPPING: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Mapping", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "<init>", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "set", desc: "(Ljava/lang/Object;Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "remove", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "getDefaultValue", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Mapping", name: "hasDefaultValue", desc: "()Z", flags: 1 },
];
pub static FIELDS_JAVA_LANG_MAPPING: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Mapping", name: "map", desc: "Ljava/util/HashMap;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Mapping", name: "defaultValue", desc: "Ljava/lang/Object;", flags: 18 },
];

pub static METHODS_JAVA_LANG_MATH: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Math", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Math", name: "max", desc: "(II)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "min", desc: "(II)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "max", desc: "(JJ)J", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "min", desc: "(JJ)J", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "abs", desc: "(I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "abs", desc: "(J)J", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "randomInt", desc: "()I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Math", name: "random", desc: "()I", flags: 9 },
];
pub static FIELDS_JAVA_LANG_MATH: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_MESSAGE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Message", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Message", name: "getSender", desc: "()Ljava/lang/Address;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Message", name: "getValue", desc: "()Ljava/lang/Uint256;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Message", name: "getData", desc: "()[B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Message", name: "getAsset", desc: "()Ljava/lang/Uint64;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Message", name: "getSig", desc: "()[B", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Message", name: "getGas", desc: "()Ljava/lang/Uint256;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Message", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Message", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_MESSAGE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Message", name: "sender", desc: "Ljava/lang/Address;", flags: 20 },
    FieldMeta { owner_internal: "java/lang/Message", name: "value", desc: "Ljava/lang/Uint256;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Message", name: "data", desc: "[B", flags: 20 },
    FieldMeta { owner_internal: "java/lang/Message", name: "asset", desc: "Ljava/lang/Uint64;", flags: 20 },
    FieldMeta { owner_internal: "java/lang/Message", name: "sig", desc: "[B", flags: 20 },
    FieldMeta { owner_internal: "java/lang/Message", name: "gas", desc: "Ljava/lang/Uint256;", flags: 20 },
];

pub static METHODS_JAVA_LANG_NEGATIVEARRAYSIZEEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NegativeArraySizeException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NegativeArraySizeException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NEGATIVEARRAYSIZEEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NOCLASSDEFFOUNDERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NoClassDefFoundError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NoClassDefFoundError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NOCLASSDEFFOUNDERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NOSUCHFIELDERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NoSuchFieldError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NoSuchFieldError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NOSUCHFIELDERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NOSUCHFIELDEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NoSuchFieldException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NoSuchFieldException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NOSUCHFIELDEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NOSUCHMETHODERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NoSuchMethodError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NoSuchMethodError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NOSUCHMETHODERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NOSUCHMETHODEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NoSuchMethodException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NoSuchMethodException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NOSUCHMETHODEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NULLPOINTEREXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NullPointerException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NullPointerException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NullPointerException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NullPointerException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NULLPOINTEREXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NUMBER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Number", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Number", name: "byteValue", desc: "()B", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/Number", name: "shortValue", desc: "()S", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/Number", name: "intValue", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/Number", name: "longValue", desc: "()J", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_NUMBER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NUMBERFORMATEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NumberFormatException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumberFormatException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_NUMBERFORMATEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_NUMERICARRAYS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "valueOf", desc: "(J)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "compare", desc: "([I[I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "compare", desc: "([ILjava/math/BigInteger;I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "stripLeadingZeroes", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "stripLeadingZeroes", desc: "([I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "stripLeadingZeroes", desc: "([B)[B", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "not", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "and", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "or", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "xor", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "setBit", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "clearBit", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "flipBit", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "lshift", desc: "([III)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "rshift", desc: "([III)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "inc", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "inc", desc: "([IZI)[I", flags: 8 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "dec", desc: "([I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "add", desc: "([I[II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "subgt", desc: "([I[I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "sub", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "mulmod", desc: "([I[I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "addmod", desc: "([I[I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "multiply", desc: "([I[II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "mul", desc: "([IIII)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "mul", desc: "([IIIII)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "mul", desc: "([II[II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "mul", desc: "([II[IIII)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "bitLength", desc: "([I)I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "square", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "pow", desc: "([IIII)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "divide", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "mod", desc: "([I[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "divmod", desc: "([IJ)[[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "divmod", desc: "([I[I)[[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "from", desc: "(Ljava/math/BigInteger;I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "from", desc: "([B[I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "maxValue", desc: "(I)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/NumericArrays", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_NUMERICARRAYS: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "LONG", desc: "J", flags: 25 },
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "MAX_CACHE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "CACHE", desc: "[[I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "ZERO", desc: "[I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "ONE", desc: "[I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "TWO", desc: "[I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/NumericArrays", name: "BIG_INT", desc: "Ljava/math/BigInteger;", flags: 10 },
];

pub static METHODS_JAVA_LANG_NUMERICTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/NumericType", name: "<init>", desc: "(Ljava/lang/String;Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumericType", name: "getTypeAsString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumericType", name: "getValue", desc: "()Ljava/math/BigInteger;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumericType", name: "getBitSize", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/NumericType", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumericType", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/NumericType", name: "getValue", desc: "()Ljava/lang/Object;", flags: 4161 },
];
pub static FIELDS_JAVA_LANG_NUMERICTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/NumericType", name: "type", desc: "Ljava/lang/String;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/NumericType", name: "value", desc: "Ljava/math/BigInteger;", flags: 0 },
];

pub static METHODS_JAVA_LANG_OBJECT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Object", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Object", name: "clone", desc: "()Ljava/lang/Object;", flags: 4 },
    MethodMeta { owner_internal: "java/lang/Object", name: "clone", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 266 },
    MethodMeta { owner_internal: "java/lang/Object", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Object", name: "finalize", desc: "()V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/Object", name: "getClass", desc: "()Ljava/lang/Class;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Object", name: "getVMClass", desc: "()Ljava/base/VMClass;", flags: 256 },
    MethodMeta { owner_internal: "java/lang/Object", name: "hashCode", desc: "()I", flags: 257 },
    MethodMeta { owner_internal: "java/lang/Object", name: "notify", desc: "()V", flags: 273 },
    MethodMeta { owner_internal: "java/lang/Object", name: "notifyAll", desc: "()V", flags: 273 },
    MethodMeta { owner_internal: "java/lang/Object", name: "toString", desc: "()Ljava/lang/String;", flags: 257 },
    MethodMeta { owner_internal: "java/lang/Object", name: "wait", desc: "()V", flags: 17 },
    MethodMeta { owner_internal: "java/lang/Object", name: "wait", desc: "(J)V", flags: 273 },
    MethodMeta { owner_internal: "java/lang/Object", name: "wait", desc: "(JI)V", flags: 17 },
];
pub static FIELDS_JAVA_LANG_OBJECT: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_OUTOFMEMORYERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/OutOfMemoryError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/OutOfMemoryError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_OUTOFMEMORYERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_OVERRIDE: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_OVERRIDE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_OWNERSHIPTRANSFERRED: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/OwnershipTransferred", name: "<init>", desc: "(Ljava/lang/Address;Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_OWNERSHIPTRANSFERRED: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/OwnershipTransferred", name: "indexed_previousOwner", desc: "Ljava/lang/Address;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/OwnershipTransferred", name: "indexed_newOwner", desc: "Ljava/lang/Address;", flags: 17 },
];

pub static METHODS_JAVA_LANG_PACKAGE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Package", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/ClassLoader;)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getImplementationTitle", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getImplementationVendor", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getImplementationVersion", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getSpecificationTitle", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getSpecificationVendor", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "getSpecificationVersion", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "isSealed", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Package", name: "isSealed", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_LANG_PACKAGE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Package", name: "name", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "implementationTitle", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "implementationVendor", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "implementationVersion", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "specificationTitle", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "specificationVendor", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "specificationVersion", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "sealed", desc: "Ljava/lang/Object;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/Package", name: "loader", desc: "Ljava/lang/ClassLoader;", flags: 18 },
];

pub static METHODS_JAVA_LANG_PAUSED: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Paused", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_PAUSED: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Paused", name: "indexed_account", desc: "Ljava/lang/Address;", flags: 17 },
];

pub static METHODS_JAVA_LANG_READABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Readable", name: "read", desc: "(Ljava/lang/Object;)I", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_READABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECTIVEOPERATIONEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ReflectiveOperationException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REFLECTIVEOPERATIONEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REVERTEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/RevertException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REVERTEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_RUNTIME: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Runtime", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Runtime", name: "getRuntime", desc: "()Ljava/lang/Runtime;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Runtime", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_RUNTIME: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Runtime", name: "instance", desc: "Ljava/lang/Runtime;", flags: 26 },
];

pub static METHODS_JAVA_LANG_RUNTIMEEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/RuntimeException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/RuntimeException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/RuntimeException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/RuntimeException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_RUNTIMEEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_SECURITYEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/SecurityException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/SecurityException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/SecurityException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/SecurityException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_SECURITYEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_SECURITYMANAGER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/SecurityManager", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/SecurityManager", name: "checkSecurityAccess", desc: "(Ljava/lang/String;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_SECURITYMANAGER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_SHORT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Short", name: "<init>", desc: "(S)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "valueOf", desc: "(S)Ljava/lang/Short;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Short", name: "compareTo", desc: "(Ljava/lang/Short;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "toString", desc: "(SI)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Short", name: "toString", desc: "(S)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Short", name: "byteValue", desc: "()B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "shortValue", desc: "()S", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "intValue", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "longValue", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "floatValue", desc: "()F", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "doubleValue", desc: "()D", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Short", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Short", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_SHORT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Short", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Short", name: "MIN_VALUE", desc: "S", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Short", name: "MAX_VALUE", desc: "S", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Short", name: "value", desc: "S", flags: 18 },
];

pub static METHODS_JAVA_LANG_STACKOVERFLOWERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StackOverflowError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackOverflowError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_STACKOVERFLOWERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_STACKTRACEELEMENT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "getClassName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "getMethodName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "getFileName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "getLineNumber", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "isNativeMethod", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StackTraceElement", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_STACKTRACEELEMENT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/StackTraceElement", name: "NativeLine", desc: "I", flags: 10 },
    FieldMeta { owner_internal: "java/lang/StackTraceElement", name: "class_", desc: "Ljava/lang/String;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/StackTraceElement", name: "method", desc: "Ljava/lang/String;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/StackTraceElement", name: "file", desc: "Ljava/lang/String;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/StackTraceElement", name: "line", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_LANG_STRING: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([CIIZ)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([CII)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([C)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([BIILjava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([BIIZ)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([BII)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([BLjava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "([BIII)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "<init>", desc: "(Ljava/lang/Object;IIZ)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/String", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "length", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "equalsIgnoreCase", desc: "(Ljava/lang/String;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "compareTo", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "compareToIgnoreCase", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "trim", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "toLowerCase", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "toUpperCase", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "indexOf", desc: "(I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "indexOf", desc: "(II)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "lastIndexOf", desc: "(I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "indexOf", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "indexOf", desc: "(Ljava/lang/String;I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "lastIndexOf", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "lastIndexOf", desc: "(Ljava/lang/String;I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "replace", desc: "(CC)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "substring", desc: "(I)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "substring", desc: "(II)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "startsWith", desc: "(Ljava/lang/String;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "startsWith", desc: "(Ljava/lang/String;I)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "endsWith", desc: "(Ljava/lang/String;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "concat", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "getBytes", desc: "(II[BI)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "getBytes", desc: "()[B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "getBytes", desc: "(Ljava/lang/String;)[B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "getChars", desc: "(II[CI)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "toCharArray", desc: "()[C", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "charAt", desc: "(I)C", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "subSequence", desc: "(II)Ljava/lang/CharSequence;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "replace", desc: "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "infuse", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/String", name: "intern", desc: "()Ljava/lang/String;", flags: 257 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(Ljava/lang/Object;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(Z)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(B)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(S)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(C)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "(J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "([CII)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "valueOf", desc: "([C)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/String", name: "lastIndexOf", desc: "(II)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "regionMatches", desc: "(ILjava/lang/String;II)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "regionMatches", desc: "(ZILjava/lang/String;II)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "contains", desc: "(Ljava/lang/CharSequence;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "codePointAt", desc: "(I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "codePointCount", desc: "(II)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/String", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/String", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_STRING: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/String", name: "data", desc: "[C", flags: 18 },
    FieldMeta { owner_internal: "java/lang/String", name: "offset", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/lang/String", name: "length", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/lang/String", name: "hashCode", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/lang/String", name: "UTF_8_ENCODING", desc: "Ljava/lang/String;", flags: 26 },
    FieldMeta { owner_internal: "java/lang/String", name: "ISO_8859_1_ENCODING", desc: "Ljava/lang/String;", flags: 26 },
    FieldMeta { owner_internal: "java/lang/String", name: "LATIN_1_ENCODING", desc: "Ljava/lang/String;", flags: 26 },
    FieldMeta { owner_internal: "java/lang/String", name: "DEFAULT_ENCODING", desc: "Ljava/lang/String;", flags: 26 },
    FieldMeta { owner_internal: "java/lang/String", name: "CASE_INSENSITIVE_ORDER", desc: "Ljava/util/Comparator;", flags: 9 },
];

pub static METHODS_JAVA_LANG_STRINGBUFFER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(Ljava/lang/String;)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(Ljava/lang/Object;)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(C)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(Z)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(I)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(J)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(F)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "(D)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "([CII)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "append", desc: "([C)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "indexOf", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "indexOf", desc: "(Ljava/lang/String;I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "insert", desc: "(ILjava/lang/String;)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "insert", desc: "(IC)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "insert", desc: "(II)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "delete", desc: "(II)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "deleteCharAt", desc: "(I)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "charAt", desc: "(I)C", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "length", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "replace", desc: "(IILjava/lang/String;)Ljava/lang/StringBuffer;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "setLength", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "setCharAt", desc: "(IC)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "getChars", desc: "(II[CI)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "substring", desc: "(II)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuffer", name: "subSequence", desc: "(II)Ljava/lang/CharSequence;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_STRINGBUFFER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/StringBuffer", name: "sb", desc: "Ljava/lang/StringBuilder;", flags: 18 },
];

pub static METHODS_JAVA_LANG_STRINGBUILDER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "flush", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/String;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "([CII)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "([C)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(C)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Z)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(I)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(J)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(F)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(D)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "charAt", desc: "(I)C", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "insert", desc: "(ILjava/lang/String;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "insert", desc: "(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "insert", desc: "(IC)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "insert", desc: "(II)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "delete", desc: "(II)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "deleteCharAt", desc: "(I)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "replace", desc: "(IILjava/lang/String;)Ljava/lang/StringBuilder;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "indexOf", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "indexOf", desc: "(Ljava/lang/String;I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "lastIndexOf", desc: "(Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "lastIndexOf", desc: "(Ljava/lang/String;I)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "length", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "setLength", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "getChars", desc: "(II[CI)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "substring", desc: "(I)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "substring", desc: "(II)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "subSequence", desc: "(II)Ljava/lang/CharSequence;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "setCharAt", desc: "(IC)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "ensureCapacity", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/StringBuilder", name: "append", desc: "(C)Ljava/lang/Appendable;", flags: 4161 },
];
pub static FIELDS_JAVA_LANG_STRINGBUILDER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/StringBuilder", name: "BufferSize", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/StringBuilder", name: "chain", desc: "Ljava/lang/StringBuilderCell;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/StringBuilder", name: "length", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/lang/StringBuilder", name: "buffer", desc: "[C", flags: 2 },
    FieldMeta { owner_internal: "java/lang/StringBuilder", name: "position", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_LANG_STRINGBUILDERCELL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StringBuilderCell", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/StringBuilderCell;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_STRINGBUILDERCELL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/StringBuilderCell", name: "value", desc: "Ljava/lang/String;", flags: 1 },
    FieldMeta { owner_internal: "java/lang/StringBuilderCell", name: "next", desc: "Ljava/lang/StringBuilderCell;", flags: 1 },
];

pub static METHODS_JAVA_LANG_STRINGCOMPARATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StringComparator", name: "<init>", desc: "()V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/StringComparator", name: "compare", desc: "(Ljava/lang/String;Ljava/lang/String;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringComparator", name: "compare", desc: "(Ljava/lang/Object;Ljava/lang/Object;)I", flags: 4161 },
];
pub static FIELDS_JAVA_LANG_STRINGCOMPARATOR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_STRINGINDEXOUTOFBOUNDSEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StringIndexOutOfBoundsException", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringIndexOutOfBoundsException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringIndexOutOfBoundsException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_STRINGINDEXOUTOFBOUNDSEXCEPTION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/StringIndexOutOfBoundsException", name: "serialVersionUID", desc: "J", flags: 26 },
];

pub static METHODS_JAVA_LANG_STRINGUTIL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/StringUtil", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/StringUtil", name: "fromString", desc: "(Ljava/lang/String;II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/StringUtil", name: "muladd", desc: "([III)V", flags: 10 },
    MethodMeta { owner_internal: "java/lang/StringUtil", name: "toString", desc: "([II)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/StringUtil", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_STRINGUTIL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/StringUtil", name: "BITS_PER_DIGIT", desc: "[I", flags: 10 },
    FieldMeta { owner_internal: "java/lang/StringUtil", name: "DIGITS_PER_INT", desc: "[I", flags: 10 },
    FieldMeta { owner_internal: "java/lang/StringUtil", name: "RADIX_LENGTH_LONG", desc: "[I", flags: 10 },
    FieldMeta { owner_internal: "java/lang/StringUtil", name: "RADIX_INT", desc: "[I", flags: 10 },
    FieldMeta { owner_internal: "java/lang/StringUtil", name: "RADIX_LONG", desc: "[J", flags: 10 },
    FieldMeta { owner_internal: "java/lang/StringUtil", name: "ZEROES", desc: "Ljava/lang/String;", flags: 8 },
];

pub static METHODS_JAVA_LANG_SUPPRESSWARNINGS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/SuppressWarnings", name: "value", desc: "()[Ljava/lang/String;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_SUPPRESSWARNINGS: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_SYSTEM: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/System", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/System", name: "arraycopy", desc: "(Ljava/lang/Object;ILjava/lang/Object;II)V", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "getProperty", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "getProperty", desc: "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "currentTimeMillis", desc: "()J", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "identityHashCode", desc: "(Ljava/lang/Object;)I", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "nanoTime", desc: "()J", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "load", desc: "(Ljava/lang/String;)V", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "loadLibrary", desc: "(Ljava/lang/String;)V", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "gc", desc: "()V", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "exit", desc: "(I)V", flags: 9 },
    MethodMeta { owner_internal: "java/lang/System", name: "setOut0", desc: "(Ljava/io/SystemPrintStream;)V", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "setErr0", desc: "(Ljava/io/SystemPrintStream;)V", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "setIn0", desc: "(Ljava/io/SystemPrintStream;)V", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "initSystemOut", desc: "()V", flags: 265 },
    MethodMeta { owner_internal: "java/lang/System", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_SYSTEM: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/System", name: "out", desc: "Ljava/io/SystemPrintStream;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/System", name: "err", desc: "Ljava/io/SystemPrintStream;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/System", name: "in", desc: "Ljava/io/SystemPrintStream;", flags: 25 },
];

pub static METHODS_JAVA_LANG_SYSTEMNANOTIME: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/SystemNanoTime", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/SystemNanoTime", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_SYSTEMNANOTIME: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/SystemNanoTime", name: "BaseInMillis", desc: "J", flags: 25 },
];

pub static METHODS_JAVA_LANG_THREADDEATH: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/ThreadDeath", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_THREADDEATH: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_THROWABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Throwable", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "getCause", desc: "()Ljava/lang/Throwable;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "initCause", desc: "(Ljava/lang/Throwable;)Ljava/lang/Throwable;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "getMessage", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "getLocalizedMessage", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "trace", desc: "(I)Ljava/lang/Object;", flags: 266 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "resolveTrace", desc: "(Ljava/lang/Object;)[Ljava/lang/StackTraceElement;", flags: 264 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "resolveTrace", desc: "()[Ljava/lang/StackTraceElement;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "getStackTrace", desc: "()[Ljava/lang/StackTraceElement;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "setStackTrace", desc: "([Ljava/lang/StackTraceElement;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "printStackTrace", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "printStackTrace", desc: "(Ljava/lang/StringBuilder;Ljava/lang/String;)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "fillInStackTrace", desc: "()Ljava/lang/Throwable;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Throwable", name: "addSuppressed", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_THROWABLE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Throwable", name: "message", desc: "Ljava/lang/String;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/Throwable", name: "trace", desc: "Ljava/lang/Object;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/Throwable", name: "cause", desc: "Ljava/lang/Throwable;", flags: 2 },
];

pub static METHODS_JAVA_LANG_TRANSFER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Transfer", name: "<init>", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_TRANSFER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Transfer", name: "indexed_from", desc: "Ljava/lang/Address;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/Transfer", name: "indexed_to", desc: "Ljava/lang/Address;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/Transfer", name: "value", desc: "Ljava/lang/Uint256;", flags: 17 },
];

pub static METHODS_JAVA_LANG_TYPENOTPRESENTEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/TypeNotPresentException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/TypeNotPresentException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_TYPENOTPRESENTEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_UINT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "(Ljava/lang/Uint128;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "not", desc: "()Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "and", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "or", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "xor", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "setBit", desc: "(I)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "clearBit", desc: "(I)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "flipBit", desc: "(I)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "shiftLeft", desc: "(I)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "shiftRight", desc: "(I)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "inc", desc: "()Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "dec", desc: "()Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "add", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "addmod", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "sub", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mul", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mulmod", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "pow", desc: "(I)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "div", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mod", desc: "(Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "divmod", desc: "(Ljava/lang/Uint;)[Ljava/lang/Uint;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "add", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "sub", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mul", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "div", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mod", desc: "(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint", name: "MAX_VALUE", desc: "Ljava/lang/Uint;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint", name: "ZERO", desc: "Ljava/lang/Uint;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint", name: "ONE", desc: "Ljava/lang/Uint;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint", name: "TWO", desc: "Ljava/lang/Uint;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT128: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "(Ljava/lang/Uint256;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "not", desc: "()Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "and", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "or", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "xor", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "setBit", desc: "(I)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "clearBit", desc: "(I)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "flipBit", desc: "(I)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "shiftLeft", desc: "(I)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "shiftRight", desc: "(I)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "inc", desc: "()Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "dec", desc: "()Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "add", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "addmod", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "sub", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mul", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mulmod", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "pow", desc: "(I)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "div", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mod", desc: "(Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "divmod", desc: "(Ljava/lang/Uint128;)[Ljava/lang/Uint128;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "add", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "sub", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mul", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "div", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mod", desc: "(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint128", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT128: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint128", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint128", name: "MAX_VALUE", desc: "Ljava/lang/Uint128;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint128", name: "ZERO", desc: "Ljava/lang/Uint128;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint128", name: "ONE", desc: "Ljava/lang/Uint128;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint128", name: "TWO", desc: "Ljava/lang/Uint128;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT16: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<init>", desc: "(S)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "not", desc: "()Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "and", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "or", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "xor", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "setBit", desc: "(I)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "clearBit", desc: "(I)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "flipBit", desc: "(I)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "shiftLeft", desc: "(I)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "shiftRight", desc: "(I)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "inc", desc: "()Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "dec", desc: "()Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "add", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "addmod", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "sub", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mul", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mulmod", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "pow", desc: "(I)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "div", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mod", desc: "(Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "divmod", desc: "(Ljava/lang/Uint16;)[Ljava/lang/Uint16;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "add", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "sub", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mul", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "div", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mod", desc: "(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint16", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT16: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint16", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint16", name: "MAX_VALUE", desc: "Ljava/lang/Uint16;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint16", name: "ZERO", desc: "Ljava/lang/Uint16;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint16", name: "ONE", desc: "Ljava/lang/Uint16;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint16", name: "TWO", desc: "Ljava/lang/Uint16;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT160: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "(Ljava/lang/Uint128;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "not", desc: "()Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "and", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "or", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "xor", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "setBit", desc: "(I)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "clearBit", desc: "(I)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "flipBit", desc: "(I)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "shiftLeft", desc: "(I)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "shiftRight", desc: "(I)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "inc", desc: "()Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "dec", desc: "()Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "add", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "addmod", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "sub", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mul", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mulmod", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "pow", desc: "(I)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "div", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mod", desc: "(Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "divmod", desc: "(Ljava/lang/Uint160;)[Ljava/lang/Uint160;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "add", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "sub", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mul", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "div", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mod", desc: "(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint160", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT160: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint160", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint160", name: "MAX_VALUE", desc: "Ljava/lang/Uint160;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint160", name: "ZERO", desc: "Ljava/lang/Uint160;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint160", name: "ONE", desc: "Ljava/lang/Uint160;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint160", name: "TWO", desc: "Ljava/lang/Uint160;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT256: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "(Ljava/lang/Uint128;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "not", desc: "()Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "and", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "or", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "xor", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "setBit", desc: "(I)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "clearBit", desc: "(I)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "flipBit", desc: "(I)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "shiftLeft", desc: "(I)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "shiftRight", desc: "(I)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "inc", desc: "()Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "dec", desc: "()Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "add", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "addmod", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "sub", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mul", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mulmod", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "pow", desc: "(I)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "div", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mod", desc: "(Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "divmod", desc: "(Ljava/lang/Uint256;)[Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "add", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "sub", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mul", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "div", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mod", desc: "(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint256", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT256: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint256", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint256", name: "MAX_VALUE", desc: "Ljava/lang/Uint256;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint256", name: "ZERO", desc: "Ljava/lang/Uint256;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint256", name: "ONE", desc: "Ljava/lang/Uint256;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint256", name: "TWO", desc: "Ljava/lang/Uint256;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT32: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "not", desc: "()Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "and", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "or", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "xor", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "setBit", desc: "(I)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "clearBit", desc: "(I)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "flipBit", desc: "(I)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "shiftLeft", desc: "(I)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "shiftRight", desc: "(I)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "inc", desc: "()Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "dec", desc: "()Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "add", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "addmod", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "sub", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mul", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mulmod", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "pow", desc: "(I)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "div", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mod", desc: "(Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "divmod", desc: "(Ljava/lang/Uint32;)[Ljava/lang/Uint32;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "add", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "sub", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mul", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "div", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mod", desc: "(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint32", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT32: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint32", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint32", name: "MAX_VALUE", desc: "Ljava/lang/Uint32;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint32", name: "ZERO", desc: "Ljava/lang/Uint32;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint32", name: "ONE", desc: "Ljava/lang/Uint32;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint32", name: "TWO", desc: "Ljava/lang/Uint32;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT64: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<init>", desc: "([I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<init>", desc: "([B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "not", desc: "()Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "and", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "or", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "xor", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "setBit", desc: "(I)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "clearBit", desc: "(I)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "flipBit", desc: "(I)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "shiftLeft", desc: "(I)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "shiftRight", desc: "(I)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "inc", desc: "()Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "dec", desc: "()Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "add", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "addmod", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "sub", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mul", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mulmod", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "pow", desc: "(I)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "div", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mod", desc: "(Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "divmod", desc: "(Ljava/lang/Uint64;)[Ljava/lang/Uint64;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "add", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "sub", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mul", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "div", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mod", desc: "(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint64", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT64: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint64", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint64", name: "MAX_VALUE", desc: "Ljava/lang/Uint64;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint64", name: "ZERO", desc: "Ljava/lang/Uint64;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint64", name: "ONE", desc: "Ljava/lang/Uint64;", flags: 9 },
    FieldMeta { owner_internal: "java/lang/Uint64", name: "TWO", desc: "Ljava/lang/Uint64;", flags: 9 },
];

pub static METHODS_JAVA_LANG_UINT8: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Uint8", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "<init>", desc: "(Ljava/math/BigInteger;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "add", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "sub", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mul", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "div", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mod", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "and", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "or", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "xor", desc: "(Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "not", desc: "()Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "shiftRight", desc: "(I)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "shiftLeft", desc: "(I)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "setBit", desc: "(I)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "clearBit", desc: "(I)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "flipBit", desc: "(I)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "inc", desc: "()Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "dec", desc: "()Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "pow", desc: "(I)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "divmod", desc: "(Ljava/lang/Uint8;)[Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mulmod", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "addmod", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "add", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "sub", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mul", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "div", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mod", desc: "(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "dec", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "inc", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "not", desc: "()Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 4161 },
    MethodMeta { owner_internal: "java/lang/Uint8", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_UINT8: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Uint8", name: "MAX_WIDTH", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/Uint8", name: "MAX_VALUE", desc: "Ljava/lang/Uint8;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Uint8", name: "ZERO", desc: "Ljava/lang/Uint8;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Uint8", name: "ONE", desc: "Ljava/lang/Uint8;", flags: 25 },
    FieldMeta { owner_internal: "java/lang/Uint8", name: "value", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_LANG_UINTTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "(J)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "([I)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "([II)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "(Ljava/lang/UintType;I)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "(Ljava/lang/String;II)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "(Ljava/math/BigInteger;I)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "<init>", desc: "([BLjava/lang/UintType;)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "divmod", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "div", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "mod", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "mul", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "mulmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "pow", desc: "(I)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "not", desc: "()Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "and", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "or", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "xor", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "inc", desc: "()Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "dec", desc: "()Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "add", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "addmod", desc: "(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "sub", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "shiftLeft", desc: "(I)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "shiftRight", desc: "(I)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "setBit", desc: "(I)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "clearBit", desc: "(I)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "flipBit", desc: "(I)Ljava/lang/UintType;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "testBit", desc: "(I)Z", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "divideAndRemainder", desc: "(Ljava/lang/UintType;)[Ljava/lang/UintType;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "remainder", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "bitLength", desc: "()I", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "isZero", desc: "()Z", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "getLowestSetBit", desc: "()I", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "compareTo", desc: "(Ljava/lang/UintType;)I", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "max", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "min", desc: "(Ljava/lang/UintType;)Ljava/lang/UintType;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "intValue", desc: "()I", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "longValue", desc: "()J", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "shortValue", desc: "()S", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "byteValue", desc: "()B", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "intValueExact", desc: "()I", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "longValueExact", desc: "()J", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "shortValueExact", desc: "()S", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "byteValueExact", desc: "()B", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "toBigInteger", desc: "()Ljava/math/BigInteger;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "ceil", desc: "(II)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "toByteArray", desc: "()[B", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "toIntArray", desc: "()[I", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "toString", desc: "()Ljava/lang/String;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "toString", desc: "(I)Ljava/lang/String;", flags: 17 },
    MethodMeta { owner_internal: "java/lang/UintType", name: "compareTo", desc: "(Ljava/lang/Object;)I", flags: 4161 },
];
pub static FIELDS_JAVA_LANG_UINTTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/UintType", name: "ints", desc: "[I", flags: 16 },
    FieldMeta { owner_internal: "java/lang/UintType", name: "DEFAULT_RADIX", desc: "I", flags: 24 },
];

pub static METHODS_JAVA_LANG_UNPAUSED: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Unpaused", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_UNPAUSED: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Unpaused", name: "indexed_account", desc: "Ljava/lang/Address;", flags: 17 },
];

pub static METHODS_JAVA_LANG_UNSATISFIEDLINKERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/UnsatisfiedLinkError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/UnsatisfiedLinkError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_UNSATISFIEDLINKERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_UNSUPPORTEDOPERATIONEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/UnsupportedOperationException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/UnsupportedOperationException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/UnsupportedOperationException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/UnsupportedOperationException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_UNSUPPORTEDOPERATIONEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_VIRTUALMACHINEERROR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/VirtualMachineError", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/VirtualMachineError", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_VIRTUALMACHINEERROR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_VOID: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/Void", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/Void", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_VOID: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/Void", name: "TYPE", desc: "Ljava/lang/Class;", flags: 25 },
];

pub static METHODS_JAVA_LANG_ANNOTATION_ANNOTATION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/annotation/Annotation", name: "annotationType", desc: "()Ljava/lang/Class;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_ANNOTATION_ANNOTATION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_CONSTANT: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_CONSTANT: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_ELEMENTTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/annotation/ElementType", name: "values", desc: "()[Ljava/lang/annotation/ElementType;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/annotation/ElementType", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/annotation/ElementType;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/annotation/ElementType", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/annotation/ElementType", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_ANNOTATION_ELEMENTTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "ANNOTATION_TYPE", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "CONSTRUCTOR", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "FIELD", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "LOCAL_VARIABLE", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "METHOD", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "PACKAGE", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "PARAMETER", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "TYPE", desc: "Ljava/lang/annotation/ElementType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/ElementType", name: "$VALUES", desc: "[Ljava/lang/annotation/ElementType;", flags: 4122 },
];

pub static METHODS_JAVA_LANG_ANNOTATION_EXTERNAL: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_EXTERNAL: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_INTERNAL: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_INTERNAL: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_PAYABLE: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_PAYABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_PURE: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_PURE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_RETENTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/annotation/Retention", name: "value", desc: "()Ljava/lang/annotation/RetentionPolicy;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_ANNOTATION_RETENTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_RETENTIONPOLICY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "values", desc: "()[Ljava/lang/annotation/RetentionPolicy;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/annotation/RetentionPolicy;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_ANNOTATION_RETENTIONPOLICY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "CLASS", desc: "Ljava/lang/annotation/RetentionPolicy;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "RUNTIME", desc: "Ljava/lang/annotation/RetentionPolicy;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "SOURCE", desc: "Ljava/lang/annotation/RetentionPolicy;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/annotation/RetentionPolicy", name: "$VALUES", desc: "[Ljava/lang/annotation/RetentionPolicy;", flags: 4122 },
];

pub static METHODS_JAVA_LANG_ANNOTATION_TARGET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/annotation/Target", name: "value", desc: "()[Ljava/lang/annotation/ElementType;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_ANNOTATION_TARGET: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_VIEW: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_VIEW: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_ANNOTATION_VIRTUAL: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_ANNOTATION_VIRTUAL: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_BYTES_DIVISION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "div", desc: "([II)[[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "div", desc: "([IJ)[[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "div", desc: "([I[I)[[I", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "D3", desc: "(I[IIJI)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "D4_D5", desc: "(I[I[II)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "D4_D5", desc: "(I[IIII)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "mulsub", desc: "([I[IJII)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "mulsub", desc: "([IIIJI)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "divadd", desc: "([I[II)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "divadd", desc: "(JJ[II)I", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "divone", desc: "(JJ)J", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "lshunt", desc: "([II)V", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "rshunt", desc: "([II)V", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "rshift", desc: "([II)V", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "copyshift", desc: "([II[III)V", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Division", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES_DIVISION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/bytes/Division", name: "LONG", desc: "J", flags: 10 },
];

pub static METHODS_JAVA_LANG_BYTES_HEX: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "encodeQuantity", desc: "(Ljava/math/BigInteger;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "decodeQuantity", desc: "(Ljava/lang/String;)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "parsePaddedNumberHex", desc: "(Ljava/lang/String;)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "isLongValue", desc: "(Ljava/lang/String;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "isValidHexQuantity", desc: "(Ljava/lang/String;)Z", flags: 12 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "cleanHexPrefix", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "prependHexPrefix", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "containsHexPrefix", desc: "(Ljava/lang/String;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toBigInt", desc: "([BII)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toBigInt", desc: "([B)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toBigInt", desc: "(Ljava/lang/String;)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toBigIntNoPrefix", desc: "(Ljava/lang/String;)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringWithPrefix", desc: "(Ljava/math/BigInteger;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringNoPrefix", desc: "(Ljava/math/BigInteger;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringNoPrefix", desc: "([B)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringWithPrefixZeroPadded", desc: "(Ljava/math/BigInteger;I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringWithPrefixSafe", desc: "(Ljava/math/BigInteger;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringNoPrefixZeroPadded", desc: "(Ljava/math/BigInteger;I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexStringZeroPadded", desc: "(Ljava/math/BigInteger;IZ)Ljava/lang/String;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toBytesPadded", desc: "(Ljava/math/BigInteger;I)[B", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "hexStringToByteArray", desc: "(Ljava/lang/String;)[B", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexString", desc: "([BIIZ)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexCharArray", desc: "([BII)[C", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "toHexString", desc: "([B)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "asByte", desc: "(II)B", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "removeDoubleQuotes", desc: "(Ljava/lang/String;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "isEmpty", desc: "(Ljava/lang/String;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "zeros", desc: "(I)Ljava/lang/String;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "repeat", desc: "(CI)Ljava/lang/String;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/bytes/Hex", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_BYTES_HEX: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/bytes/Hex", name: "HEX_PREFIX", desc: "Ljava/lang/String;", flags: 26 },
    FieldMeta { owner_internal: "java/lang/bytes/Hex", name: "HEX_CHAR_MAP", desc: "[C", flags: 26 },
];

pub static METHODS_JAVA_LANG_BYTES_TYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/bytes/Type", name: "bytes32PaddedLength", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/bytes/Type", name: "getValue", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/bytes/Type", name: "getTypeAsString", desc: "()Ljava/lang/String;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_BYTES_TYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/bytes/Type", name: "MAX_BIT_LENGTH", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/bytes/Type", name: "MAX_BYTE_LENGTH", desc: "I", flags: 25 },
];

pub static METHODS_JAVA_LANG_CONTRACT_CONTRACT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/Contract", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_CONTRACT: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "name", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "symbol", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "decimals", desc: "()Ljava/lang/Uint8;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "owner", desc: "()Ljava/lang/Address;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "onlyOwner", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "totalSupply", desc: "()Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "balanceOf", desc: "(Ljava/lang/Address;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "transfer", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "allowance", desc: "(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/Uint256;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "approve", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "transferFrom", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_getAllowanceKey", desc: "(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/String;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_transfer", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_update", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_mint", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "mint", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_burn", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "burn", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_approve", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_approve", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;Z)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "_spendAllowance", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", flags: 4 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "increaseAllowance", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "decreaseAllowance", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "paused", desc: "()Ljava/lang/Bool;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "pause", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "unpause", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "transferOwnership", desc: "(Ljava/lang/Address;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/contract/ERC20", name: "renounceOwnership", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "balances", desc: "Ljava/lang/Mapping;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "allowances", desc: "Ljava/lang/Mapping;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "totalSupply", desc: "Ljava/lang/Uint256;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "name", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "symbol", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "paused", desc: "Ljava/lang/Bool;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/contract/ERC20", name: "owner", desc: "Ljava/lang/Address;", flags: 2 },
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTALLOWANCE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InsufficientAllowance", name: "<init>", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;Ljava/lang/Uint256;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTALLOWANCE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTBALANCE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InsufficientBalance", name: "<init>", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;Ljava/lang/Uint256;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTBALANCE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDAMOUNT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InvalidAmount", name: "<init>", desc: "(Ljava/lang/Uint256;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDAMOUNT: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDAPPROVER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InvalidApprover", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDAPPROVER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDRECEIVER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InvalidReceiver", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDRECEIVER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDSENDER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InvalidSender", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDSENDER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDSPENDER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20InvalidSpender", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDSPENDER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ERC20TOKENPAUSED: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/ERC20TokenPaused", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ERC20TOKENPAUSED: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_IERC20: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/IERC20", name: "totalSupply", desc: "()Ljava/lang/Uint256;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20", name: "balanceOf", desc: "(Ljava/lang/Address;)Ljava/lang/Uint256;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20", name: "transfer", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20", name: "allowance", desc: "(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/Uint256;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20", name: "approve", desc: "(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20", name: "transferFrom", desc: "(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_IERC20: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_IERC20ERRORS: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_CONTRACT_IERC20ERRORS: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_IERC20METADATA: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/IERC20Metadata", name: "name", desc: "()Ljava/lang/String;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20Metadata", name: "symbol", desc: "()Ljava/lang/String;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/contract/IERC20Metadata", name: "decimals", desc: "()Ljava/lang/Uint8;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_IERC20METADATA: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_CONTRACT_ONLYOWNER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/contract/OnlyOwner", name: "<init>", desc: "(Ljava/lang/Address;)V", flags: 1 },
];
pub static FIELDS_JAVA_LANG_CONTRACT_ONLYOWNER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INVOKE_METHODHANDLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "<init>", desc: "(ILjava/lang/ClassLoader;Ljava/base/VMMethod;)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "type", desc: "()Ljava/lang/invoke/MethodType;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODHANDLE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "REF_invokeVirtual", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "REF_invokeStatic", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "REF_invokeSpecial", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "REF_newInvokeSpecial", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "REF_invokeInterface", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "kind", desc: "I", flags: 16 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "loader", desc: "Ljava/lang/ClassLoader;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "method", desc: "Ljava/base/VMMethod;", flags: 16 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandle", name: "type", desc: "Ljava/lang/invoke/MethodType;", flags: 66 },
];

pub static METHODS_JAVA_LANG_INVOKE_METHODHANDLES: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandles", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandles", name: "lookup", desc: "()Ljava/lang/invoke/MethodHandlesLookup;", flags: 9 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODHANDLES: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_INVOKE_METHODHANDLESLOOKUP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandlesLookup", name: "<init>", desc: "(Ljava/base/VMClass;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodHandlesLookup", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODHANDLESLOOKUP: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandlesLookup", name: "class_", desc: "Ljava/base/VMClass;", flags: 16 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodHandlesLookup", name: "modes", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_LANG_INVOKE_METHODTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "<init>", desc: "(Ljava/lang/ClassLoader;[B)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "toMethodDescriptorString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "spec", desc: "(Ljava/lang/Class;)Ljava/lang/String;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "<init>", desc: "(Ljava/lang/Class;[Ljava/lang/Class;)V", flags: 130 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "methodType", desc: "(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", flags: 137 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "methodType", desc: "(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", flags: 137 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "footprint", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "returnType", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "parameterArray", desc: "()[Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "parameters", desc: "()Ljava/lang/Iterable;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "result", desc: "()Ljava/lang/invoke/MethodTypeResult;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "type", desc: "(Ljava/lang/String;)Ljava/lang/invoke/MethodTypeType;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodType", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/invoke/MethodType", name: "Primitives", desc: "[C", flags: 26 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodType", name: "loader", desc: "Ljava/lang/ClassLoader;", flags: 16 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodType", name: "spec", desc: "[B", flags: 16 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodType", name: "parameters", desc: "Ljava/util/List;", flags: 66 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodType", name: "result", desc: "Ljava/lang/invoke/MethodTypeResult;", flags: 66 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodType", name: "footprint", desc: "I", flags: 66 },
];

pub static METHODS_JAVA_LANG_INVOKE_METHODTYPEPARAMETER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "<init>", desc: "(IILjava/lang/String;Ljava/lang/Class;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "index", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "position", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "spec", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "type", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "load", desc: "()I", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODTYPEPARAMETER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "index", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "position", desc: "I", flags: 18 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "spec", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "type", desc: "Ljava/lang/Class;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeParameter", name: "load", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_LANG_INVOKE_METHODTYPERESULT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Class;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "return_", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "spec", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "type", desc: "()Ljava/lang/Class;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODTYPERESULT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "spec", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "type", desc: "Ljava/lang/Class;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeResult", name: "return_", desc: "I", flags: 18 },
];

pub static METHODS_JAVA_LANG_INVOKE_METHODTYPETYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "values", desc: "()[Ljava/lang/invoke/MethodTypeType;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "valueOf", desc: "(Ljava/lang/String;)Ljava/lang/invoke/MethodTypeType;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "<init>", desc: "(Ljava/lang/String;IIII)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODTYPETYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "ObjectType", desc: "Ljava/lang/invoke/MethodTypeType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "IntegerType", desc: "Ljava/lang/invoke/MethodTypeType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "FloatType", desc: "Ljava/lang/invoke/MethodTypeType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "LongType", desc: "Ljava/lang/invoke/MethodTypeType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "DoubleType", desc: "Ljava/lang/invoke/MethodTypeType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "VoidType", desc: "Ljava/lang/invoke/MethodTypeType;", flags: 16409 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "load", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "return_", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "size", desc: "I", flags: 17 },
    FieldMeta { owner_internal: "java/lang/invoke/MethodTypeType", name: "$VALUES", desc: "[Ljava/lang/invoke/MethodTypeType;", flags: 4122 },
];

pub static METHODS_JAVA_LANG_INVOKE_METHODTYPETYPESPEC: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeTypeSpec", name: "type", desc: "()Ljava/lang/Class;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/invoke/MethodTypeTypeSpec", name: "spec", desc: "()Ljava/lang/String;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_INVOKE_METHODTYPETYPESPEC: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_ACCESSIBLEOBJECT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "isAnnotationPresent", desc: "(Ljava/lang/Class;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "isAccessible", desc: "()Z", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "setAccessible", desc: "(Z)V", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "setAccessible", desc: "([Ljava/lang/reflect/AccessibleObject;Z)V", flags: 9 },
];
pub static FIELDS_JAVA_LANG_REFLECT_ACCESSIBLEOBJECT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "Accessible", desc: "I", flags: 28 },
    FieldMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "ACC_VARARGS", desc: "I", flags: 28 },
    FieldMeta { owner_internal: "java/lang/reflect/AccessibleObject", name: "ACC_SYNTHETIC", desc: "I", flags: 28 },
];

pub static METHODS_JAVA_LANG_REFLECT_ANNOTATEDELEMENT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/AnnotatedElement", name: "isAnnotationPresent", desc: "(Ljava/lang/Class;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/AnnotatedElement", name: "getAnnotation", desc: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/AnnotatedElement", name: "getAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/AnnotatedElement", name: "getDeclaredAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_REFLECT_ANNOTATEDELEMENT: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_ARRAY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Array", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Array", name: "get", desc: "(Ljava/lang/Object;I)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Array", name: "set", desc: "(Ljava/lang/Object;ILjava/lang/Object;)V", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Array", name: "getLength", desc: "(Ljava/lang/Object;)I", flags: 265 },
    MethodMeta { owner_internal: "java/lang/reflect/Array", name: "makeObjectArray", desc: "(Ljava/lang/Class;I)Ljava/lang/Object;", flags: 266 },
    MethodMeta { owner_internal: "java/lang/reflect/Array", name: "newInstance", desc: "(Ljava/lang/Class;I)Ljava/lang/Object;", flags: 9 },
];
pub static FIELDS_JAVA_LANG_REFLECT_ARRAY: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_CONSTRUCTOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "<init>", desc: "(Ljava/lang/reflect/Method;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "isAccessible", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "setAccessible", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getDeclaringClass", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getParameterTypes", desc: "()[Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getModifiers", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "isSynthetic", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getAnnotation", desc: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getDeclaredAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "make", desc: "(Ljava/base/VMClass;)Ljava/lang/Object;", flags: 266 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "newInstance", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "newInstance", desc: "([Ljava/lang/Object;)Ljava/lang/Object;", flags: 129 },
    MethodMeta { owner_internal: "java/lang/reflect/Constructor", name: "getExceptionTypes", desc: "()[Ljava/lang/Class;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REFLECT_CONSTRUCTOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/Constructor", name: "method", desc: "Ljava/lang/reflect/Method;", flags: 2 },
];

pub static METHODS_JAVA_LANG_REFLECT_FIELD: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "<init>", desc: "(Ljava/base/VMField;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "isAccessible", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setAccessible", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getDeclaringClass", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getModifiers", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "isSynthetic", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getName", desc: "(Ljava/base/VMField;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getType", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getGenericType", desc: "()Ljava/lang/reflect/Type;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getBoolean", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getByte", desc: "(Ljava/lang/Object;)B", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getShort", desc: "(Ljava/lang/Object;)S", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getChar", desc: "(Ljava/lang/Object;)C", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getInt", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getLong", desc: "(Ljava/lang/Object;)J", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "matchType", desc: "(Ljava/lang/Object;)Z", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "set", desc: "(Ljava/lang/Object;Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "set", desc: "(Ljava/lang/Object;J)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setByte", desc: "(Ljava/lang/Object;B)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setBoolean", desc: "(Ljava/lang/Object;Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setChar", desc: "(Ljava/lang/Object;C)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setShort", desc: "(Ljava/lang/Object;S)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setInt", desc: "(Ljava/lang/Object;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setLong", desc: "(Ljava/lang/Object;J)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getAnnotation", desc: "([Ljava/lang/Object;)Ljava/lang/annotation/Annotation;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "hasAnnotations", desc: "()Z", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getAnnotation", desc: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getDeclaredAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getPrimitive", desc: "(Ljava/lang/Object;II)J", flags: 266 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "getObject", desc: "(Ljava/lang/Object;I)Ljava/lang/Object;", flags: 266 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setPrimitive", desc: "(Ljava/lang/Object;IIJ)V", flags: 266 },
    MethodMeta { owner_internal: "java/lang/reflect/Field", name: "setObject", desc: "(Ljava/lang/Object;ILjava/lang/Object;)V", flags: 266 },
];
pub static FIELDS_JAVA_LANG_REFLECT_FIELD: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "VoidField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "ByteField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "CharField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "IntField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "LongField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "ShortField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "BooleanField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "ObjectField", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "vmField", desc: "Ljava/base/VMField;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/Field", name: "accessible", desc: "Z", flags: 2 },
];

pub static METHODS_JAVA_LANG_REFLECT_GENERICDECLARATION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/GenericDeclaration", name: "getTypeParameters", desc: "()[Ljava/lang/reflect/TypeVariable;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_REFLECT_GENERICDECLARATION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_INVOCATIONHANDLER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/InvocationHandler", name: "invoke", desc: "(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_REFLECT_INVOCATIONHANDLER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/InvocationTargetException", name: "<init>", desc: "(Ljava/lang/Throwable;Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/InvocationTargetException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/InvocationTargetException", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/InvocationTargetException", name: "getTargetException", desc: "()Ljava/lang/Throwable;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/InvocationTargetException", name: "target", desc: "Ljava/lang/Throwable;", flags: 2 },
];

pub static METHODS_JAVA_LANG_REFLECT_MEMBER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Member", name: "getDeclaringClass", desc: "()Ljava/lang/Class;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/Member", name: "getModifiers", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/Member", name: "getName", desc: "()Ljava/lang/String;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/Member", name: "isSynthetic", desc: "()Z", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_REFLECT_MEMBER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/Member", name: "PUBLIC", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Member", name: "DECLARED", desc: "I", flags: 25 },
];

pub static METHODS_JAVA_LANG_REFLECT_METHOD: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "<init>", desc: "(Ljava/base/VMMethod;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "isAccessible", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "setAccessible", desc: "(Z)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getCaller", desc: "()Ljava/base/VMMethod;", flags: 265 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getDeclaringClass", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getModifiers", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getName", desc: "(Ljava/base/VMMethod;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getSpec", desc: "()Ljava/lang/String;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getSpec", desc: "(Ljava/base/VMMethod;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getParameterTypes", desc: "()[Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "invoke", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "invoke", desc: "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", flags: 129 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "invoke", desc: "(Ljava/base/VMMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", flags: 394 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getReturnType", desc: "()Ljava/lang/Class;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getAnnotation", desc: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getDeclaredAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "isVarArgs", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "isSynthetic", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getDefaultValue", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Method", name: "getExceptionTypes", desc: "()[Ljava/lang/Class;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REFLECT_METHOD: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/Method", name: "vmMethod", desc: "Ljava/base/VMMethod;", flags: 17 },
    FieldMeta { owner_internal: "java/lang/reflect/Method", name: "accessible", desc: "Z", flags: 2 },
];

pub static METHODS_JAVA_LANG_REFLECT_MODIFIER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isPublic", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isPrivate", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isProtected", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isStatic", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isFinal", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isTransient", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isSuper", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isNative", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isAbstract", desc: "(I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Modifier", name: "isInterface", desc: "(I)Z", flags: 9 },
];
pub static FIELDS_JAVA_LANG_REFLECT_MODIFIER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "PUBLIC", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "PRIVATE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "PROTECTED", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "STATIC", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "FINAL", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "SUPER", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "SYNCHRONIZED", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "VOLATILE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "TRANSIENT", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "NATIVE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "INTERFACE", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "ABSTRACT", desc: "I", flags: 25 },
    FieldMeta { owner_internal: "java/lang/reflect/Modifier", name: "STRICT", desc: "I", flags: 25 },
];

pub static METHODS_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/ParameterizedType", name: "getActualTypeArguments", desc: "()[Ljava/lang/reflect/Type;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/ParameterizedType", name: "getOwnerType", desc: "()Ljava/lang/reflect/Type;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/ParameterizedType", name: "getRawType", desc: "()Ljava/lang/reflect/Type;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_PROXY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "getProxyClass", desc: "(Ljava/lang/ClassLoader;[Ljava/lang/Class;)Ljava/lang/Class;", flags: 137 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "isProxyClass", desc: "(Ljava/lang/Class;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "getInvocationHandler", desc: "(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "makeInvokeCode", desc: "(Ljava/util/List;Ljava/lang/String;[BIII)[B", flags: 10 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "makeConstructorCode", desc: "(Ljava/util/List;)[B", flags: 10 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "makeClass", desc: "(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Class;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "newProxyInstance", desc: "(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/Proxy", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_LANG_REFLECT_PROXY: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/Proxy", name: "nextNumber", desc: "I", flags: 10 },
    FieldMeta { owner_internal: "java/lang/reflect/Proxy", name: "h", desc: "Ljava/lang/reflect/InvocationHandler;", flags: 4 },
    FieldMeta { owner_internal: "java/lang/reflect/Proxy", name: "methodRefsMap", desc: "Ljava/util/Map;", flags: 28 },
    FieldMeta { owner_internal: "java/lang/reflect/Proxy", name: "methodRefs", desc: "[Ljava/lang/reflect/Method;", flags: 20 },
];

pub static METHODS_JAVA_LANG_REFLECT_SIGNATUREPARSER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "parse", desc: "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/reflect/Type;", flags: 9 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "parse", desc: "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Map;)Ljava/lang/reflect/Type;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "<init>", desc: "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Map;)V", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "parseType", desc: "()Ljava/lang/reflect/Type;", flags: 2 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "typeName", desc: "(Ljava/lang/reflect/Type;)Ljava/lang/String;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "makeType", desc: "([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;", flags: 10 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "collectTypeVariables", desc: "(Ljava/lang/Class;)Ljava/util/Map;", flags: 10 },
];
pub static FIELDS_JAVA_LANG_REFLECT_SIGNATUREPARSER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "loader", desc: "Ljava/lang/ClassLoader;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "array", desc: "[C", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "signature", desc: "Ljava/lang/String;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "offset", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "type", desc: "Ljava/lang/reflect/Type;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParser", name: "typeVariables", desc: "Ljava/util/Map;", flags: 18 },
];

pub static METHODS_JAVA_LANG_REFLECT_SIGNATUREPARSERTYPE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "<init>", desc: "([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "getRawType", desc: "()Ljava/lang/reflect/Type;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "getOwnerType", desc: "()Ljava/lang/reflect/Type;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "getActualTypeArguments", desc: "()[Ljava/lang/reflect/Type;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "typeName", desc: "(Ljava/lang/reflect/Type;)Ljava/lang/String;", flags: 10 },
];
pub static FIELDS_JAVA_LANG_REFLECT_SIGNATUREPARSERTYPE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "args", desc: "[Ljava/lang/reflect/Type;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "owner", desc: "Ljava/lang/reflect/Type;", flags: 18 },
    FieldMeta { owner_internal: "java/lang/reflect/SignatureParserType", name: "raw", desc: "Ljava/lang/reflect/Type;", flags: 18 },
];

pub static METHODS_JAVA_LANG_REFLECT_TYPE: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_LANG_REFLECT_TYPE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_TYPEVARIABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariable", name: "getBounds", desc: "()[Ljava/lang/reflect/Type;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariable", name: "getGenericDeclaration", desc: "()Ljava/lang/reflect/GenericDeclaration;", flags: 1025 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariable", name: "getName", desc: "()Ljava/lang/String;", flags: 1025 },
];
pub static FIELDS_JAVA_LANG_REFLECT_TYPEVARIABLE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "getBounds", desc: "()[Ljava/lang/reflect/Type;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "getGenericDeclaration", desc: "()Ljava/lang/reflect/GenericDeclaration;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "getName", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/reflect/Type;)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "setVars", desc: "(Ljava/util/List;)V", flags: 0 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "name", desc: "Ljava/lang/String;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "baseType", desc: "Ljava/lang/reflect/Type;", flags: 2 },
    FieldMeta { owner_internal: "java/lang/reflect/TypeVariableImpl", name: "vars", desc: "[Ljava/lang/reflect/TypeVariableImpl;", flags: 2 },
];

pub static METHODS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL1: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl1", name: "<init>", desc: "([Ljava/lang/reflect/TypeVariableImpl;)V", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl1", name: "getTypeParameters", desc: "()[Ljava/lang/reflect/TypeVariable;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl1", name: "getAnnotation", desc: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl1", name: "getAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
    MethodMeta { owner_internal: "java/lang/reflect/TypeVariableImpl1", name: "getDeclaredAnnotations", desc: "()[Ljava/lang/annotation/Annotation;", flags: 1 },
];
pub static FIELDS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL1: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/lang/reflect/TypeVariableImpl1", name: "vars", desc: "[Ljava/lang/reflect/TypeVariableImpl;", flags: 18 },
];

pub static METHODS_JAVA_MATH_BIGINTEGER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/math/BigInteger", name: "<init>", desc: "(IJ)V", flags: 2 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "valueOf", desc: "(J)Ljava/math/BigInteger;", flags: 9 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "<init>", desc: "(Ljava/lang/String;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "<init>", desc: "(I[B)V", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "signum", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "toString", desc: "(I)Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "toByteArray", desc: "()[B", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "shiftLeft", desc: "(I)Ljava/math/BigInteger;", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "shiftRight", desc: "(I)Ljava/math/BigInteger;", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "and", desc: "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "or", desc: "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "intValueExact", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "intValue", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "shortValue", desc: "()S", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "byteValue", desc: "()B", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "longValue", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "floatValue", desc: "()F", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "doubleValue", desc: "()D", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "bitLength", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "<init>", desc: "(I[I)V", flags: 2 },
    MethodMeta { owner_internal: "java/math/BigInteger", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_MATH_BIGINTEGER: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/math/BigInteger", name: "sign", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/math/BigInteger", name: "value", desc: "[I", flags: 2 },
    FieldMeta { owner_internal: "java/math/BigInteger", name: "ZERO", desc: "Ljava/math/BigInteger;", flags: 25 },
    FieldMeta { owner_internal: "java/math/BigInteger", name: "ONE", desc: "Ljava/math/BigInteger;", flags: 25 },
    FieldMeta { owner_internal: "java/math/BigInteger", name: "TEN", desc: "Ljava/math/BigInteger;", flags: 25 },
];

pub static METHODS_JAVA_UTIL_ABSTRACTCOLLECTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "containsAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "removeAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "size", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/AbstractCollection", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ABSTRACTCOLLECTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ABSTRACTLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/AbstractList", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractList", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractList", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractList", name: "addAll", desc: "(ILjava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractList", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractList", name: "listIterator", desc: "()Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/AbstractList", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ABSTRACTLIST: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/AbstractList", name: "modCount", desc: "I", flags: 4 },
];

pub static METHODS_JAVA_UTIL_ABSTRACTMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/AbstractMap", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ABSTRACTMAP: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ABSTRACTSEQUENTIALLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/AbstractSequentialList", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ABSTRACTSEQUENTIALLIST: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ABSTRACTSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/AbstractSet", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ABSTRACTSET: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ARRAYLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ArrayList", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "<init>", desc: "(Ljava/util/Collection;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "grow", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "shrink", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "resize", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "ensureCapacity", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "add", desc: "(ILjava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "lastIndexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "get", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "set", desc: "(ILjava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "remove", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "listIterator", desc: "(I)Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "listIterator", desc: "()Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "writeObject", desc: "(Ljava/io/ObjectOutputStream;)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/ArrayList", name: "readObject", desc: "(Ljava/io/ObjectInputStream;)V", flags: 2 },
];
pub static FIELDS_JAVA_UTIL_ARRAYLIST: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/ArrayList", name: "MinimumCapacity", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/util/ArrayList", name: "array", desc: "[Ljava/lang/Object;", flags: 2 },
    FieldMeta { owner_internal: "java/util/ArrayList", name: "size", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_UTIL_ARRAYLISTITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "<init>", desc: "(Ljava/util/List;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "<init>", desc: "(Ljava/util/List;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "hasPrevious", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "previous", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArrayListIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ARRAYLISTITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/ArrayListIterator", name: "list", desc: "Ljava/util/List;", flags: 18 },
    FieldMeta { owner_internal: "java/util/ArrayListIterator", name: "toRemove", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/ArrayListIterator", name: "index", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_UTIL_ARRAYS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Arrays", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "toString", desc: "([Ljava/lang/Object;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "toString", desc: "([Z)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "toString", desc: "([B)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "toString", desc: "([S)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "toString", desc: "([I)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "toString", desc: "([J)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "sort", desc: "([Ljava/lang/Object;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "sort", desc: "([Ljava/lang/Object;Ljava/util/Comparator;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "introSort", desc: "([Ljava/lang/Object;Ljava/util/Comparator;III)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "heapSort", desc: "([Ljava/lang/Object;Ljava/util/Comparator;II)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "siftDown", desc: "([Ljava/lang/Object;Ljava/util/Comparator;III)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "insertionSort", desc: "([Ljava/lang/Object;Ljava/util/Comparator;)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "hashCode", desc: "([Ljava/lang/Object;)I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "hashCode", desc: "([B)I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equals", desc: "([Ljava/lang/Object;[Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equals", desc: "([B[B)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equals", desc: "([I[I)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equals", desc: "([J[J)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equals", desc: "([S[S)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "equals", desc: "([C[C)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "deepEquals", desc: "([Ljava/lang/Object;[Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "asList", desc: "([Ljava/lang/Object;)Ljava/util/List;", flags: 137 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "checkRange", desc: "(III)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([II)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([IIII)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([CC)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([CIIC)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([SS)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([SIIS)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([BB)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([BIIB)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([ZZ)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([ZIIZ)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([JJ)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([JIIJ)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([Ljava/lang/Object;Ljava/lang/Object;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "fill", desc: "([Ljava/lang/Object;IILjava/lang/Object;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([ZI)[Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([BI)[B", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([CI)[C", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([II)[I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([JI)[J", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([SI)[S", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([Ljava/lang/Object;I)[Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOf", desc: "([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([ZII)[Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([BII)[B", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([CII)[C", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([III)[I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([JII)[J", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([SII)[S", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([Ljava/lang/Object;II)[Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "copyOfRange", desc: "([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "binarySearch", desc: "([II)I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Arrays", name: "binarySearch", desc: "([IIII)I", flags: 9 },
];
pub static FIELDS_JAVA_UTIL_ARRAYS: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/Arrays", name: "SORT_SIZE_THRESHOLD", desc: "I", flags: 26 },
];

pub static METHODS_JAVA_UTIL_ARRAYSABSTRACTLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "<init>", desc: "([Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "add", desc: "(ILjava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "lastIndexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "get", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "set", desc: "(ILjava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "remove", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysAbstractList", name: "listIterator", desc: "(I)Ljava/util/ListIterator;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ARRAYSABSTRACTLIST: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/ArraysAbstractList", name: "array", desc: "[Ljava/lang/Object;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_ARRAYSCOMPARATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ArraysComparator", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysComparator", name: "compare", desc: "(Ljava/lang/Object;Ljava/lang/Object;)I", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ARRAYSCOMPARATOR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ARRAYSLISTITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "<init>", desc: "([Ljava/lang/Object;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "remove", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "hasPrevious", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "previous", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "nextIndex", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "previousIndex", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "set", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ArraysListIterator", name: "add", desc: "(Ljava/lang/Object;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ARRAYSLISTITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/ArraysListIterator", name: "array", desc: "[Ljava/lang/Object;", flags: 18 },
    FieldMeta { owner_internal: "java/util/ArraysListIterator", name: "currentIndex", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_UTIL_BITSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/BitSet", name: "longPosition", desc: "(I)I", flags: 10 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "bitPosition", desc: "(I)J", flags: 10 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "getTrueMask", desc: "(II)J", flags: 10 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "and", desc: "(Ljava/util/BitSet;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "andNot", desc: "(Ljava/util/BitSet;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "or", desc: "(Ljava/util/BitSet;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "xor", desc: "(Ljava/util/BitSet;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "enlarge", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "get", desc: "(I)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "flip", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "flip", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "set", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "set", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "clear", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "clear", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "intersects", desc: "(Ljava/util/BitSet;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "length", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "nextSetBit", desc: "(I)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "nextBit", desc: "(IZ)I", flags: 2 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "nextClearBit", desc: "(I)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/BitSet", name: "cardinality", desc: "()I", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_BITSET: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/BitSet", name: "BITS_PER_LONG", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/util/BitSet", name: "BITS_PER_LONG_SHIFT", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/util/BitSet", name: "MASK", desc: "J", flags: 24 },
    FieldMeta { owner_internal: "java/util/BitSet", name: "bits", desc: "[J", flags: 2 },
];

pub static METHODS_JAVA_UTIL_COLLECTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Collection", name: "size", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "isEmpty", desc: "()Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "containsAll", desc: "(Ljava/util/Collection;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "removeAll", desc: "(Ljava/util/Collection;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "clear", desc: "()V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Collection", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_COLLECTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_COLLECTIONS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Collections", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/util/Collections", name: "sort", desc: "(Ljava/util/List;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "sort", desc: "(Ljava/util/List;Ljava/util/Comparator;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "introSort", desc: "(Ljava/util/List;Ljava/util/Comparator;III)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Collections", name: "heapSort", desc: "(Ljava/util/List;Ljava/util/Comparator;II)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Collections", name: "siftDown", desc: "(Ljava/util/List;Ljava/util/Comparator;III)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Collections", name: "insertionSort", desc: "(Ljava/util/List;Ljava/util/Comparator;)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/Collections", name: "binarySearch", desc: "(Ljava/util/List;Ljava/lang/Object;)I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "reverse", desc: "(Ljava/util/List;)V", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "emptyList", desc: "()Ljava/util/List;", flags: 25 },
    MethodMeta { owner_internal: "java/util/Collections", name: "emptyMap", desc: "()Ljava/util/Map;", flags: 25 },
    MethodMeta { owner_internal: "java/util/Collections", name: "emptySet", desc: "()Ljava/util/Set;", flags: 25 },
    MethodMeta { owner_internal: "java/util/Collections", name: "enumeration", desc: "(Ljava/util/Collection;)Ljava/util/Enumeration;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "reverseOrder", desc: "(Ljava/util/Comparator;)Ljava/util/Comparator;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "synchronizedMap", desc: "(Ljava/util/Map;)Ljava/util/Map;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "synchronizedSet", desc: "(Ljava/util/Set;)Ljava/util/Set;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "synchronizedList", desc: "(Ljava/util/List;)Ljava/util/List;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "unmodifiableList", desc: "(Ljava/util/List;)Ljava/util/List;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "unmodifiableMap", desc: "(Ljava/util/Map;)Ljava/util/Map;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "unmodifiableCollection", desc: "(Ljava/util/Collection;)Ljava/util/UnmodifiableCollection;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "unmodifiableSet", desc: "(Ljava/util/Set;)Ljava/util/Set;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "singletonList", desc: "(Ljava/lang/Object;)Ljava/util/List;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Collections", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_UTIL_COLLECTIONS: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/Collections", name: "SORT_SIZE_THRESHOLD", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/util/Collections", name: "EMPTY_LIST", desc: "Ljava/util/List;", flags: 25 },
];

pub static METHODS_JAVA_UTIL_COLLECTIONSCOMPARATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/CollectionsComparator", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/CollectionsComparator", name: "compare", desc: "(Ljava/lang/Object;Ljava/lang/Object;)I", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_COLLECTIONSCOMPARATOR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_COMPARATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Comparator", name: "compare", desc: "(Ljava/lang/Object;Ljava/lang/Object;)I", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_COMPARATOR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_DATE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Date", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Date", name: "<init>", desc: "(J)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Date", name: "getTime", desc: "()J", flags: 1 },
    MethodMeta { owner_internal: "java/util/Date", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Date", name: "toString", desc: "(J)Ljava/lang/String;", flags: 266 },
];
pub static FIELDS_JAVA_UTIL_DATE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/Date", name: "when", desc: "J", flags: 17 },
];

pub static METHODS_JAVA_UTIL_DEQUE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Deque", name: "offerFirst", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "push", desc: "(Ljava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "addFirst", desc: "(Ljava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "offerLast", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "addLast", desc: "(Ljava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "peekFirst", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "getFirst", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "peekLast", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "getLast", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "pollFirst", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "removeFirst", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "pop", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "pollLast", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "removeLast", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "descendingIterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "removeLastOccurrence", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Deque", name: "removeFirstOccurrence", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_DEQUE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ENTRY: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Entry", name: "getKey", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Entry", name: "getValue", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Entry", name: "setValue", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_ENTRY: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ENUMSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/EnumSet", name: "<init>", desc: "(ILjava/lang/Class;)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "add", desc: "(Ljava/lang/Enum;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "allOf", desc: "(Ljava/lang/Class;)Ljava/util/EnumSet;", flags: 9 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "noneOf", desc: "(Ljava/lang/Class;)Ljava/util/EnumSet;", flags: 9 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "of", desc: "(Ljava/lang/Enum;[Ljava/lang/Enum;)Ljava/util/EnumSet;", flags: 137 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "complementOf", desc: "(Ljava/util/EnumSet;)Ljava/util/EnumSet;", flags: 9 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "copyOf", desc: "(Ljava/util/EnumSet;)Ljava/util/EnumSet;", flags: 9 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "createEmptyEnumSet", desc: "(Ljava/lang/Class;)Ljava/util/EnumSet;", flags: 10 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "addAllElementsToSet", desc: "(Ljava/lang/Iterable;Ljava/util/EnumSet;)V", flags: 10 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "tryToCast", desc: "(Ljava/lang/Object;)Ljava/lang/Enum;", flags: 2 },
    MethodMeta { owner_internal: "java/util/EnumSet", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 4161 },
];
pub static FIELDS_JAVA_UTIL_ENUMSET: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/EnumSet", name: "bitset", desc: "Ljava/util/BitSet;", flags: 2 },
    FieldMeta { owner_internal: "java/util/EnumSet", name: "elementType", desc: "Ljava/lang/Class;", flags: 2 },
];

pub static METHODS_JAVA_UTIL_ENUMSETITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/EnumSetIterator", name: "<init>", desc: "(Ljava/util/EnumSet;Ljava/lang/Class;Ljava/util/BitSet;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSetIterator", name: "next", desc: "()Ljava/lang/Enum;", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSetIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSetIterator", name: "remove", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/EnumSetIterator", name: "nextIndex", desc: "()I", flags: 2 },
    MethodMeta { owner_internal: "java/util/EnumSetIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 4161 },
];
pub static FIELDS_JAVA_UTIL_ENUMSETITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/EnumSetIterator", name: "enumSet", desc: "Ljava/util/EnumSet;", flags: 18 },
    FieldMeta { owner_internal: "java/util/EnumSetIterator", name: "elementType", desc: "Ljava/lang/Class;", flags: 18 },
    FieldMeta { owner_internal: "java/util/EnumSetIterator", name: "bitset", desc: "Ljava/util/BitSet;", flags: 18 },
    FieldMeta { owner_internal: "java/util/EnumSetIterator", name: "currentIndex", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/EnumSetIterator", name: "removeAllowed", desc: "Z", flags: 2 },
];

pub static METHODS_JAVA_UTIL_ENUMERATION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Enumeration", name: "nextElement", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Enumeration", name: "hasMoreElements", desc: "()Z", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_ENUMERATION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_EVENTLISTENER: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_UTIL_EVENTLISTENER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_EVENTOBJECT: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/EventObject", name: "<init>", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/EventObject", name: "getSource", desc: "()Ljava/lang/Object;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_EVENTOBJECT: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/EventObject", name: "source", desc: "Ljava/lang/Object;", flags: 4 },
];

pub static METHODS_JAVA_UTIL_HASHMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMap", name: "<init>", desc: "(ILjava/util/HashMapHelper;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "getHead", desc: "()Ljava/util/HashMapCell;", flags: 0 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "<init>", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "grow", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "shrink", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "resize", desc: "(I)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "find", desc: "(Ljava/lang/Object;)Ljava/util/HashMapCell;", flags: 4 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "insert", desc: "(Ljava/util/HashMapCell;)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "remove", desc: "(Ljava/util/HashMapCell;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "putCell", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMapCell;", flags: 2 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "containsValue", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "removeCell", desc: "(Ljava/lang/Object;)Ljava/util/HashMapCell;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "put", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "putAll", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "remove", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "entrySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "keySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "values", desc: "()Ljava/util/Collection;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMap", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 0 },
];
pub static FIELDS_JAVA_UTIL_HASHMAP: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/HashMap", name: "MinimumCapacity", desc: "I", flags: 26 },
    FieldMeta { owner_internal: "java/util/HashMap", name: "size", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/HashMap", name: "array", desc: "[Ljava/util/HashMapCell;", flags: 2 },
    FieldMeta { owner_internal: "java/util/HashMap", name: "helper", desc: "Ljava/util/HashMapHelper;", flags: 18 },
    FieldMeta { owner_internal: "java/util/HashMap", name: "head", desc: "Ljava/util/HashMapCell;", flags: 2 },
    FieldMeta { owner_internal: "java/util/HashMap", name: "tail", desc: "Ljava/util/HashMapCell;", flags: 2 },
];

pub static METHODS_JAVA_UTIL_HASHMAPCELL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "next", desc: "()Ljava/util/HashMapCell;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "setNext", desc: "(Ljava/util/HashMapCell;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "getKey", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "getValue", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "before", desc: "()Ljava/util/HashMapCell;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "setBefore", desc: "(Ljava/util/HashMapCell;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "after", desc: "()Ljava/util/HashMapCell;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapCell", name: "setAfter", desc: "(Ljava/util/HashMapCell;)V", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_HASHMAPCELL: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_HASHMAPHELPER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMapHelper", name: "make", desc: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;)Ljava/util/HashMapCell;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapHelper", name: "hash", desc: "(Ljava/lang/Object;)I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/HashMapHelper", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_HASHMAPHELPER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_HASHMAPMYCELL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "<init>", desc: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "getKey", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "getValue", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "setValue", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "next", desc: "()Ljava/util/HashMapCell;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "setNext", desc: "(Ljava/util/HashMapCell;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "hashCode", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "before", desc: "()Ljava/util/HashMapCell;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "setBefore", desc: "(Ljava/util/HashMapCell;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "after", desc: "()Ljava/util/HashMapCell;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyCell", name: "setAfter", desc: "(Ljava/util/HashMapCell;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_HASHMAPMYCELL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/HashMapMyCell", name: "key", desc: "Ljava/lang/Object;", flags: 17 },
    FieldMeta { owner_internal: "java/util/HashMapMyCell", name: "value", desc: "Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/util/HashMapMyCell", name: "next", desc: "Ljava/util/HashMapCell;", flags: 1 },
    FieldMeta { owner_internal: "java/util/HashMapMyCell", name: "hashCode", desc: "I", flags: 1 },
    FieldMeta { owner_internal: "java/util/HashMapMyCell", name: "before", desc: "Ljava/util/HashMapCell;", flags: 1 },
    FieldMeta { owner_internal: "java/util/HashMapMyCell", name: "after", desc: "Ljava/util/HashMapCell;", flags: 1 },
];

pub static METHODS_JAVA_UTIL_HASHMAPMYENTRYMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "<init>", desc: "(Ljava/util/HashMap;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "find", desc: "(Ljava/lang/Object;)Ljava/util/Entry;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "remove", desc: "(Ljava/lang/Object;)Ljava/util/Entry;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_HASHMAPMYENTRYMAP: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/HashMapMyEntryMap", name: "hashMap", desc: "Ljava/util/HashMap;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_HASHMAPMYHELPER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMapMyHelper", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyHelper", name: "make", desc: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;)Ljava/util/HashMapCell;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyHelper", name: "hash", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyHelper", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_HASHMAPMYHELPER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_HASHMAPMYITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashMapMyIterator", name: "<init>", desc: "(Ljava/util/HashMap;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyIterator", name: "next", desc: "()Ljava/util/Entry;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyIterator", name: "remove", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashMapMyIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 4161 },
];
pub static FIELDS_JAVA_UTIL_HASHMAPMYITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/HashMapMyIterator", name: "hashMap", desc: "Ljava/util/HashMap;", flags: 18 },
    FieldMeta { owner_internal: "java/util/HashMapMyIterator", name: "next", desc: "Ljava/util/HashMapCell;", flags: 2 },
];

pub static METHODS_JAVA_UTIL_HASHSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashSet", name: "<init>", desc: "(Ljava/util/Collection;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSet", name: "<clinit>", desc: "()V", flags: 8 },
];
pub static FIELDS_JAVA_UTIL_HASHSET: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/HashSet", name: "Value", desc: "Ljava/lang/Object;", flags: 26 },
    FieldMeta { owner_internal: "java/util/HashSet", name: "map", desc: "Ljava/util/HashMap;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_HASHSETMYITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/HashSetMyIterator", name: "<init>", desc: "(Ljava/util/Iterator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSetMyIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSetMyIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/HashSetMyIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_HASHSETMYITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/HashSetMyIterator", name: "it", desc: "Ljava/util/Iterator;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_HASHTABLE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Hashtable", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "<init>", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "containsValue", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "put", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "putAll", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "remove", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "keys", desc: "()Ljava/util/Enumeration;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "elements", desc: "()Ljava/util/Enumeration;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "entrySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "keySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/Hashtable", name: "values", desc: "()Ljava/util/Collection;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_HASHTABLE: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/Hashtable", name: "map", desc: "Ljava/util/HashMap;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_IDENTITYHASHMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "<init>", desc: "(I)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "containsValue", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "put", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "putAll", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "remove", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "entrySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "keySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMap", name: "values", desc: "()Ljava/util/Collection;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_IDENTITYHASHMAP: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/IdentityHashMap", name: "map", desc: "Ljava/util/HashMap;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_IDENTITYHASHMAPMYHELPER: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/IdentityHashMapMyHelper", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMapMyHelper", name: "hash", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/IdentityHashMapMyHelper", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_IDENTITYHASHMAPMYHELPER: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ILLEGALFORMATEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/IllegalFormatException", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IllegalFormatException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IllegalFormatException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IllegalFormatException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ILLEGALFORMATEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ITERATIONMODIFICATIONEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/IterationModificationException", name: "<init>", desc: "(Ljava/lang/String;Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IterationModificationException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IterationModificationException", name: "<init>", desc: "(Ljava/lang/Throwable;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IterationModificationException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ITERATIONMODIFICATIONEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Iterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Iterator", name: "hasNext", desc: "()Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Iterator", name: "remove", desc: "()V", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_ITERATOR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_ITERATORENUMERATION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/IteratorEnumeration", name: "<init>", desc: "(Ljava/util/Iterator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/IteratorEnumeration", name: "nextElement", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/IteratorEnumeration", name: "hasMoreElements", desc: "()Z", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_ITERATORENUMERATION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/IteratorEnumeration", name: "it", desc: "Ljava/util/Iterator;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_LINKEDLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/LinkedList", name: "<init>", desc: "(Ljava/util/Collection;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "<init>", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "getFront", desc: "()Ljava/util/LinkedListCell;", flags: 0 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "removeCell", desc: "(Ljava/util/LinkedListCell;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "incrementSize", desc: "()V", flags: 0 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "find", desc: "(I)Ljava/util/LinkedListCell;", flags: 2 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "equal", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 10 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "addFirst", desc: "(Ljava/util/LinkedListCell;)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "addLast", desc: "(Ljava/util/LinkedListCell;)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "find", desc: "(Ljava/lang/Object;)Ljava/util/LinkedListCell;", flags: 2 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "remove", desc: "(Ljava/util/LinkedListCell;)V", flags: 2 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "lastIndexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "offer", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "add", desc: "(ILjava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "offerFirst", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "push", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "addFirst", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "offerLast", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "addLast", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "get", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "set", desc: "(ILjava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "peek", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "peekFirst", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "getFirst", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "peekLast", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "getLast", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "remove", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "poll", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "pollFirst", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "removeFirst", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "pop", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "remove", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "pollLast", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "removeLast", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "listIterator", desc: "()Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "listIterator", desc: "(I)Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "descendingIterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "toString", desc: "()Ljava/lang/String;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "element", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "removeFirstOccurrence", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedList", name: "removeLastOccurrence", desc: "(Ljava/lang/Object;)Z", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_LINKEDLIST: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/LinkedList", name: "front", desc: "Ljava/util/LinkedListCell;", flags: 2 },
    FieldMeta { owner_internal: "java/util/LinkedList", name: "rear", desc: "Ljava/util/LinkedListCell;", flags: 2 },
    FieldMeta { owner_internal: "java/util/LinkedList", name: "size", desc: "I", flags: 2 },
];

pub static METHODS_JAVA_UTIL_LINKEDLISTCELL: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/LinkedListCell", name: "<init>", desc: "(Ljava/lang/Object;Ljava/util/LinkedListCell;Ljava/util/LinkedListCell;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_LINKEDLISTCELL: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/LinkedListCell", name: "value", desc: "Ljava/lang/Object;", flags: 1 },
    FieldMeta { owner_internal: "java/util/LinkedListCell", name: "prev", desc: "Ljava/util/LinkedListCell;", flags: 1 },
    FieldMeta { owner_internal: "java/util/LinkedListCell", name: "next", desc: "Ljava/util/LinkedListCell;", flags: 1 },
];

pub static METHODS_JAVA_UTIL_LINKEDLISTDESCENDINGITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/LinkedListDescendingIterator", name: "<init>", desc: "(Ljava/util/ListIterator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListDescendingIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListDescendingIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListDescendingIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_LINKEDLISTDESCENDINGITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/LinkedListDescendingIterator", name: "listIterator", desc: "Ljava/util/ListIterator;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_LINKEDLISTMYITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "<init>", desc: "(Ljava/util/LinkedList;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "previous", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "hasPrevious", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "remove", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "nextIndex", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "previousIndex", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "set", desc: "(Ljava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/LinkedListMyIterator", name: "add", desc: "(Ljava/lang/Object;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_LINKEDLISTMYITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/LinkedListMyIterator", name: "linkedList", desc: "Ljava/util/LinkedList;", flags: 18 },
    FieldMeta { owner_internal: "java/util/LinkedListMyIterator", name: "toRemove", desc: "Ljava/util/LinkedListCell;", flags: 2 },
    FieldMeta { owner_internal: "java/util/LinkedListMyIterator", name: "current", desc: "Ljava/util/LinkedListCell;", flags: 2 },
];

pub static METHODS_JAVA_UTIL_LIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/List", name: "size", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "get", desc: "(I)Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "set", desc: "(ILjava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "remove", desc: "(I)Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "add", desc: "(ILjava/lang/Object;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "addAll", desc: "(ILjava/util/Collection;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "lastIndexOf", desc: "(Ljava/lang/Object;)I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "isEmpty", desc: "()Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "listIterator", desc: "(I)Ljava/util/ListIterator;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/List", name: "listIterator", desc: "()Ljava/util/ListIterator;", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_LIST: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_LISTITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ListIterator", name: "hasPrevious", desc: "()Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/ListIterator", name: "previous", desc: "()Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_LISTITERATOR: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_MAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Map", name: "isEmpty", desc: "()Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "size", desc: "()I", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "containsValue", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "put", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "putAll", desc: "(Ljava/util/Map;)V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "remove", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "clear", desc: "()V", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "entrySet", desc: "()Ljava/util/Set;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "keySet", desc: "()Ljava/util/Set;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "values", desc: "()Ljava/util/Collection;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "equals", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Map", name: "hashCode", desc: "()I", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_MAP: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_MASKINFO: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/MaskInfo", name: "<init>", desc: "(JI)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_MASKINFO: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/MaskInfo", name: "mask", desc: "J", flags: 1 },
    FieldMeta { owner_internal: "java/util/MaskInfo", name: "partitionIndex", desc: "I", flags: 1 },
];

pub static METHODS_JAVA_UTIL_MASKINFOITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "longPosition", desc: "(I)I", flags: 10 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "getTrueMask", desc: "(II)J", flags: 10 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "<init>", desc: "(II)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "next", desc: "()Ljava/util/MaskInfo;", flags: 1 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "remove", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "getLastPartition", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/MaskInfoIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 4161 },
];
pub static FIELDS_JAVA_UTIL_MASKINFOITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "basePartition", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "numPartitionsToTraverse", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "currentPartitionOffset", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "toIndex", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "currentFirstIndex", desc: "I", flags: 2 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "BITS_PER_LONG", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "BITS_PER_LONG_SHIFT", desc: "I", flags: 24 },
    FieldMeta { owner_internal: "java/util/MaskInfoIterator", name: "MASK", desc: "J", flags: 24 },
];

pub static METHODS_JAVA_UTIL_NOSUCHELEMENTEXCEPTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/NoSuchElementException", name: "<init>", desc: "(Ljava/lang/String;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/NoSuchElementException", name: "<init>", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_NOSUCHELEMENTEXCEPTION: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_OBJECTS: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Objects", name: "<init>", desc: "()V", flags: 2 },
    MethodMeta { owner_internal: "java/util/Objects", name: "compare", desc: "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "deepEquals", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "equals", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Z", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "hash", desc: "([Ljava/lang/Object;)I", flags: 137 },
    MethodMeta { owner_internal: "java/util/Objects", name: "hashCode", desc: "(Ljava/lang/Object;)I", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "requireNonNull", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "requireNonNull", desc: "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "toString", desc: "(Ljava/lang/Object;)Ljava/lang/String;", flags: 9 },
    MethodMeta { owner_internal: "java/util/Objects", name: "toString", desc: "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;", flags: 9 },
];
pub static FIELDS_JAVA_UTIL_OBJECTS: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_QUEUE: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Queue", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Queue", name: "element", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Queue", name: "offer", desc: "(Ljava/lang/Object;)Z", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Queue", name: "peek", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Queue", name: "poll", desc: "()Ljava/lang/Object;", flags: 1025 },
    MethodMeta { owner_internal: "java/util/Queue", name: "remove", desc: "()Ljava/lang/Object;", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_QUEUE: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_RANDOMACCESS: &[MethodMeta] = &[
];
pub static FIELDS_JAVA_UTIL_RANDOMACCESS: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_RANDOMACCESSSYNCHRONIZEDLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/RandomAccessSynchronizedList", name: "<init>", desc: "(Ljava/util/List;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_RANDOMACCESSSYNCHRONIZEDLIST: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_REVERSECOMPARATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/ReverseComparator", name: "<init>", desc: "(Ljava/util/Comparator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/ReverseComparator", name: "compare", desc: "(Ljava/lang/Object;Ljava/lang/Object;)I", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_REVERSECOMPARATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/ReverseComparator", name: "cmp", desc: "Ljava/util/Comparator;", flags: 0 },
];

pub static METHODS_JAVA_UTIL_SET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/Set", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1025 },
];
pub static FIELDS_JAVA_UTIL_SET: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_SYNCHRONIZEDCOLLECTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "<init>", desc: "(Ljava/lang/Object;Ljava/util/Collection;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "containsAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedCollection", name: "removeAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_SYNCHRONIZEDCOLLECTION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/SynchronizedCollection", name: "lock", desc: "Ljava/lang/Object;", flags: 20 },
    FieldMeta { owner_internal: "java/util/SynchronizedCollection", name: "collection", desc: "Ljava/util/Collection;", flags: 20 },
];

pub static METHODS_JAVA_UTIL_SYNCHRONIZEDITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/SynchronizedIterator", name: "<init>", desc: "(Ljava/lang/Object;Ljava/util/Iterator;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_SYNCHRONIZEDITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/SynchronizedIterator", name: "lock", desc: "Ljava/lang/Object;", flags: 18 },
    FieldMeta { owner_internal: "java/util/SynchronizedIterator", name: "it", desc: "Ljava/util/Iterator;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_SYNCHRONIZEDLIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "<init>", desc: "(Ljava/util/List;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "get", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "set", desc: "(ILjava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "remove", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "add", desc: "(ILjava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "addAll", desc: "(ILjava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "lastIndexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "listIterator", desc: "(I)Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedList", name: "listIterator", desc: "()Ljava/util/ListIterator;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_SYNCHRONIZEDLIST: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/SynchronizedList", name: "list", desc: "Ljava/util/List;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_SYNCHRONIZEDMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "<init>", desc: "(Ljava/util/Map;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "<init>", desc: "(Ljava/lang/Object;Ljava/util/Map;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "containsValue", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "entrySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "keySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "put", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "putAll", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "remove", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/SynchronizedMap", name: "values", desc: "()Ljava/util/Collection;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_SYNCHRONIZEDMAP: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/SynchronizedMap", name: "lock", desc: "Ljava/lang/Object;", flags: 20 },
    FieldMeta { owner_internal: "java/util/SynchronizedMap", name: "map", desc: "Ljava/util/Map;", flags: 20 },
];

pub static METHODS_JAVA_UTIL_SYNCHRONIZEDSET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/SynchronizedSet", name: "<init>", desc: "(Ljava/lang/Object;Ljava/util/Set;)V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_SYNCHRONIZEDSET: &[FieldMeta] = &[
];

pub static METHODS_JAVA_UTIL_UNMODIFIABLECOLLECTION: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "<init>", desc: "(Ljava/util/Collection;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "containsAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "removeAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableCollection", name: "clear", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_UNMODIFIABLECOLLECTION: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/UnmodifiableCollection", name: "inner", desc: "Ljava/util/Collection;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_UNMODIFIABLEITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/UnmodifiableIterator", name: "<init>", desc: "(Ljava/util/Iterator;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/UnmodifiableIterator", name: "next", desc: "()Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableIterator", name: "hasNext", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableIterator", name: "remove", desc: "()V", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_UNMODIFIABLEITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/UnmodifiableIterator", name: "inner", desc: "Ljava/util/Iterator;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_UNMODIFIABLELIST: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "<init>", desc: "(Ljava/util/List;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "get", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "set", desc: "(ILjava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "remove", desc: "(I)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "remove", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "add", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "add", desc: "(ILjava/lang/Object;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "iterator", desc: "()Ljava/util/Iterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "indexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "lastIndexOf", desc: "(Ljava/lang/Object;)I", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "listIterator", desc: "(I)Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "listIterator", desc: "()Ljava/util/ListIterator;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "contains", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "addAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "toArray", desc: "()[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "toArray", desc: "([Ljava/lang/Object;)[Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "removeAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "addAll", desc: "(ILjava/util/Collection;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableList", name: "containsAll", desc: "(Ljava/util/Collection;)Z", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_UNMODIFIABLELIST: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/UnmodifiableList", name: "inner", desc: "Ljava/util/List;", flags: 2 },
];

pub static METHODS_JAVA_UTIL_UNMODIFIABLELISTITERATOR: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/UnmodifiableListIterator", name: "<init>", desc: "(Ljava/util/ListIterator;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/UnmodifiableListIterator", name: "hasPrevious", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableListIterator", name: "previous", desc: "()Ljava/lang/Object;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_UNMODIFIABLELISTITERATOR: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/UnmodifiableListIterator", name: "innerListIterator", desc: "Ljava/util/ListIterator;", flags: 18 },
];

pub static METHODS_JAVA_UTIL_UNMODIFIABLEMAP: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "<init>", desc: "(Ljava/util/Map;)V", flags: 0 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "clear", desc: "()V", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "containsKey", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "containsValue", desc: "(Ljava/lang/Object;)Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "entrySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "get", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "isEmpty", desc: "()Z", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "keySet", desc: "()Ljava/util/Set;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "put", desc: "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "putAll", desc: "(Ljava/util/Map;)V", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "remove", desc: "(Ljava/lang/Object;)Ljava/lang/Object;", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "size", desc: "()I", flags: 1 },
    MethodMeta { owner_internal: "java/util/UnmodifiableMap", name: "values", desc: "()Ljava/util/Collection;", flags: 1 },
];
pub static FIELDS_JAVA_UTIL_UNMODIFIABLEMAP: &[FieldMeta] = &[
    FieldMeta { owner_internal: "java/util/UnmodifiableMap", name: "inner", desc: "Ljava/util/Map;", flags: 2 },
];

pub static METHODS_JAVA_UTIL_UNMODIFIABLESET: &[MethodMeta] = &[
    MethodMeta { owner_internal: "java/util/UnmodifiableSet", name: "<init>", desc: "(Ljava/util/Set;)V", flags: 0 },
];
pub static FIELDS_JAVA_UTIL_UNMODIFIABLESET: &[FieldMeta] = &[
];

pub static CLASSES: &[ClassMeta] = &[
    ClassMeta {
        internal: "java/base/Addendum",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_ADDENDUM,
        fields:  FIELDS_JAVA_BASE_ADDENDUM,
    },
    ClassMeta {
        internal: "java/base/AnnotationInvocationHandler",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/InvocationHandler"],
        methods: METHODS_JAVA_BASE_ANNOTATIONINVOCATIONHANDLER,
        fields:  FIELDS_JAVA_BASE_ANNOTATIONINVOCATIONHANDLER,
    },
    ClassMeta {
        internal: "java/base/Assembler",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_ASSEMBLER,
        fields:  FIELDS_JAVA_BASE_ASSEMBLER,
    },
    ClassMeta {
        internal: "java/base/Atomic",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_ATOMIC,
        fields:  FIELDS_JAVA_BASE_ATOMIC,
    },
    ClassMeta {
        internal: "java/base/Callable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CALLABLE,
        fields:  FIELDS_JAVA_BASE_CALLABLE,
    },
    ClassMeta {
        internal: "java/base/Callback",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CALLBACK,
        fields:  FIELDS_JAVA_BASE_CALLBACK,
    },
    ClassMeta {
        internal: "java/base/Cell",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CELL,
        fields:  FIELDS_JAVA_BASE_CELL,
    },
    ClassMeta {
        internal: "java/base/ClassAddendum",
        is_interface: false,
        super_internal: Some("java/base/Addendum"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CLASSADDENDUM,
        fields:  FIELDS_JAVA_BASE_CLASSADDENDUM,
    },
    ClassMeta {
        internal: "java/base/ClassPoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_CLASSPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_CLASSPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/Classes",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CLASSES,
        fields:  FIELDS_JAVA_BASE_CLASSES,
    },
    ClassMeta {
        internal: "java/base/Code",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CODE,
        fields:  FIELDS_JAVA_BASE_CODE,
    },
    ClassMeta {
        internal: "java/base/ConstantPool",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_CONSTANTPOOL,
        fields:  FIELDS_JAVA_BASE_CONSTANTPOOL,
    },
    ClassMeta {
        internal: "java/base/Data",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_DATA,
        fields:  FIELDS_JAVA_BASE_DATA,
    },
    ClassMeta {
        internal: "java/base/DataEntryMap",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_DATAENTRYMAP,
        fields:  FIELDS_JAVA_BASE_DATAENTRYMAP,
    },
    ClassMeta {
        internal: "java/base/DataEntrySet",
        is_interface: false,
        super_internal: Some("java/util/AbstractSet"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_DATAENTRYSET,
        fields:  FIELDS_JAVA_BASE_DATAENTRYSET,
    },
    ClassMeta {
        internal: "java/base/DataKeyIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_BASE_DATAKEYITERATOR,
        fields:  FIELDS_JAVA_BASE_DATAKEYITERATOR,
    },
    ClassMeta {
        internal: "java/base/DataKeySet",
        is_interface: false,
        super_internal: Some("java/util/AbstractSet"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_DATAKEYSET,
        fields:  FIELDS_JAVA_BASE_DATAKEYSET,
    },
    ClassMeta {
        internal: "java/base/DataValueIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_BASE_DATAVALUEITERATOR,
        fields:  FIELDS_JAVA_BASE_DATAVALUEITERATOR,
    },
    ClassMeta {
        internal: "java/base/DataValues",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection"],
        methods: METHODS_JAVA_BASE_DATAVALUES,
        fields:  FIELDS_JAVA_BASE_DATAVALUES,
    },
    ClassMeta {
        internal: "java/base/FieldAddendum",
        is_interface: false,
        super_internal: Some("java/base/Addendum"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_FIELDADDENDUM,
        fields:  FIELDS_JAVA_BASE_FIELDADDENDUM,
    },
    ClassMeta {
        internal: "java/base/FieldData",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_FIELDDATA,
        fields:  FIELDS_JAVA_BASE_FIELDDATA,
    },
    ClassMeta {
        internal: "java/base/FieldRefPoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_FIELDREFPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_FIELDREFPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/Function",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_FUNCTION,
        fields:  FIELDS_JAVA_BASE_FUNCTION,
    },
    ClassMeta {
        internal: "java/base/IncompatibleContinuationException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_INCOMPATIBLECONTINUATIONEXCEPTION,
        fields:  FIELDS_JAVA_BASE_INCOMPATIBLECONTINUATIONEXCEPTION,
    },
    ClassMeta {
        internal: "java/base/InnerClassReference",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_INNERCLASSREFERENCE,
        fields:  FIELDS_JAVA_BASE_INNERCLASSREFERENCE,
    },
    ClassMeta {
        internal: "java/base/IntegerPoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_INTEGERPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_INTEGERPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/InterfaceMethodRefPoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_INTERFACEMETHODREFPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_INTERFACEMETHODREFPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/MethodAddendum",
        is_interface: false,
        super_internal: Some("java/base/Addendum"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_METHODADDENDUM,
        fields:  FIELDS_JAVA_BASE_METHODADDENDUM,
    },
    ClassMeta {
        internal: "java/base/MethodData",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_METHODDATA,
        fields:  FIELDS_JAVA_BASE_METHODDATA,
    },
    ClassMeta {
        internal: "java/base/MethodRefPoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_METHODREFPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_METHODREFPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/NameAndTypePoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_NAMEANDTYPEPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_NAMEANDTYPEPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/Pair",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_PAIR,
        fields:  FIELDS_JAVA_BASE_PAIR,
    },
    ClassMeta {
        internal: "java/base/PoolEntry",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_POOLENTRY,
        fields:  FIELDS_JAVA_BASE_POOLENTRY,
    },
    ClassMeta {
        internal: "java/base/Singleton",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_SINGLETON,
        fields:  FIELDS_JAVA_BASE_SINGLETON,
    },
    ClassMeta {
        internal: "java/base/Stream",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_STREAM,
        fields:  FIELDS_JAVA_BASE_STREAM,
    },
    ClassMeta {
        internal: "java/base/StringPoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_STRINGPOOLENTRY,
        fields:  FIELDS_JAVA_BASE_STRINGPOOLENTRY,
    },
    ClassMeta {
        internal: "java/base/SystemClassLoader",
        is_interface: false,
        super_internal: Some("java/lang/ClassLoader"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_SYSTEMCLASSLOADER,
        fields:  FIELDS_JAVA_BASE_SYSTEMCLASSLOADER,
    },
    ClassMeta {
        internal: "java/base/Utf8",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_UTF8,
        fields:  FIELDS_JAVA_BASE_UTF8,
    },
    ClassMeta {
        internal: "java/base/Utf8PoolEntry",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/PoolEntry"],
        methods: METHODS_JAVA_BASE_UTF8POOLENTRY,
        fields:  FIELDS_JAVA_BASE_UTF8POOLENTRY,
    },
    ClassMeta {
        internal: "java/base/VMClass",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_VMCLASS,
        fields:  FIELDS_JAVA_BASE_VMCLASS,
    },
    ClassMeta {
        internal: "java/base/VMField",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_VMFIELD,
        fields:  FIELDS_JAVA_BASE_VMFIELD,
    },
    ClassMeta {
        internal: "java/base/VMMethod",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_BASE_VMMETHOD,
        fields:  FIELDS_JAVA_BASE_VMMETHOD,
    },
    ClassMeta {
        internal: "java/io/ByteArrayInputStream",
        is_interface: false,
        super_internal: Some("java/io/InputStream"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_BYTEARRAYINPUTSTREAM,
        fields:  FIELDS_JAVA_IO_BYTEARRAYINPUTSTREAM,
    },
    ClassMeta {
        internal: "java/io/ByteArrayOutputStream",
        is_interface: false,
        super_internal: Some("java/io/OutputStream"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_BYTEARRAYOUTPUTSTREAM,
        fields:  FIELDS_JAVA_IO_BYTEARRAYOUTPUTSTREAM,
    },
    ClassMeta {
        internal: "java/io/ByteArrayOutputStreamCell",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_BYTEARRAYOUTPUTSTREAMCELL,
        fields:  FIELDS_JAVA_IO_BYTEARRAYOUTPUTSTREAMCELL,
    },
    ClassMeta {
        internal: "java/io/CharToPrimitiveType",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_CHARTOPRIMITIVETYPE,
        fields:  FIELDS_JAVA_IO_CHARTOPRIMITIVETYPE,
    },
    ClassMeta {
        internal: "java/io/Closeable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/AutoCloseable"],
        methods: METHODS_JAVA_IO_CLOSEABLE,
        fields:  FIELDS_JAVA_IO_CLOSEABLE,
    },
    ClassMeta {
        internal: "java/io/EOFException",
        is_interface: false,
        super_internal: Some("java/io/IOException"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_EOFEXCEPTION,
        fields:  FIELDS_JAVA_IO_EOFEXCEPTION,
    },
    ClassMeta {
        internal: "java/io/Flushable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_FLUSHABLE,
        fields:  FIELDS_JAVA_IO_FLUSHABLE,
    },
    ClassMeta {
        internal: "java/io/IOException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_IOEXCEPTION,
        fields:  FIELDS_JAVA_IO_IOEXCEPTION,
    },
    ClassMeta {
        internal: "java/io/InputStream",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Closeable"],
        methods: METHODS_JAVA_IO_INPUTSTREAM,
        fields:  FIELDS_JAVA_IO_INPUTSTREAM,
    },
    ClassMeta {
        internal: "java/io/ObjectInputStream",
        is_interface: false,
        super_internal: Some("java/io/InputStream"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_OBJECTINPUTSTREAM,
        fields:  FIELDS_JAVA_IO_OBJECTINPUTSTREAM,
    },
    ClassMeta {
        internal: "java/io/ObjectInputStreamClassDesc",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_OBJECTINPUTSTREAMCLASSDESC,
        fields:  FIELDS_JAVA_IO_OBJECTINPUTSTREAMCLASSDESC,
    },
    ClassMeta {
        internal: "java/io/ObjectOutputStream",
        is_interface: false,
        super_internal: Some("java/io/OutputStream"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_OBJECTOUTPUTSTREAM,
        fields:  FIELDS_JAVA_IO_OBJECTOUTPUTSTREAM,
    },
    ClassMeta {
        internal: "java/io/OutputStream",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Closeable", "java/io/Flushable"],
        methods: METHODS_JAVA_IO_OUTPUTSTREAM,
        fields:  FIELDS_JAVA_IO_OUTPUTSTREAM,
    },
    ClassMeta {
        internal: "java/io/PrintStream",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_PRINTSTREAM,
        fields:  FIELDS_JAVA_IO_PRINTSTREAM,
    },
    ClassMeta {
        internal: "java/io/Serializable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_SERIALIZABLE,
        fields:  FIELDS_JAVA_IO_SERIALIZABLE,
    },
    ClassMeta {
        internal: "java/io/SystemPrintStream",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/PrintStream"],
        methods: METHODS_JAVA_IO_SYSTEMPRINTSTREAM,
        fields:  FIELDS_JAVA_IO_SYSTEMPRINTSTREAM,
    },
    ClassMeta {
        internal: "java/io/UnsupportedEncodingException",
        is_interface: false,
        super_internal: Some("java/io/IOException"),
        interfaces: &[],
        methods: METHODS_JAVA_IO_UNSUPPORTEDENCODINGEXCEPTION,
        fields:  FIELDS_JAVA_IO_UNSUPPORTEDENCODINGEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/AbstractMethodError",
        is_interface: false,
        super_internal: Some("java/lang/IncompatibleClassChangeError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ABSTRACTMETHODERROR,
        fields:  FIELDS_JAVA_LANG_ABSTRACTMETHODERROR,
    },
    ClassMeta {
        internal: "java/lang/Address",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/bytes/Type"],
        methods: METHODS_JAVA_LANG_ADDRESS,
        fields:  FIELDS_JAVA_LANG_ADDRESS,
    },
    ClassMeta {
        internal: "java/lang/Appendable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_APPENDABLE,
        fields:  FIELDS_JAVA_LANG_APPENDABLE,
    },
    ClassMeta {
        internal: "java/lang/Approval",
        is_interface: false,
        super_internal: Some("java/lang/EventLog"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_APPROVAL,
        fields:  FIELDS_JAVA_LANG_APPROVAL,
    },
    ClassMeta {
        internal: "java/lang/ArithmeticException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ARITHMETICEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ARITHMETICEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/ArrayIndexOutOfBoundsException",
        is_interface: false,
        super_internal: Some("java/lang/IndexOutOfBoundsException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ARRAYINDEXOUTOFBOUNDSEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ARRAYINDEXOUTOFBOUNDSEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/ArrayStoreException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ARRAYSTOREEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ARRAYSTOREEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/AssertionError",
        is_interface: false,
        super_internal: Some("java/lang/Error"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ASSERTIONERROR,
        fields:  FIELDS_JAVA_LANG_ASSERTIONERROR,
    },
    ClassMeta {
        internal: "java/lang/AutoCloseable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_AUTOCLOSEABLE,
        fields:  FIELDS_JAVA_LANG_AUTOCLOSEABLE,
    },
    ClassMeta {
        internal: "java/lang/Bool",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/bytes/Type"],
        methods: METHODS_JAVA_LANG_BOOL,
        fields:  FIELDS_JAVA_LANG_BOOL,
    },
    ClassMeta {
        internal: "java/lang/Boolean",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_BOOLEAN,
        fields:  FIELDS_JAVA_LANG_BOOLEAN,
    },
    ClassMeta {
        internal: "java/lang/Byte",
        is_interface: false,
        super_internal: Some("java/lang/Number"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_BYTE,
        fields:  FIELDS_JAVA_LANG_BYTE,
    },
    ClassMeta {
        internal: "java/lang/Bytes",
        is_interface: false,
        super_internal: Some("java/lang/BytesType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES,
        fields:  FIELDS_JAVA_LANG_BYTES,
    },
    ClassMeta {
        internal: "java/lang/Bytes1",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES1,
        fields:  FIELDS_JAVA_LANG_BYTES1,
    },
    ClassMeta {
        internal: "java/lang/Bytes10",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES10,
        fields:  FIELDS_JAVA_LANG_BYTES10,
    },
    ClassMeta {
        internal: "java/lang/Bytes11",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES11,
        fields:  FIELDS_JAVA_LANG_BYTES11,
    },
    ClassMeta {
        internal: "java/lang/Bytes12",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES12,
        fields:  FIELDS_JAVA_LANG_BYTES12,
    },
    ClassMeta {
        internal: "java/lang/Bytes13",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES13,
        fields:  FIELDS_JAVA_LANG_BYTES13,
    },
    ClassMeta {
        internal: "java/lang/Bytes14",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES14,
        fields:  FIELDS_JAVA_LANG_BYTES14,
    },
    ClassMeta {
        internal: "java/lang/Bytes15",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES15,
        fields:  FIELDS_JAVA_LANG_BYTES15,
    },
    ClassMeta {
        internal: "java/lang/Bytes16",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES16,
        fields:  FIELDS_JAVA_LANG_BYTES16,
    },
    ClassMeta {
        internal: "java/lang/Bytes17",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES17,
        fields:  FIELDS_JAVA_LANG_BYTES17,
    },
    ClassMeta {
        internal: "java/lang/Bytes18",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES18,
        fields:  FIELDS_JAVA_LANG_BYTES18,
    },
    ClassMeta {
        internal: "java/lang/Bytes19",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES19,
        fields:  FIELDS_JAVA_LANG_BYTES19,
    },
    ClassMeta {
        internal: "java/lang/Bytes2",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES2,
        fields:  FIELDS_JAVA_LANG_BYTES2,
    },
    ClassMeta {
        internal: "java/lang/Bytes20",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES20,
        fields:  FIELDS_JAVA_LANG_BYTES20,
    },
    ClassMeta {
        internal: "java/lang/Bytes21",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES21,
        fields:  FIELDS_JAVA_LANG_BYTES21,
    },
    ClassMeta {
        internal: "java/lang/Bytes22",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES22,
        fields:  FIELDS_JAVA_LANG_BYTES22,
    },
    ClassMeta {
        internal: "java/lang/Bytes23",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES23,
        fields:  FIELDS_JAVA_LANG_BYTES23,
    },
    ClassMeta {
        internal: "java/lang/Bytes24",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES24,
        fields:  FIELDS_JAVA_LANG_BYTES24,
    },
    ClassMeta {
        internal: "java/lang/Bytes25",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES25,
        fields:  FIELDS_JAVA_LANG_BYTES25,
    },
    ClassMeta {
        internal: "java/lang/Bytes26",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES26,
        fields:  FIELDS_JAVA_LANG_BYTES26,
    },
    ClassMeta {
        internal: "java/lang/Bytes27",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES27,
        fields:  FIELDS_JAVA_LANG_BYTES27,
    },
    ClassMeta {
        internal: "java/lang/Bytes28",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES28,
        fields:  FIELDS_JAVA_LANG_BYTES28,
    },
    ClassMeta {
        internal: "java/lang/Bytes29",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES29,
        fields:  FIELDS_JAVA_LANG_BYTES29,
    },
    ClassMeta {
        internal: "java/lang/Bytes3",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES3,
        fields:  FIELDS_JAVA_LANG_BYTES3,
    },
    ClassMeta {
        internal: "java/lang/Bytes30",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES30,
        fields:  FIELDS_JAVA_LANG_BYTES30,
    },
    ClassMeta {
        internal: "java/lang/Bytes31",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES31,
        fields:  FIELDS_JAVA_LANG_BYTES31,
    },
    ClassMeta {
        internal: "java/lang/Bytes32",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES32,
        fields:  FIELDS_JAVA_LANG_BYTES32,
    },
    ClassMeta {
        internal: "java/lang/Bytes4",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES4,
        fields:  FIELDS_JAVA_LANG_BYTES4,
    },
    ClassMeta {
        internal: "java/lang/Bytes5",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES5,
        fields:  FIELDS_JAVA_LANG_BYTES5,
    },
    ClassMeta {
        internal: "java/lang/Bytes6",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES6,
        fields:  FIELDS_JAVA_LANG_BYTES6,
    },
    ClassMeta {
        internal: "java/lang/Bytes7",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES7,
        fields:  FIELDS_JAVA_LANG_BYTES7,
    },
    ClassMeta {
        internal: "java/lang/Bytes8",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES8,
        fields:  FIELDS_JAVA_LANG_BYTES8,
    },
    ClassMeta {
        internal: "java/lang/Bytes9",
        is_interface: false,
        super_internal: Some("java/lang/Bytes"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES9,
        fields:  FIELDS_JAVA_LANG_BYTES9,
    },
    ClassMeta {
        internal: "java/lang/BytesType",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/bytes/Type"],
        methods: METHODS_JAVA_LANG_BYTESTYPE,
        fields:  FIELDS_JAVA_LANG_BYTESTYPE,
    },
    ClassMeta {
        internal: "java/lang/Callable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CALLABLE,
        fields:  FIELDS_JAVA_LANG_CALLABLE,
    },
    ClassMeta {
        internal: "java/lang/CharSequence",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CHARSEQUENCE,
        fields:  FIELDS_JAVA_LANG_CHARSEQUENCE,
    },
    ClassMeta {
        internal: "java/lang/Character",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_CHARACTER,
        fields:  FIELDS_JAVA_LANG_CHARACTER,
    },
    ClassMeta {
        internal: "java/lang/Class",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/Type", "java/lang/reflect/AnnotatedElement", "java/lang/reflect/GenericDeclaration"],
        methods: METHODS_JAVA_LANG_CLASS,
        fields:  FIELDS_JAVA_LANG_CLASS,
    },
    ClassMeta {
        internal: "java/lang/ClassCastException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CLASSCASTEXCEPTION,
        fields:  FIELDS_JAVA_LANG_CLASSCASTEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/ClassLoader",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CLASSLOADER,
        fields:  FIELDS_JAVA_LANG_CLASSLOADER,
    },
    ClassMeta {
        internal: "java/lang/ClassNotFoundException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CLASSNOTFOUNDEXCEPTION,
        fields:  FIELDS_JAVA_LANG_CLASSNOTFOUNDEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/ClassType",
        is_interface: false,
        super_internal: Some("java/lang/Enum"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CLASSTYPE,
        fields:  FIELDS_JAVA_LANG_CLASSTYPE,
    },
    ClassMeta {
        internal: "java/lang/CloneNotSupportedException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CLONENOTSUPPORTEDEXCEPTION,
        fields:  FIELDS_JAVA_LANG_CLONENOTSUPPORTEDEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/Cloneable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CLONEABLE,
        fields:  FIELDS_JAVA_LANG_CLONEABLE,
    },
    ClassMeta {
        internal: "java/lang/Comparable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_COMPARABLE,
        fields:  FIELDS_JAVA_LANG_COMPARABLE,
    },
    ClassMeta {
        internal: "java/lang/Context",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTEXT,
        fields:  FIELDS_JAVA_LANG_CONTEXT,
    },
    ClassMeta {
        internal: "java/lang/Deprecated",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_DEPRECATED,
        fields:  FIELDS_JAVA_LANG_DEPRECATED,
    },
    ClassMeta {
        internal: "java/lang/Enum",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_ENUM,
        fields:  FIELDS_JAVA_LANG_ENUM,
    },
    ClassMeta {
        internal: "java/lang/Error",
        is_interface: false,
        super_internal: Some("java/lang/Throwable"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ERROR,
        fields:  FIELDS_JAVA_LANG_ERROR,
    },
    ClassMeta {
        internal: "java/lang/EventLog",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_EVENTLOG,
        fields:  FIELDS_JAVA_LANG_EVENTLOG,
    },
    ClassMeta {
        internal: "java/lang/Exception",
        is_interface: false,
        super_internal: Some("java/lang/Throwable"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_EXCEPTION,
        fields:  FIELDS_JAVA_LANG_EXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/ExceptionInInitializerError",
        is_interface: false,
        super_internal: Some("java/lang/Error"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_EXCEPTIONININITIALIZERERROR,
        fields:  FIELDS_JAVA_LANG_EXCEPTIONININITIALIZERERROR,
    },
    ClassMeta {
        internal: "java/lang/IllegalAccessError",
        is_interface: false,
        super_internal: Some("java/lang/IncompatibleClassChangeError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ILLEGALACCESSERROR,
        fields:  FIELDS_JAVA_LANG_ILLEGALACCESSERROR,
    },
    ClassMeta {
        internal: "java/lang/IllegalAccessException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ILLEGALACCESSEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ILLEGALACCESSEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/IllegalArgumentException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ILLEGALARGUMENTEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ILLEGALARGUMENTEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/IllegalMonitorStateException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ILLEGALMONITORSTATEEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ILLEGALMONITORSTATEEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/IllegalStateException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ILLEGALSTATEEXCEPTION,
        fields:  FIELDS_JAVA_LANG_ILLEGALSTATEEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/IncompatibleClassChangeError",
        is_interface: false,
        super_internal: Some("java/lang/LinkageError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INCOMPATIBLECLASSCHANGEERROR,
        fields:  FIELDS_JAVA_LANG_INCOMPATIBLECLASSCHANGEERROR,
    },
    ClassMeta {
        internal: "java/lang/IndexOutOfBoundsException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INDEXOUTOFBOUNDSEXCEPTION,
        fields:  FIELDS_JAVA_LANG_INDEXOUTOFBOUNDSEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/InstantiationError",
        is_interface: false,
        super_internal: Some("java/lang/IncompatibleClassChangeError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INSTANTIATIONERROR,
        fields:  FIELDS_JAVA_LANG_INSTANTIATIONERROR,
    },
    ClassMeta {
        internal: "java/lang/InstantiationException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INSTANTIATIONEXCEPTION,
        fields:  FIELDS_JAVA_LANG_INSTANTIATIONEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/Int",
        is_interface: false,
        super_internal: Some("java/lang/IntType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT,
        fields:  FIELDS_JAVA_LANG_INT,
    },
    ClassMeta {
        internal: "java/lang/Int104",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT104,
        fields:  FIELDS_JAVA_LANG_INT104,
    },
    ClassMeta {
        internal: "java/lang/Int112",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT112,
        fields:  FIELDS_JAVA_LANG_INT112,
    },
    ClassMeta {
        internal: "java/lang/Int120",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT120,
        fields:  FIELDS_JAVA_LANG_INT120,
    },
    ClassMeta {
        internal: "java/lang/Int128",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT128,
        fields:  FIELDS_JAVA_LANG_INT128,
    },
    ClassMeta {
        internal: "java/lang/Int136",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT136,
        fields:  FIELDS_JAVA_LANG_INT136,
    },
    ClassMeta {
        internal: "java/lang/Int144",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT144,
        fields:  FIELDS_JAVA_LANG_INT144,
    },
    ClassMeta {
        internal: "java/lang/Int152",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT152,
        fields:  FIELDS_JAVA_LANG_INT152,
    },
    ClassMeta {
        internal: "java/lang/Int16",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT16,
        fields:  FIELDS_JAVA_LANG_INT16,
    },
    ClassMeta {
        internal: "java/lang/Int160",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT160,
        fields:  FIELDS_JAVA_LANG_INT160,
    },
    ClassMeta {
        internal: "java/lang/Int168",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT168,
        fields:  FIELDS_JAVA_LANG_INT168,
    },
    ClassMeta {
        internal: "java/lang/Int176",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT176,
        fields:  FIELDS_JAVA_LANG_INT176,
    },
    ClassMeta {
        internal: "java/lang/Int184",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT184,
        fields:  FIELDS_JAVA_LANG_INT184,
    },
    ClassMeta {
        internal: "java/lang/Int192",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT192,
        fields:  FIELDS_JAVA_LANG_INT192,
    },
    ClassMeta {
        internal: "java/lang/Int200",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT200,
        fields:  FIELDS_JAVA_LANG_INT200,
    },
    ClassMeta {
        internal: "java/lang/Int208",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT208,
        fields:  FIELDS_JAVA_LANG_INT208,
    },
    ClassMeta {
        internal: "java/lang/Int216",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT216,
        fields:  FIELDS_JAVA_LANG_INT216,
    },
    ClassMeta {
        internal: "java/lang/Int224",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT224,
        fields:  FIELDS_JAVA_LANG_INT224,
    },
    ClassMeta {
        internal: "java/lang/Int232",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT232,
        fields:  FIELDS_JAVA_LANG_INT232,
    },
    ClassMeta {
        internal: "java/lang/Int24",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT24,
        fields:  FIELDS_JAVA_LANG_INT24,
    },
    ClassMeta {
        internal: "java/lang/Int240",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT240,
        fields:  FIELDS_JAVA_LANG_INT240,
    },
    ClassMeta {
        internal: "java/lang/Int248",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT248,
        fields:  FIELDS_JAVA_LANG_INT248,
    },
    ClassMeta {
        internal: "java/lang/Int256",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT256,
        fields:  FIELDS_JAVA_LANG_INT256,
    },
    ClassMeta {
        internal: "java/lang/Int32",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT32,
        fields:  FIELDS_JAVA_LANG_INT32,
    },
    ClassMeta {
        internal: "java/lang/Int40",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT40,
        fields:  FIELDS_JAVA_LANG_INT40,
    },
    ClassMeta {
        internal: "java/lang/Int48",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT48,
        fields:  FIELDS_JAVA_LANG_INT48,
    },
    ClassMeta {
        internal: "java/lang/Int56",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT56,
        fields:  FIELDS_JAVA_LANG_INT56,
    },
    ClassMeta {
        internal: "java/lang/Int64",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT64,
        fields:  FIELDS_JAVA_LANG_INT64,
    },
    ClassMeta {
        internal: "java/lang/Int72",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT72,
        fields:  FIELDS_JAVA_LANG_INT72,
    },
    ClassMeta {
        internal: "java/lang/Int8",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT8,
        fields:  FIELDS_JAVA_LANG_INT8,
    },
    ClassMeta {
        internal: "java/lang/Int80",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT80,
        fields:  FIELDS_JAVA_LANG_INT80,
    },
    ClassMeta {
        internal: "java/lang/Int88",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT88,
        fields:  FIELDS_JAVA_LANG_INT88,
    },
    ClassMeta {
        internal: "java/lang/Int96",
        is_interface: false,
        super_internal: Some("java/lang/Int"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INT96,
        fields:  FIELDS_JAVA_LANG_INT96,
    },
    ClassMeta {
        internal: "java/lang/IntType",
        is_interface: false,
        super_internal: Some("java/lang/NumericType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INTTYPE,
        fields:  FIELDS_JAVA_LANG_INTTYPE,
    },
    ClassMeta {
        internal: "java/lang/Integer",
        is_interface: false,
        super_internal: Some("java/lang/Number"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_INTEGER,
        fields:  FIELDS_JAVA_LANG_INTEGER,
    },
    ClassMeta {
        internal: "java/lang/InternalError",
        is_interface: false,
        super_internal: Some("java/lang/VirtualMachineError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INTERNALERROR,
        fields:  FIELDS_JAVA_LANG_INTERNALERROR,
    },
    ClassMeta {
        internal: "java/lang/InterruptedException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INTERRUPTEDEXCEPTION,
        fields:  FIELDS_JAVA_LANG_INTERRUPTEDEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/Iterable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ITERABLE,
        fields:  FIELDS_JAVA_LANG_ITERABLE,
    },
    ClassMeta {
        internal: "java/lang/LinkageError",
        is_interface: false,
        super_internal: Some("java/lang/Error"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_LINKAGEERROR,
        fields:  FIELDS_JAVA_LANG_LINKAGEERROR,
    },
    ClassMeta {
        internal: "java/lang/Long",
        is_interface: false,
        super_internal: Some("java/lang/Number"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_LONG,
        fields:  FIELDS_JAVA_LANG_LONG,
    },
    ClassMeta {
        internal: "java/lang/Mapping",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_MAPPING,
        fields:  FIELDS_JAVA_LANG_MAPPING,
    },
    ClassMeta {
        internal: "java/lang/Math",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_MATH,
        fields:  FIELDS_JAVA_LANG_MATH,
    },
    ClassMeta {
        internal: "java/lang/Message",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_MESSAGE,
        fields:  FIELDS_JAVA_LANG_MESSAGE,
    },
    ClassMeta {
        internal: "java/lang/NegativeArraySizeException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NEGATIVEARRAYSIZEEXCEPTION,
        fields:  FIELDS_JAVA_LANG_NEGATIVEARRAYSIZEEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/NoClassDefFoundError",
        is_interface: false,
        super_internal: Some("java/lang/LinkageError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NOCLASSDEFFOUNDERROR,
        fields:  FIELDS_JAVA_LANG_NOCLASSDEFFOUNDERROR,
    },
    ClassMeta {
        internal: "java/lang/NoSuchFieldError",
        is_interface: false,
        super_internal: Some("java/lang/IncompatibleClassChangeError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NOSUCHFIELDERROR,
        fields:  FIELDS_JAVA_LANG_NOSUCHFIELDERROR,
    },
    ClassMeta {
        internal: "java/lang/NoSuchFieldException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NOSUCHFIELDEXCEPTION,
        fields:  FIELDS_JAVA_LANG_NOSUCHFIELDEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/NoSuchMethodError",
        is_interface: false,
        super_internal: Some("java/lang/IncompatibleClassChangeError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NOSUCHMETHODERROR,
        fields:  FIELDS_JAVA_LANG_NOSUCHMETHODERROR,
    },
    ClassMeta {
        internal: "java/lang/NoSuchMethodException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NOSUCHMETHODEXCEPTION,
        fields:  FIELDS_JAVA_LANG_NOSUCHMETHODEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/NullPointerException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NULLPOINTEREXCEPTION,
        fields:  FIELDS_JAVA_LANG_NULLPOINTEREXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/Number",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Serializable"],
        methods: METHODS_JAVA_LANG_NUMBER,
        fields:  FIELDS_JAVA_LANG_NUMBER,
    },
    ClassMeta {
        internal: "java/lang/NumberFormatException",
        is_interface: false,
        super_internal: Some("java/lang/IllegalArgumentException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NUMBERFORMATEXCEPTION,
        fields:  FIELDS_JAVA_LANG_NUMBERFORMATEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/NumericArrays",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_NUMERICARRAYS,
        fields:  FIELDS_JAVA_LANG_NUMERICARRAYS,
    },
    ClassMeta {
        internal: "java/lang/NumericType",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/bytes/Type"],
        methods: METHODS_JAVA_LANG_NUMERICTYPE,
        fields:  FIELDS_JAVA_LANG_NUMERICTYPE,
    },
    ClassMeta {
        internal: "java/lang/Object",
        is_interface: false,
        super_internal: None,
        interfaces: &[],
        methods: METHODS_JAVA_LANG_OBJECT,
        fields:  FIELDS_JAVA_LANG_OBJECT,
    },
    ClassMeta {
        internal: "java/lang/OutOfMemoryError",
        is_interface: false,
        super_internal: Some("java/lang/VirtualMachineError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_OUTOFMEMORYERROR,
        fields:  FIELDS_JAVA_LANG_OUTOFMEMORYERROR,
    },
    ClassMeta {
        internal: "java/lang/Override",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_OVERRIDE,
        fields:  FIELDS_JAVA_LANG_OVERRIDE,
    },
    ClassMeta {
        internal: "java/lang/OwnershipTransferred",
        is_interface: false,
        super_internal: Some("java/lang/EventLog"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_OWNERSHIPTRANSFERRED,
        fields:  FIELDS_JAVA_LANG_OWNERSHIPTRANSFERRED,
    },
    ClassMeta {
        internal: "java/lang/Package",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_PACKAGE,
        fields:  FIELDS_JAVA_LANG_PACKAGE,
    },
    ClassMeta {
        internal: "java/lang/Paused",
        is_interface: false,
        super_internal: Some("java/lang/EventLog"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_PAUSED,
        fields:  FIELDS_JAVA_LANG_PAUSED,
    },
    ClassMeta {
        internal: "java/lang/Readable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_READABLE,
        fields:  FIELDS_JAVA_LANG_READABLE,
    },
    ClassMeta {
        internal: "java/lang/ReflectiveOperationException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECTIVEOPERATIONEXCEPTION,
        fields:  FIELDS_JAVA_LANG_REFLECTIVEOPERATIONEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/RevertException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REVERTEXCEPTION,
        fields:  FIELDS_JAVA_LANG_REVERTEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/Runtime",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_RUNTIME,
        fields:  FIELDS_JAVA_LANG_RUNTIME,
    },
    ClassMeta {
        internal: "java/lang/RuntimeException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_RUNTIMEEXCEPTION,
        fields:  FIELDS_JAVA_LANG_RUNTIMEEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/SecurityException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_SECURITYEXCEPTION,
        fields:  FIELDS_JAVA_LANG_SECURITYEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/SecurityManager",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_SECURITYMANAGER,
        fields:  FIELDS_JAVA_LANG_SECURITYMANAGER,
    },
    ClassMeta {
        internal: "java/lang/Short",
        is_interface: false,
        super_internal: Some("java/lang/Number"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_SHORT,
        fields:  FIELDS_JAVA_LANG_SHORT,
    },
    ClassMeta {
        internal: "java/lang/StackOverflowError",
        is_interface: false,
        super_internal: Some("java/lang/VirtualMachineError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_STACKOVERFLOWERROR,
        fields:  FIELDS_JAVA_LANG_STACKOVERFLOWERROR,
    },
    ClassMeta {
        internal: "java/lang/StackTraceElement",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_STACKTRACEELEMENT,
        fields:  FIELDS_JAVA_LANG_STACKTRACEELEMENT,
    },
    ClassMeta {
        internal: "java/lang/String",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/Comparable", "java/lang/CharSequence", "java/io/Serializable"],
        methods: METHODS_JAVA_LANG_STRING,
        fields:  FIELDS_JAVA_LANG_STRING,
    },
    ClassMeta {
        internal: "java/lang/StringBuffer",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/CharSequence"],
        methods: METHODS_JAVA_LANG_STRINGBUFFER,
        fields:  FIELDS_JAVA_LANG_STRINGBUFFER,
    },
    ClassMeta {
        internal: "java/lang/StringBuilder",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/CharSequence", "java/lang/Appendable"],
        methods: METHODS_JAVA_LANG_STRINGBUILDER,
        fields:  FIELDS_JAVA_LANG_STRINGBUILDER,
    },
    ClassMeta {
        internal: "java/lang/StringBuilderCell",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_STRINGBUILDERCELL,
        fields:  FIELDS_JAVA_LANG_STRINGBUILDERCELL,
    },
    ClassMeta {
        internal: "java/lang/StringComparator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Comparator"],
        methods: METHODS_JAVA_LANG_STRINGCOMPARATOR,
        fields:  FIELDS_JAVA_LANG_STRINGCOMPARATOR,
    },
    ClassMeta {
        internal: "java/lang/StringIndexOutOfBoundsException",
        is_interface: false,
        super_internal: Some("java/lang/IndexOutOfBoundsException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_STRINGINDEXOUTOFBOUNDSEXCEPTION,
        fields:  FIELDS_JAVA_LANG_STRINGINDEXOUTOFBOUNDSEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/StringUtil",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_STRINGUTIL,
        fields:  FIELDS_JAVA_LANG_STRINGUTIL,
    },
    ClassMeta {
        internal: "java/lang/SuppressWarnings",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_SUPPRESSWARNINGS,
        fields:  FIELDS_JAVA_LANG_SUPPRESSWARNINGS,
    },
    ClassMeta {
        internal: "java/lang/System",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_SYSTEM,
        fields:  FIELDS_JAVA_LANG_SYSTEM,
    },
    ClassMeta {
        internal: "java/lang/SystemNanoTime",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_SYSTEMNANOTIME,
        fields:  FIELDS_JAVA_LANG_SYSTEMNANOTIME,
    },
    ClassMeta {
        internal: "java/lang/ThreadDeath",
        is_interface: false,
        super_internal: Some("java/lang/Error"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_THREADDEATH,
        fields:  FIELDS_JAVA_LANG_THREADDEATH,
    },
    ClassMeta {
        internal: "java/lang/Throwable",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Serializable"],
        methods: METHODS_JAVA_LANG_THROWABLE,
        fields:  FIELDS_JAVA_LANG_THROWABLE,
    },
    ClassMeta {
        internal: "java/lang/Transfer",
        is_interface: false,
        super_internal: Some("java/lang/EventLog"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_TRANSFER,
        fields:  FIELDS_JAVA_LANG_TRANSFER,
    },
    ClassMeta {
        internal: "java/lang/TypeNotPresentException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_TYPENOTPRESENTEXCEPTION,
        fields:  FIELDS_JAVA_LANG_TYPENOTPRESENTEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/Uint",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT,
        fields:  FIELDS_JAVA_LANG_UINT,
    },
    ClassMeta {
        internal: "java/lang/Uint128",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT128,
        fields:  FIELDS_JAVA_LANG_UINT128,
    },
    ClassMeta {
        internal: "java/lang/Uint16",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT16,
        fields:  FIELDS_JAVA_LANG_UINT16,
    },
    ClassMeta {
        internal: "java/lang/Uint160",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT160,
        fields:  FIELDS_JAVA_LANG_UINT160,
    },
    ClassMeta {
        internal: "java/lang/Uint256",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT256,
        fields:  FIELDS_JAVA_LANG_UINT256,
    },
    ClassMeta {
        internal: "java/lang/Uint32",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT32,
        fields:  FIELDS_JAVA_LANG_UINT32,
    },
    ClassMeta {
        internal: "java/lang/Uint64",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT64,
        fields:  FIELDS_JAVA_LANG_UINT64,
    },
    ClassMeta {
        internal: "java/lang/Uint8",
        is_interface: false,
        super_internal: Some("java/lang/UintType"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UINT8,
        fields:  FIELDS_JAVA_LANG_UINT8,
    },
    ClassMeta {
        internal: "java/lang/UintType",
        is_interface: false,
        super_internal: Some("java/lang/Number"),
        interfaces: &["java/lang/Comparable"],
        methods: METHODS_JAVA_LANG_UINTTYPE,
        fields:  FIELDS_JAVA_LANG_UINTTYPE,
    },
    ClassMeta {
        internal: "java/lang/Unpaused",
        is_interface: false,
        super_internal: Some("java/lang/EventLog"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UNPAUSED,
        fields:  FIELDS_JAVA_LANG_UNPAUSED,
    },
    ClassMeta {
        internal: "java/lang/UnsatisfiedLinkError",
        is_interface: false,
        super_internal: Some("java/lang/LinkageError"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UNSATISFIEDLINKERROR,
        fields:  FIELDS_JAVA_LANG_UNSATISFIEDLINKERROR,
    },
    ClassMeta {
        internal: "java/lang/UnsupportedOperationException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_UNSUPPORTEDOPERATIONEXCEPTION,
        fields:  FIELDS_JAVA_LANG_UNSUPPORTEDOPERATIONEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/VirtualMachineError",
        is_interface: false,
        super_internal: Some("java/lang/Error"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_VIRTUALMACHINEERROR,
        fields:  FIELDS_JAVA_LANG_VIRTUALMACHINEERROR,
    },
    ClassMeta {
        internal: "java/lang/Void",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_VOID,
        fields:  FIELDS_JAVA_LANG_VOID,
    },
    ClassMeta {
        internal: "java/lang/annotation/Annotation",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ANNOTATION_ANNOTATION,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_ANNOTATION,
    },
    ClassMeta {
        internal: "java/lang/annotation/Constant",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_CONSTANT,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_CONSTANT,
    },
    ClassMeta {
        internal: "java/lang/annotation/ElementType",
        is_interface: false,
        super_internal: Some("java/lang/Enum"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ANNOTATION_ELEMENTTYPE,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_ELEMENTTYPE,
    },
    ClassMeta {
        internal: "java/lang/annotation/External",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_EXTERNAL,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_EXTERNAL,
    },
    ClassMeta {
        internal: "java/lang/annotation/Internal",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_INTERNAL,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_INTERNAL,
    },
    ClassMeta {
        internal: "java/lang/annotation/Payable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_PAYABLE,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_PAYABLE,
    },
    ClassMeta {
        internal: "java/lang/annotation/Pure",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_PURE,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_PURE,
    },
    ClassMeta {
        internal: "java/lang/annotation/Retention",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_RETENTION,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_RETENTION,
    },
    ClassMeta {
        internal: "java/lang/annotation/RetentionPolicy",
        is_interface: false,
        super_internal: Some("java/lang/Enum"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_ANNOTATION_RETENTIONPOLICY,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_RETENTIONPOLICY,
    },
    ClassMeta {
        internal: "java/lang/annotation/Target",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_TARGET,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_TARGET,
    },
    ClassMeta {
        internal: "java/lang/annotation/View",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_VIEW,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_VIEW,
    },
    ClassMeta {
        internal: "java/lang/annotation/Virtual",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/annotation/Annotation"],
        methods: METHODS_JAVA_LANG_ANNOTATION_VIRTUAL,
        fields:  FIELDS_JAVA_LANG_ANNOTATION_VIRTUAL,
    },
    ClassMeta {
        internal: "java/lang/bytes/Division",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES_DIVISION,
        fields:  FIELDS_JAVA_LANG_BYTES_DIVISION,
    },
    ClassMeta {
        internal: "java/lang/bytes/Hex",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES_HEX,
        fields:  FIELDS_JAVA_LANG_BYTES_HEX,
    },
    ClassMeta {
        internal: "java/lang/bytes/Type",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_BYTES_TYPE,
        fields:  FIELDS_JAVA_LANG_BYTES_TYPE,
    },
    ClassMeta {
        internal: "java/lang/contract/Contract",
        is_interface: false,
        super_internal: Some("java/lang/Context"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_CONTRACT,
        fields:  FIELDS_JAVA_LANG_CONTRACT_CONTRACT,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20",
        is_interface: false,
        super_internal: Some("java/lang/contract/Contract"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InsufficientAllowance",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTALLOWANCE,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTALLOWANCE,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InsufficientBalance",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTBALANCE,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INSUFFICIENTBALANCE,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InvalidAmount",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDAMOUNT,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDAMOUNT,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InvalidApprover",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDAPPROVER,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDAPPROVER,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InvalidReceiver",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDRECEIVER,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDRECEIVER,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InvalidSender",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDSENDER,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDSENDER,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20InvalidSpender",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20INVALIDSPENDER,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20INVALIDSPENDER,
    },
    ClassMeta {
        internal: "java/lang/contract/ERC20TokenPaused",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ERC20TOKENPAUSED,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ERC20TOKENPAUSED,
    },
    ClassMeta {
        internal: "java/lang/contract/IERC20",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_IERC20,
        fields:  FIELDS_JAVA_LANG_CONTRACT_IERC20,
    },
    ClassMeta {
        internal: "java/lang/contract/IERC20Errors",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_IERC20ERRORS,
        fields:  FIELDS_JAVA_LANG_CONTRACT_IERC20ERRORS,
    },
    ClassMeta {
        internal: "java/lang/contract/IERC20Metadata",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/contract/IERC20"],
        methods: METHODS_JAVA_LANG_CONTRACT_IERC20METADATA,
        fields:  FIELDS_JAVA_LANG_CONTRACT_IERC20METADATA,
    },
    ClassMeta {
        internal: "java/lang/contract/OnlyOwner",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_CONTRACT_ONLYOWNER,
        fields:  FIELDS_JAVA_LANG_CONTRACT_ONLYOWNER,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodHandle",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INVOKE_METHODHANDLE,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODHANDLE,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodHandles",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INVOKE_METHODHANDLES,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODHANDLES,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodHandlesLookup",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INVOKE_METHODHANDLESLOOKUP,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODHANDLESLOOKUP,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodType",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Serializable"],
        methods: METHODS_JAVA_LANG_INVOKE_METHODTYPE,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODTYPE,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodTypeParameter",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/invoke/MethodTypeTypeSpec"],
        methods: METHODS_JAVA_LANG_INVOKE_METHODTYPEPARAMETER,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODTYPEPARAMETER,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodTypeResult",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/invoke/MethodTypeTypeSpec"],
        methods: METHODS_JAVA_LANG_INVOKE_METHODTYPERESULT,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODTYPERESULT,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodTypeType",
        is_interface: false,
        super_internal: Some("java/lang/Enum"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INVOKE_METHODTYPETYPE,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODTYPETYPE,
    },
    ClassMeta {
        internal: "java/lang/invoke/MethodTypeTypeSpec",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_INVOKE_METHODTYPETYPESPEC,
        fields:  FIELDS_JAVA_LANG_INVOKE_METHODTYPETYPESPEC,
    },
    ClassMeta {
        internal: "java/lang/reflect/AccessibleObject",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/AnnotatedElement"],
        methods: METHODS_JAVA_LANG_REFLECT_ACCESSIBLEOBJECT,
        fields:  FIELDS_JAVA_LANG_REFLECT_ACCESSIBLEOBJECT,
    },
    ClassMeta {
        internal: "java/lang/reflect/AnnotatedElement",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_ANNOTATEDELEMENT,
        fields:  FIELDS_JAVA_LANG_REFLECT_ANNOTATEDELEMENT,
    },
    ClassMeta {
        internal: "java/lang/reflect/Array",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_ARRAY,
        fields:  FIELDS_JAVA_LANG_REFLECT_ARRAY,
    },
    ClassMeta {
        internal: "java/lang/reflect/Constructor",
        is_interface: false,
        super_internal: Some("java/lang/reflect/AccessibleObject"),
        interfaces: &["java/lang/reflect/Member"],
        methods: METHODS_JAVA_LANG_REFLECT_CONSTRUCTOR,
        fields:  FIELDS_JAVA_LANG_REFLECT_CONSTRUCTOR,
    },
    ClassMeta {
        internal: "java/lang/reflect/Field",
        is_interface: false,
        super_internal: Some("java/lang/reflect/AccessibleObject"),
        interfaces: &["java/lang/reflect/Member"],
        methods: METHODS_JAVA_LANG_REFLECT_FIELD,
        fields:  FIELDS_JAVA_LANG_REFLECT_FIELD,
    },
    ClassMeta {
        internal: "java/lang/reflect/GenericDeclaration",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_GENERICDECLARATION,
        fields:  FIELDS_JAVA_LANG_REFLECT_GENERICDECLARATION,
    },
    ClassMeta {
        internal: "java/lang/reflect/InvocationHandler",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_INVOCATIONHANDLER,
        fields:  FIELDS_JAVA_LANG_REFLECT_INVOCATIONHANDLER,
    },
    ClassMeta {
        internal: "java/lang/reflect/InvocationTargetException",
        is_interface: false,
        super_internal: Some("java/lang/Exception"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION,
        fields:  FIELDS_JAVA_LANG_REFLECT_INVOCATIONTARGETEXCEPTION,
    },
    ClassMeta {
        internal: "java/lang/reflect/Member",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_MEMBER,
        fields:  FIELDS_JAVA_LANG_REFLECT_MEMBER,
    },
    ClassMeta {
        internal: "java/lang/reflect/Method",
        is_interface: false,
        super_internal: Some("java/lang/reflect/AccessibleObject"),
        interfaces: &["java/lang/reflect/Member"],
        methods: METHODS_JAVA_LANG_REFLECT_METHOD,
        fields:  FIELDS_JAVA_LANG_REFLECT_METHOD,
    },
    ClassMeta {
        internal: "java/lang/reflect/Modifier",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_MODIFIER,
        fields:  FIELDS_JAVA_LANG_REFLECT_MODIFIER,
    },
    ClassMeta {
        internal: "java/lang/reflect/ParameterizedType",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/Type"],
        methods: METHODS_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE,
        fields:  FIELDS_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE,
    },
    ClassMeta {
        internal: "java/lang/reflect/Proxy",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_PROXY,
        fields:  FIELDS_JAVA_LANG_REFLECT_PROXY,
    },
    ClassMeta {
        internal: "java/lang/reflect/SignatureParser",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_SIGNATUREPARSER,
        fields:  FIELDS_JAVA_LANG_REFLECT_SIGNATUREPARSER,
    },
    ClassMeta {
        internal: "java/lang/reflect/SignatureParserType",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/ParameterizedType"],
        methods: METHODS_JAVA_LANG_REFLECT_SIGNATUREPARSERTYPE,
        fields:  FIELDS_JAVA_LANG_REFLECT_SIGNATUREPARSERTYPE,
    },
    ClassMeta {
        internal: "java/lang/reflect/Type",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_LANG_REFLECT_TYPE,
        fields:  FIELDS_JAVA_LANG_REFLECT_TYPE,
    },
    ClassMeta {
        internal: "java/lang/reflect/TypeVariable",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/Type"],
        methods: METHODS_JAVA_LANG_REFLECT_TYPEVARIABLE,
        fields:  FIELDS_JAVA_LANG_REFLECT_TYPEVARIABLE,
    },
    ClassMeta {
        internal: "java/lang/reflect/TypeVariableImpl",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/TypeVariable"],
        methods: METHODS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL,
        fields:  FIELDS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL,
    },
    ClassMeta {
        internal: "java/lang/reflect/TypeVariableImpl1",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/reflect/GenericDeclaration"],
        methods: METHODS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL1,
        fields:  FIELDS_JAVA_LANG_REFLECT_TYPEVARIABLEIMPL1,
    },
    ClassMeta {
        internal: "java/math/BigInteger",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Serializable"],
        methods: METHODS_JAVA_MATH_BIGINTEGER,
        fields:  FIELDS_JAVA_MATH_BIGINTEGER,
    },
    ClassMeta {
        internal: "java/util/AbstractCollection",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection"],
        methods: METHODS_JAVA_UTIL_ABSTRACTCOLLECTION,
        fields:  FIELDS_JAVA_UTIL_ABSTRACTCOLLECTION,
    },
    ClassMeta {
        internal: "java/util/AbstractList",
        is_interface: false,
        super_internal: Some("java/util/AbstractCollection"),
        interfaces: &["java/util/List"],
        methods: METHODS_JAVA_UTIL_ABSTRACTLIST,
        fields:  FIELDS_JAVA_UTIL_ABSTRACTLIST,
    },
    ClassMeta {
        internal: "java/util/AbstractMap",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Map"],
        methods: METHODS_JAVA_UTIL_ABSTRACTMAP,
        fields:  FIELDS_JAVA_UTIL_ABSTRACTMAP,
    },
    ClassMeta {
        internal: "java/util/AbstractSequentialList",
        is_interface: false,
        super_internal: Some("java/util/AbstractList"),
        interfaces: &["java/util/List"],
        methods: METHODS_JAVA_UTIL_ABSTRACTSEQUENTIALLIST,
        fields:  FIELDS_JAVA_UTIL_ABSTRACTSEQUENTIALLIST,
    },
    ClassMeta {
        internal: "java/util/AbstractSet",
        is_interface: false,
        super_internal: Some("java/util/AbstractCollection"),
        interfaces: &["java/util/Set"],
        methods: METHODS_JAVA_UTIL_ABSTRACTSET,
        fields:  FIELDS_JAVA_UTIL_ABSTRACTSET,
    },
    ClassMeta {
        internal: "java/util/ArrayList",
        is_interface: false,
        super_internal: Some("java/util/AbstractList"),
        interfaces: &["java/io/Serializable", "java/util/RandomAccess"],
        methods: METHODS_JAVA_UTIL_ARRAYLIST,
        fields:  FIELDS_JAVA_UTIL_ARRAYLIST,
    },
    ClassMeta {
        internal: "java/util/ArrayListIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/ListIterator"],
        methods: METHODS_JAVA_UTIL_ARRAYLISTITERATOR,
        fields:  FIELDS_JAVA_UTIL_ARRAYLISTITERATOR,
    },
    ClassMeta {
        internal: "java/util/Arrays",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ARRAYS,
        fields:  FIELDS_JAVA_UTIL_ARRAYS,
    },
    ClassMeta {
        internal: "java/util/ArraysAbstractList",
        is_interface: false,
        super_internal: Some("java/util/AbstractList"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ARRAYSABSTRACTLIST,
        fields:  FIELDS_JAVA_UTIL_ARRAYSABSTRACTLIST,
    },
    ClassMeta {
        internal: "java/util/ArraysComparator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Comparator"],
        methods: METHODS_JAVA_UTIL_ARRAYSCOMPARATOR,
        fields:  FIELDS_JAVA_UTIL_ARRAYSCOMPARATOR,
    },
    ClassMeta {
        internal: "java/util/ArraysListIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/ListIterator"],
        methods: METHODS_JAVA_UTIL_ARRAYSLISTITERATOR,
        fields:  FIELDS_JAVA_UTIL_ARRAYSLISTITERATOR,
    },
    ClassMeta {
        internal: "java/util/BitSet",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/io/Serializable", "java/lang/Cloneable"],
        methods: METHODS_JAVA_UTIL_BITSET,
        fields:  FIELDS_JAVA_UTIL_BITSET,
    },
    ClassMeta {
        internal: "java/util/Collection",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/lang/Iterable"],
        methods: METHODS_JAVA_UTIL_COLLECTION,
        fields:  FIELDS_JAVA_UTIL_COLLECTION,
    },
    ClassMeta {
        internal: "java/util/Collections",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_COLLECTIONS,
        fields:  FIELDS_JAVA_UTIL_COLLECTIONS,
    },
    ClassMeta {
        internal: "java/util/CollectionsComparator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Comparator"],
        methods: METHODS_JAVA_UTIL_COLLECTIONSCOMPARATOR,
        fields:  FIELDS_JAVA_UTIL_COLLECTIONSCOMPARATOR,
    },
    ClassMeta {
        internal: "java/util/Comparator",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_COMPARATOR,
        fields:  FIELDS_JAVA_UTIL_COMPARATOR,
    },
    ClassMeta {
        internal: "java/util/Date",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_DATE,
        fields:  FIELDS_JAVA_UTIL_DATE,
    },
    ClassMeta {
        internal: "java/util/Deque",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Queue"],
        methods: METHODS_JAVA_UTIL_DEQUE,
        fields:  FIELDS_JAVA_UTIL_DEQUE,
    },
    ClassMeta {
        internal: "java/util/Entry",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ENTRY,
        fields:  FIELDS_JAVA_UTIL_ENTRY,
    },
    ClassMeta {
        internal: "java/util/EnumSet",
        is_interface: false,
        super_internal: Some("java/util/AbstractSet"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ENUMSET,
        fields:  FIELDS_JAVA_UTIL_ENUMSET,
    },
    ClassMeta {
        internal: "java/util/EnumSetIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_ENUMSETITERATOR,
        fields:  FIELDS_JAVA_UTIL_ENUMSETITERATOR,
    },
    ClassMeta {
        internal: "java/util/Enumeration",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ENUMERATION,
        fields:  FIELDS_JAVA_UTIL_ENUMERATION,
    },
    ClassMeta {
        internal: "java/util/EventListener",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_EVENTLISTENER,
        fields:  FIELDS_JAVA_UTIL_EVENTLISTENER,
    },
    ClassMeta {
        internal: "java/util/EventObject",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_EVENTOBJECT,
        fields:  FIELDS_JAVA_UTIL_EVENTOBJECT,
    },
    ClassMeta {
        internal: "java/util/HashMap",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Map"],
        methods: METHODS_JAVA_UTIL_HASHMAP,
        fields:  FIELDS_JAVA_UTIL_HASHMAP,
    },
    ClassMeta {
        internal: "java/util/HashMapCell",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Entry"],
        methods: METHODS_JAVA_UTIL_HASHMAPCELL,
        fields:  FIELDS_JAVA_UTIL_HASHMAPCELL,
    },
    ClassMeta {
        internal: "java/util/HashMapHelper",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_HASHMAPHELPER,
        fields:  FIELDS_JAVA_UTIL_HASHMAPHELPER,
    },
    ClassMeta {
        internal: "java/util/HashMapMyCell",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/HashMapCell"],
        methods: METHODS_JAVA_UTIL_HASHMAPMYCELL,
        fields:  FIELDS_JAVA_UTIL_HASHMAPMYCELL,
    },
    ClassMeta {
        internal: "java/util/HashMapMyEntryMap",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/base/DataEntryMap"],
        methods: METHODS_JAVA_UTIL_HASHMAPMYENTRYMAP,
        fields:  FIELDS_JAVA_UTIL_HASHMAPMYENTRYMAP,
    },
    ClassMeta {
        internal: "java/util/HashMapMyHelper",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/HashMapHelper"],
        methods: METHODS_JAVA_UTIL_HASHMAPMYHELPER,
        fields:  FIELDS_JAVA_UTIL_HASHMAPMYHELPER,
    },
    ClassMeta {
        internal: "java/util/HashMapMyIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_HASHMAPMYITERATOR,
        fields:  FIELDS_JAVA_UTIL_HASHMAPMYITERATOR,
    },
    ClassMeta {
        internal: "java/util/HashSet",
        is_interface: false,
        super_internal: Some("java/util/AbstractSet"),
        interfaces: &["java/util/Set"],
        methods: METHODS_JAVA_UTIL_HASHSET,
        fields:  FIELDS_JAVA_UTIL_HASHSET,
    },
    ClassMeta {
        internal: "java/util/HashSetMyIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_HASHSETMYITERATOR,
        fields:  FIELDS_JAVA_UTIL_HASHSETMYITERATOR,
    },
    ClassMeta {
        internal: "java/util/Hashtable",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Map"],
        methods: METHODS_JAVA_UTIL_HASHTABLE,
        fields:  FIELDS_JAVA_UTIL_HASHTABLE,
    },
    ClassMeta {
        internal: "java/util/IdentityHashMap",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Map"],
        methods: METHODS_JAVA_UTIL_IDENTITYHASHMAP,
        fields:  FIELDS_JAVA_UTIL_IDENTITYHASHMAP,
    },
    ClassMeta {
        internal: "java/util/IdentityHashMapMyHelper",
        is_interface: false,
        super_internal: Some("java/util/HashMapMyHelper"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_IDENTITYHASHMAPMYHELPER,
        fields:  FIELDS_JAVA_UTIL_IDENTITYHASHMAPMYHELPER,
    },
    ClassMeta {
        internal: "java/util/IllegalFormatException",
        is_interface: false,
        super_internal: Some("java/lang/IllegalArgumentException"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ILLEGALFORMATEXCEPTION,
        fields:  FIELDS_JAVA_UTIL_ILLEGALFORMATEXCEPTION,
    },
    ClassMeta {
        internal: "java/util/IterationModificationException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ITERATIONMODIFICATIONEXCEPTION,
        fields:  FIELDS_JAVA_UTIL_ITERATIONMODIFICATIONEXCEPTION,
    },
    ClassMeta {
        internal: "java/util/Iterator",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_ITERATOR,
        fields:  FIELDS_JAVA_UTIL_ITERATOR,
    },
    ClassMeta {
        internal: "java/util/IteratorEnumeration",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Enumeration"],
        methods: METHODS_JAVA_UTIL_ITERATORENUMERATION,
        fields:  FIELDS_JAVA_UTIL_ITERATORENUMERATION,
    },
    ClassMeta {
        internal: "java/util/LinkedList",
        is_interface: false,
        super_internal: Some("java/util/AbstractSequentialList"),
        interfaces: &["java/util/Deque"],
        methods: METHODS_JAVA_UTIL_LINKEDLIST,
        fields:  FIELDS_JAVA_UTIL_LINKEDLIST,
    },
    ClassMeta {
        internal: "java/util/LinkedListCell",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_LINKEDLISTCELL,
        fields:  FIELDS_JAVA_UTIL_LINKEDLISTCELL,
    },
    ClassMeta {
        internal: "java/util/LinkedListDescendingIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_LINKEDLISTDESCENDINGITERATOR,
        fields:  FIELDS_JAVA_UTIL_LINKEDLISTDESCENDINGITERATOR,
    },
    ClassMeta {
        internal: "java/util/LinkedListMyIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/ListIterator"],
        methods: METHODS_JAVA_UTIL_LINKEDLISTMYITERATOR,
        fields:  FIELDS_JAVA_UTIL_LINKEDLISTMYITERATOR,
    },
    ClassMeta {
        internal: "java/util/List",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection"],
        methods: METHODS_JAVA_UTIL_LIST,
        fields:  FIELDS_JAVA_UTIL_LIST,
    },
    ClassMeta {
        internal: "java/util/ListIterator",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_LISTITERATOR,
        fields:  FIELDS_JAVA_UTIL_LISTITERATOR,
    },
    ClassMeta {
        internal: "java/util/Map",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_MAP,
        fields:  FIELDS_JAVA_UTIL_MAP,
    },
    ClassMeta {
        internal: "java/util/MaskInfo",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_MASKINFO,
        fields:  FIELDS_JAVA_UTIL_MASKINFO,
    },
    ClassMeta {
        internal: "java/util/MaskInfoIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_MASKINFOITERATOR,
        fields:  FIELDS_JAVA_UTIL_MASKINFOITERATOR,
    },
    ClassMeta {
        internal: "java/util/NoSuchElementException",
        is_interface: false,
        super_internal: Some("java/lang/RuntimeException"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_NOSUCHELEMENTEXCEPTION,
        fields:  FIELDS_JAVA_UTIL_NOSUCHELEMENTEXCEPTION,
    },
    ClassMeta {
        internal: "java/util/Objects",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_OBJECTS,
        fields:  FIELDS_JAVA_UTIL_OBJECTS,
    },
    ClassMeta {
        internal: "java/util/Queue",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection", "java/lang/Iterable"],
        methods: METHODS_JAVA_UTIL_QUEUE,
        fields:  FIELDS_JAVA_UTIL_QUEUE,
    },
    ClassMeta {
        internal: "java/util/RandomAccess",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &[],
        methods: METHODS_JAVA_UTIL_RANDOMACCESS,
        fields:  FIELDS_JAVA_UTIL_RANDOMACCESS,
    },
    ClassMeta {
        internal: "java/util/RandomAccessSynchronizedList",
        is_interface: false,
        super_internal: Some("java/util/SynchronizedList"),
        interfaces: &["java/util/RandomAccess"],
        methods: METHODS_JAVA_UTIL_RANDOMACCESSSYNCHRONIZEDLIST,
        fields:  FIELDS_JAVA_UTIL_RANDOMACCESSSYNCHRONIZEDLIST,
    },
    ClassMeta {
        internal: "java/util/ReverseComparator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Comparator"],
        methods: METHODS_JAVA_UTIL_REVERSECOMPARATOR,
        fields:  FIELDS_JAVA_UTIL_REVERSECOMPARATOR,
    },
    ClassMeta {
        internal: "java/util/Set",
        is_interface: true,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection"],
        methods: METHODS_JAVA_UTIL_SET,
        fields:  FIELDS_JAVA_UTIL_SET,
    },
    ClassMeta {
        internal: "java/util/SynchronizedCollection",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection"],
        methods: METHODS_JAVA_UTIL_SYNCHRONIZEDCOLLECTION,
        fields:  FIELDS_JAVA_UTIL_SYNCHRONIZEDCOLLECTION,
    },
    ClassMeta {
        internal: "java/util/SynchronizedIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_SYNCHRONIZEDITERATOR,
        fields:  FIELDS_JAVA_UTIL_SYNCHRONIZEDITERATOR,
    },
    ClassMeta {
        internal: "java/util/SynchronizedList",
        is_interface: false,
        super_internal: Some("java/util/SynchronizedCollection"),
        interfaces: &["java/util/List"],
        methods: METHODS_JAVA_UTIL_SYNCHRONIZEDLIST,
        fields:  FIELDS_JAVA_UTIL_SYNCHRONIZEDLIST,
    },
    ClassMeta {
        internal: "java/util/SynchronizedMap",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Map"],
        methods: METHODS_JAVA_UTIL_SYNCHRONIZEDMAP,
        fields:  FIELDS_JAVA_UTIL_SYNCHRONIZEDMAP,
    },
    ClassMeta {
        internal: "java/util/SynchronizedSet",
        is_interface: false,
        super_internal: Some("java/util/SynchronizedCollection"),
        interfaces: &["java/util/Set"],
        methods: METHODS_JAVA_UTIL_SYNCHRONIZEDSET,
        fields:  FIELDS_JAVA_UTIL_SYNCHRONIZEDSET,
    },
    ClassMeta {
        internal: "java/util/UnmodifiableCollection",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Collection"],
        methods: METHODS_JAVA_UTIL_UNMODIFIABLECOLLECTION,
        fields:  FIELDS_JAVA_UTIL_UNMODIFIABLECOLLECTION,
    },
    ClassMeta {
        internal: "java/util/UnmodifiableIterator",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Iterator"],
        methods: METHODS_JAVA_UTIL_UNMODIFIABLEITERATOR,
        fields:  FIELDS_JAVA_UTIL_UNMODIFIABLEITERATOR,
    },
    ClassMeta {
        internal: "java/util/UnmodifiableList",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/List"],
        methods: METHODS_JAVA_UTIL_UNMODIFIABLELIST,
        fields:  FIELDS_JAVA_UTIL_UNMODIFIABLELIST,
    },
    ClassMeta {
        internal: "java/util/UnmodifiableListIterator",
        is_interface: false,
        super_internal: Some("java/util/UnmodifiableIterator"),
        interfaces: &["java/util/ListIterator"],
        methods: METHODS_JAVA_UTIL_UNMODIFIABLELISTITERATOR,
        fields:  FIELDS_JAVA_UTIL_UNMODIFIABLELISTITERATOR,
    },
    ClassMeta {
        internal: "java/util/UnmodifiableMap",
        is_interface: false,
        super_internal: Some("java/lang/Object"),
        interfaces: &["java/util/Map"],
        methods: METHODS_JAVA_UTIL_UNMODIFIABLEMAP,
        fields:  FIELDS_JAVA_UTIL_UNMODIFIABLEMAP,
    },
    ClassMeta {
        internal: "java/util/UnmodifiableSet",
        is_interface: false,
        super_internal: Some("java/util/UnmodifiableCollection"),
        interfaces: &["java/util/Set"],
        methods: METHODS_JAVA_UTIL_UNMODIFIABLESET,
        fields:  FIELDS_JAVA_UTIL_UNMODIFIABLESET,
    },
];

pub static CLASSES_BY_NAME: phf::Map<&'static str, usize> = phf_map! {
    "java/base/Addendum" => 0,
    "java/base/AnnotationInvocationHandler" => 1,
    "java/base/Assembler" => 2,
    "java/base/Atomic" => 3,
    "java/base/Callable" => 4,
    "java/base/Callback" => 5,
    "java/base/Cell" => 6,
    "java/base/ClassAddendum" => 7,
    "java/base/ClassPoolEntry" => 8,
    "java/base/Classes" => 9,
    "java/base/Code" => 10,
    "java/base/ConstantPool" => 11,
    "java/base/Data" => 12,
    "java/base/DataEntryMap" => 13,
    "java/base/DataEntrySet" => 14,
    "java/base/DataKeyIterator" => 15,
    "java/base/DataKeySet" => 16,
    "java/base/DataValueIterator" => 17,
    "java/base/DataValues" => 18,
    "java/base/FieldAddendum" => 19,
    "java/base/FieldData" => 20,
    "java/base/FieldRefPoolEntry" => 21,
    "java/base/Function" => 22,
    "java/base/IncompatibleContinuationException" => 23,
    "java/base/InnerClassReference" => 24,
    "java/base/IntegerPoolEntry" => 25,
    "java/base/InterfaceMethodRefPoolEntry" => 26,
    "java/base/MethodAddendum" => 27,
    "java/base/MethodData" => 28,
    "java/base/MethodRefPoolEntry" => 29,
    "java/base/NameAndTypePoolEntry" => 30,
    "java/base/Pair" => 31,
    "java/base/PoolEntry" => 32,
    "java/base/Singleton" => 33,
    "java/base/Stream" => 34,
    "java/base/StringPoolEntry" => 35,
    "java/base/SystemClassLoader" => 36,
    "java/base/Utf8" => 37,
    "java/base/Utf8PoolEntry" => 38,
    "java/base/VMClass" => 39,
    "java/base/VMField" => 40,
    "java/base/VMMethod" => 41,
    "java/io/ByteArrayInputStream" => 42,
    "java/io/ByteArrayOutputStream" => 43,
    "java/io/ByteArrayOutputStreamCell" => 44,
    "java/io/CharToPrimitiveType" => 45,
    "java/io/Closeable" => 46,
    "java/io/EOFException" => 47,
    "java/io/Flushable" => 48,
    "java/io/IOException" => 49,
    "java/io/InputStream" => 50,
    "java/io/ObjectInputStream" => 51,
    "java/io/ObjectInputStreamClassDesc" => 52,
    "java/io/ObjectOutputStream" => 53,
    "java/io/OutputStream" => 54,
    "java/io/PrintStream" => 55,
    "java/io/Serializable" => 56,
    "java/io/SystemPrintStream" => 57,
    "java/io/UnsupportedEncodingException" => 58,
    "java/lang/AbstractMethodError" => 59,
    "java/lang/Address" => 60,
    "java/lang/Appendable" => 61,
    "java/lang/Approval" => 62,
    "java/lang/ArithmeticException" => 63,
    "java/lang/ArrayIndexOutOfBoundsException" => 64,
    "java/lang/ArrayStoreException" => 65,
    "java/lang/AssertionError" => 66,
    "java/lang/AutoCloseable" => 67,
    "java/lang/Bool" => 68,
    "java/lang/Boolean" => 69,
    "java/lang/Byte" => 70,
    "java/lang/Bytes" => 71,
    "java/lang/Bytes1" => 72,
    "java/lang/Bytes10" => 73,
    "java/lang/Bytes11" => 74,
    "java/lang/Bytes12" => 75,
    "java/lang/Bytes13" => 76,
    "java/lang/Bytes14" => 77,
    "java/lang/Bytes15" => 78,
    "java/lang/Bytes16" => 79,
    "java/lang/Bytes17" => 80,
    "java/lang/Bytes18" => 81,
    "java/lang/Bytes19" => 82,
    "java/lang/Bytes2" => 83,
    "java/lang/Bytes20" => 84,
    "java/lang/Bytes21" => 85,
    "java/lang/Bytes22" => 86,
    "java/lang/Bytes23" => 87,
    "java/lang/Bytes24" => 88,
    "java/lang/Bytes25" => 89,
    "java/lang/Bytes26" => 90,
    "java/lang/Bytes27" => 91,
    "java/lang/Bytes28" => 92,
    "java/lang/Bytes29" => 93,
    "java/lang/Bytes3" => 94,
    "java/lang/Bytes30" => 95,
    "java/lang/Bytes31" => 96,
    "java/lang/Bytes32" => 97,
    "java/lang/Bytes4" => 98,
    "java/lang/Bytes5" => 99,
    "java/lang/Bytes6" => 100,
    "java/lang/Bytes7" => 101,
    "java/lang/Bytes8" => 102,
    "java/lang/Bytes9" => 103,
    "java/lang/BytesType" => 104,
    "java/lang/Callable" => 105,
    "java/lang/CharSequence" => 106,
    "java/lang/Character" => 107,
    "java/lang/Class" => 108,
    "java/lang/ClassCastException" => 109,
    "java/lang/ClassLoader" => 110,
    "java/lang/ClassNotFoundException" => 111,
    "java/lang/ClassType" => 112,
    "java/lang/CloneNotSupportedException" => 113,
    "java/lang/Cloneable" => 114,
    "java/lang/Comparable" => 115,
    "java/lang/Context" => 116,
    "java/lang/Deprecated" => 117,
    "java/lang/Enum" => 118,
    "java/lang/Error" => 119,
    "java/lang/EventLog" => 120,
    "java/lang/Exception" => 121,
    "java/lang/ExceptionInInitializerError" => 122,
    "java/lang/IllegalAccessError" => 123,
    "java/lang/IllegalAccessException" => 124,
    "java/lang/IllegalArgumentException" => 125,
    "java/lang/IllegalMonitorStateException" => 126,
    "java/lang/IllegalStateException" => 127,
    "java/lang/IncompatibleClassChangeError" => 128,
    "java/lang/IndexOutOfBoundsException" => 129,
    "java/lang/InstantiationError" => 130,
    "java/lang/InstantiationException" => 131,
    "java/lang/Int" => 132,
    "java/lang/Int104" => 133,
    "java/lang/Int112" => 134,
    "java/lang/Int120" => 135,
    "java/lang/Int128" => 136,
    "java/lang/Int136" => 137,
    "java/lang/Int144" => 138,
    "java/lang/Int152" => 139,
    "java/lang/Int16" => 140,
    "java/lang/Int160" => 141,
    "java/lang/Int168" => 142,
    "java/lang/Int176" => 143,
    "java/lang/Int184" => 144,
    "java/lang/Int192" => 145,
    "java/lang/Int200" => 146,
    "java/lang/Int208" => 147,
    "java/lang/Int216" => 148,
    "java/lang/Int224" => 149,
    "java/lang/Int232" => 150,
    "java/lang/Int24" => 151,
    "java/lang/Int240" => 152,
    "java/lang/Int248" => 153,
    "java/lang/Int256" => 154,
    "java/lang/Int32" => 155,
    "java/lang/Int40" => 156,
    "java/lang/Int48" => 157,
    "java/lang/Int56" => 158,
    "java/lang/Int64" => 159,
    "java/lang/Int72" => 160,
    "java/lang/Int8" => 161,
    "java/lang/Int80" => 162,
    "java/lang/Int88" => 163,
    "java/lang/Int96" => 164,
    "java/lang/IntType" => 165,
    "java/lang/Integer" => 166,
    "java/lang/InternalError" => 167,
    "java/lang/InterruptedException" => 168,
    "java/lang/Iterable" => 169,
    "java/lang/LinkageError" => 170,
    "java/lang/Long" => 171,
    "java/lang/Mapping" => 172,
    "java/lang/Math" => 173,
    "java/lang/Message" => 174,
    "java/lang/NegativeArraySizeException" => 175,
    "java/lang/NoClassDefFoundError" => 176,
    "java/lang/NoSuchFieldError" => 177,
    "java/lang/NoSuchFieldException" => 178,
    "java/lang/NoSuchMethodError" => 179,
    "java/lang/NoSuchMethodException" => 180,
    "java/lang/NullPointerException" => 181,
    "java/lang/Number" => 182,
    "java/lang/NumberFormatException" => 183,
    "java/lang/NumericArrays" => 184,
    "java/lang/NumericType" => 185,
    "java/lang/Object" => 186,
    "java/lang/OutOfMemoryError" => 187,
    "java/lang/Override" => 188,
    "java/lang/OwnershipTransferred" => 189,
    "java/lang/Package" => 190,
    "java/lang/Paused" => 191,
    "java/lang/Readable" => 192,
    "java/lang/ReflectiveOperationException" => 193,
    "java/lang/RevertException" => 194,
    "java/lang/Runtime" => 195,
    "java/lang/RuntimeException" => 196,
    "java/lang/SecurityException" => 197,
    "java/lang/SecurityManager" => 198,
    "java/lang/Short" => 199,
    "java/lang/StackOverflowError" => 200,
    "java/lang/StackTraceElement" => 201,
    "java/lang/String" => 202,
    "java/lang/StringBuffer" => 203,
    "java/lang/StringBuilder" => 204,
    "java/lang/StringBuilderCell" => 205,
    "java/lang/StringComparator" => 206,
    "java/lang/StringIndexOutOfBoundsException" => 207,
    "java/lang/StringUtil" => 208,
    "java/lang/SuppressWarnings" => 209,
    "java/lang/System" => 210,
    "java/lang/SystemNanoTime" => 211,
    "java/lang/ThreadDeath" => 212,
    "java/lang/Throwable" => 213,
    "java/lang/Transfer" => 214,
    "java/lang/TypeNotPresentException" => 215,
    "java/lang/Uint" => 216,
    "java/lang/Uint128" => 217,
    "java/lang/Uint16" => 218,
    "java/lang/Uint160" => 219,
    "java/lang/Uint256" => 220,
    "java/lang/Uint32" => 221,
    "java/lang/Uint64" => 222,
    "java/lang/Uint8" => 223,
    "java/lang/UintType" => 224,
    "java/lang/Unpaused" => 225,
    "java/lang/UnsatisfiedLinkError" => 226,
    "java/lang/UnsupportedOperationException" => 227,
    "java/lang/VirtualMachineError" => 228,
    "java/lang/Void" => 229,
    "java/lang/annotation/Annotation" => 230,
    "java/lang/annotation/Constant" => 231,
    "java/lang/annotation/ElementType" => 232,
    "java/lang/annotation/External" => 233,
    "java/lang/annotation/Internal" => 234,
    "java/lang/annotation/Payable" => 235,
    "java/lang/annotation/Pure" => 236,
    "java/lang/annotation/Retention" => 237,
    "java/lang/annotation/RetentionPolicy" => 238,
    "java/lang/annotation/Target" => 239,
    "java/lang/annotation/View" => 240,
    "java/lang/annotation/Virtual" => 241,
    "java/lang/bytes/Division" => 242,
    "java/lang/bytes/Hex" => 243,
    "java/lang/bytes/Type" => 244,
    "java/lang/contract/Contract" => 245,
    "java/lang/contract/ERC20" => 246,
    "java/lang/contract/ERC20InsufficientAllowance" => 247,
    "java/lang/contract/ERC20InsufficientBalance" => 248,
    "java/lang/contract/ERC20InvalidAmount" => 249,
    "java/lang/contract/ERC20InvalidApprover" => 250,
    "java/lang/contract/ERC20InvalidReceiver" => 251,
    "java/lang/contract/ERC20InvalidSender" => 252,
    "java/lang/contract/ERC20InvalidSpender" => 253,
    "java/lang/contract/ERC20TokenPaused" => 254,
    "java/lang/contract/IERC20" => 255,
    "java/lang/contract/IERC20Errors" => 256,
    "java/lang/contract/IERC20Metadata" => 257,
    "java/lang/contract/OnlyOwner" => 258,
    "java/lang/invoke/MethodHandle" => 259,
    "java/lang/invoke/MethodHandles" => 260,
    "java/lang/invoke/MethodHandlesLookup" => 261,
    "java/lang/invoke/MethodType" => 262,
    "java/lang/invoke/MethodTypeParameter" => 263,
    "java/lang/invoke/MethodTypeResult" => 264,
    "java/lang/invoke/MethodTypeType" => 265,
    "java/lang/invoke/MethodTypeTypeSpec" => 266,
    "java/lang/reflect/AccessibleObject" => 267,
    "java/lang/reflect/AnnotatedElement" => 268,
    "java/lang/reflect/Array" => 269,
    "java/lang/reflect/Constructor" => 270,
    "java/lang/reflect/Field" => 271,
    "java/lang/reflect/GenericDeclaration" => 272,
    "java/lang/reflect/InvocationHandler" => 273,
    "java/lang/reflect/InvocationTargetException" => 274,
    "java/lang/reflect/Member" => 275,
    "java/lang/reflect/Method" => 276,
    "java/lang/reflect/Modifier" => 277,
    "java/lang/reflect/ParameterizedType" => 278,
    "java/lang/reflect/Proxy" => 279,
    "java/lang/reflect/SignatureParser" => 280,
    "java/lang/reflect/SignatureParserType" => 281,
    "java/lang/reflect/Type" => 282,
    "java/lang/reflect/TypeVariable" => 283,
    "java/lang/reflect/TypeVariableImpl" => 284,
    "java/lang/reflect/TypeVariableImpl1" => 285,
    "java/math/BigInteger" => 286,
    "java/util/AbstractCollection" => 287,
    "java/util/AbstractList" => 288,
    "java/util/AbstractMap" => 289,
    "java/util/AbstractSequentialList" => 290,
    "java/util/AbstractSet" => 291,
    "java/util/ArrayList" => 292,
    "java/util/ArrayListIterator" => 293,
    "java/util/Arrays" => 294,
    "java/util/ArraysAbstractList" => 295,
    "java/util/ArraysComparator" => 296,
    "java/util/ArraysListIterator" => 297,
    "java/util/BitSet" => 298,
    "java/util/Collection" => 299,
    "java/util/Collections" => 300,
    "java/util/CollectionsComparator" => 301,
    "java/util/Comparator" => 302,
    "java/util/Date" => 303,
    "java/util/Deque" => 304,
    "java/util/Entry" => 305,
    "java/util/EnumSet" => 306,
    "java/util/EnumSetIterator" => 307,
    "java/util/Enumeration" => 308,
    "java/util/EventListener" => 309,
    "java/util/EventObject" => 310,
    "java/util/HashMap" => 311,
    "java/util/HashMapCell" => 312,
    "java/util/HashMapHelper" => 313,
    "java/util/HashMapMyCell" => 314,
    "java/util/HashMapMyEntryMap" => 315,
    "java/util/HashMapMyHelper" => 316,
    "java/util/HashMapMyIterator" => 317,
    "java/util/HashSet" => 318,
    "java/util/HashSetMyIterator" => 319,
    "java/util/Hashtable" => 320,
    "java/util/IdentityHashMap" => 321,
    "java/util/IdentityHashMapMyHelper" => 322,
    "java/util/IllegalFormatException" => 323,
    "java/util/IterationModificationException" => 324,
    "java/util/Iterator" => 325,
    "java/util/IteratorEnumeration" => 326,
    "java/util/LinkedList" => 327,
    "java/util/LinkedListCell" => 328,
    "java/util/LinkedListDescendingIterator" => 329,
    "java/util/LinkedListMyIterator" => 330,
    "java/util/List" => 331,
    "java/util/ListIterator" => 332,
    "java/util/Map" => 333,
    "java/util/MaskInfo" => 334,
    "java/util/MaskInfoIterator" => 335,
    "java/util/NoSuchElementException" => 336,
    "java/util/Objects" => 337,
    "java/util/Queue" => 338,
    "java/util/RandomAccess" => 339,
    "java/util/RandomAccessSynchronizedList" => 340,
    "java/util/ReverseComparator" => 341,
    "java/util/Set" => 342,
    "java/util/SynchronizedCollection" => 343,
    "java/util/SynchronizedIterator" => 344,
    "java/util/SynchronizedList" => 345,
    "java/util/SynchronizedMap" => 346,
    "java/util/SynchronizedSet" => 347,
    "java/util/UnmodifiableCollection" => 348,
    "java/util/UnmodifiableIterator" => 349,
    "java/util/UnmodifiableList" => 350,
    "java/util/UnmodifiableListIterator" => 351,
    "java/util/UnmodifiableMap" => 352,
    "java/util/UnmodifiableSet" => 353,
};

pub static METHODS_BY_KEY: phf::Map<&'static str, (usize, usize)> = phf_map! {
    "java/base/Addendum#<init>:()V" => (0, 0),
    "java/base/AnnotationInvocationHandler#<init>:([Ljava/lang/Object;)V" => (1, 0),
    "java/base/AnnotationInvocationHandler#invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;" => (1, 1),
    "java/base/Assembler#<init>:()V" => (2, 0),
    "java/base/Assembler#writeClass:(Ljava/io/OutputStream;Ljava/util/List;II[I[Ljava/base/FieldData;[Ljava/base/MethodData;)V" => (2, 1),
    "java/base/Atomic#<init>:()V" => (3, 0),
    "java/base/Atomic#getOffset:(Ljava/lang/reflect/Field;)J" => (3, 1),
    "java/base/Atomic#compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z" => (3, 2),
    "java/base/Callable#call:()Ljava/lang/Object;" => (4, 0),
    "java/base/Callback#handleResult:(Ljava/lang/Object;)V" => (5, 0),
    "java/base/Callback#handleException:(Ljava/lang/Throwable;)V" => (5, 1),
    "java/base/Cell#<init>:(Ljava/lang/Object;Ljava/base/Cell;)V" => (6, 0),
    "java/base/Cell#toString:()Ljava/lang/String;" => (6, 1),
    "java/base/Cell#cons:(Ljava/lang/Object;Ljava/base/Cell;)Ljava/base/Cell;" => (6, 2),
    "java/base/Cell#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (6, 3),
    "java/base/Cell#equal:(Ljava/base/Cell;Ljava/base/Cell;)Z" => (6, 4),
    "java/base/ClassAddendum#<init>:()V" => (7, 0),
    "java/base/ClassPoolEntry#<init>:(I)V" => (8, 0),
    "java/base/ClassPoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (8, 1),
    "java/base/ClassPoolEntry#equals:(Ljava/lang/Object;)Z" => (8, 2),
    "java/base/Classes#<init>:()V" => (9, 0),
    "java/base/Classes#defineVMClass:(Ljava/lang/ClassLoader;[BII)Ljava/base/VMClass;" => (9, 1),
    "java/base/Classes#primitiveClass:(C)Ljava/base/VMClass;" => (9, 2),
    "java/base/Classes#initialize:(Ljava/base/VMClass;)V" => (9, 3),
    "java/base/Classes#isAssignableFrom:(Ljava/base/VMClass;Ljava/base/VMClass;)Z" => (9, 4),
    "java/base/Classes#toVMClass:(Ljava/lang/Class;)Ljava/base/VMClass;" => (9, 5),
    "java/base/Classes#toVMMethod:(Ljava/lang/reflect/Method;)Ljava/base/VMMethod;" => (9, 6),
    "java/base/Classes#resolveVMClass:(Ljava/lang/ClassLoader;[B)Ljava/base/VMClass;" => (9, 7),
    "java/base/Classes#loadVMClass:(Ljava/lang/ClassLoader;[BII)Ljava/base/VMClass;" => (9, 8),
    "java/base/Classes#parseAnnotationValue:(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)Ljava/lang/Object;" => (9, 9),
    "java/base/Classes#parseAnnotation:(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)[Ljava/lang/Object;" => (9, 10),
    "java/base/Classes#parseAnnotationTable:(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)[Ljava/lang/Object;" => (9, 11),
    "java/base/Classes#parseAnnotationTable:(Ljava/lang/ClassLoader;Ljava/base/Addendum;)V" => (9, 12),
    "java/base/Classes#resolveSpec:(Ljava/lang/ClassLoader;[BI)I" => (9, 13),
    "java/base/Classes#declaredMethodCount:(Ljava/base/VMClass;)I" => (9, 14),
    "java/base/Classes#link:(Ljava/base/VMClass;Ljava/lang/ClassLoader;)V" => (9, 15),
    "java/base/Classes#link:(Ljava/base/VMClass;)V" => (9, 16),
    "java/base/Classes#forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;" => (9, 17),
    "java/base/Classes#forCanonicalName:(Ljava/lang/String;)Ljava/lang/Class;" => (9, 18),
    "java/base/Classes#forCanonicalName:(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/Class;" => (9, 19),
    "java/base/Classes#next:(CLjava/lang/String;I)I" => (9, 20),
    "java/base/Classes#getParameterTypes:(Ljava/base/VMMethod;)[Ljava/lang/Class;" => (9, 21),
    "java/base/Classes#findField:(Ljava/base/VMClass;Ljava/lang/String;)I" => (9, 22),
    "java/base/Classes#toString:([B)Ljava/lang/String;" => (9, 23),
    "java/base/Classes#match:(Ljava/base/VMClass;Ljava/base/VMClass;)Z" => (9, 24),
    "java/base/Classes#match:([Ljava/lang/Class;[Ljava/lang/Class;)Z" => (9, 25),
    "java/base/Classes#findMethod:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/base/VMMethod;" => (9, 26),
    "java/base/Classes#findMethod:(Ljava/base/VMClass;Ljava/lang/String;[Ljava/lang/Class;)I" => (9, 27),
    "java/base/Classes#countMethods:(Ljava/base/VMClass;Z)I" => (9, 28),
    "java/base/Classes#getMethods:(Ljava/base/VMClass;Z)[Ljava/lang/reflect/Method;" => (9, 29),
    "java/base/Classes#countFields:(Ljava/base/VMClass;Z)I" => (9, 30),
    "java/base/Classes#getFields:(Ljava/base/VMClass;Z)[Ljava/lang/reflect/Field;" => (9, 31),
    "java/base/Classes#getAnnotation:(Ljava/lang/ClassLoader;[Ljava/lang/Object;)Ljava/lang/annotation/Annotation;" => (9, 32),
    "java/base/Classes#getAnnotationDefaultValue:(Ljava/lang/ClassLoader;Ljava/base/MethodAddendum;)Ljava/lang/Object;" => (9, 33),
    "java/base/Classes#index:(Ljava/base/VMMethod;)I" => (9, 34),
    "java/base/Classes#makeMethod:(Ljava/base/VMMethod;)Ljava/lang/reflect/Method;" => (9, 35),
    "java/base/Classes#makeMethod:(Ljava/lang/Class;I)Ljava/lang/reflect/Method;" => (9, 36),
    "java/base/Classes#makeField:(Ljava/lang/Class;I)Ljava/lang/reflect/Field;" => (9, 37),
    "java/base/Classes#acquireClassLock:()V" => (9, 38),
    "java/base/Classes#releaseClassLock:()V" => (9, 39),
    "java/base/Classes#makeString:([BII)Ljava/lang/String;" => (9, 40),
    "java/base/Code#<init>:()V" => (10, 0),
    "java/base/ConstantPool#<init>:()V" => (11, 0),
    "java/base/ConstantPool#add:(Ljava/util/List;Ljava/base/PoolEntry;)I" => (11, 1),
    "java/base/ConstantPool#addInteger:(Ljava/util/List;I)I" => (11, 2),
    "java/base/ConstantPool#addUtf8:(Ljava/util/List;Ljava/lang/String;)I" => (11, 3),
    "java/base/ConstantPool#addString:(Ljava/util/List;Ljava/lang/String;)I" => (11, 4),
    "java/base/ConstantPool#addClass:(Ljava/util/List;Ljava/lang/String;)I" => (11, 5),
    "java/base/ConstantPool#addNameAndType:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)I" => (11, 6),
    "java/base/ConstantPool#addFieldRef:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I" => (11, 7),
    "java/base/ConstantPool#addMethodRef:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I" => (11, 8),
    "java/base/ConstantPool#addInterfaceMethodRef:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I" => (11, 9),
    "java/base/Data#<init>:()V" => (12, 0),
    "java/base/Data#nextPowerOfTwo:(I)I" => (12, 1),
    "java/base/Data#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (12, 2),
    "java/base/Data#toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;" => (12, 3),
    "java/base/Data#toString:(Ljava/util/Collection;)Ljava/lang/String;" => (12, 4),
    "java/base/Data#toString:(Ljava/util/Map;)Ljava/lang/String;" => (12, 5),
    "java/base/DataEntryMap#size:()I" => (13, 0),
    "java/base/DataEntryMap#find:(Ljava/lang/Object;)Ljava/util/Entry;" => (13, 1),
    "java/base/DataEntryMap#remove:(Ljava/lang/Object;)Ljava/util/Entry;" => (13, 2),
    "java/base/DataEntryMap#clear:()V" => (13, 3),
    "java/base/DataEntryMap#iterator:()Ljava/util/Iterator;" => (13, 4),
    "java/base/DataEntrySet#<init>:(Ljava/base/DataEntryMap;)V" => (14, 0),
    "java/base/DataEntrySet#size:()I" => (14, 1),
    "java/base/DataEntrySet#isEmpty:()Z" => (14, 2),
    "java/base/DataEntrySet#contains:(Ljava/lang/Object;)Z" => (14, 3),
    "java/base/DataEntrySet#add:(Ljava/util/Entry;)Z" => (14, 4),
    "java/base/DataEntrySet#remove:(Ljava/lang/Object;)Z" => (14, 5),
    "java/base/DataEntrySet#remove:(Ljava/util/Entry;)Z" => (14, 6),
    "java/base/DataEntrySet#toArray:()[Ljava/lang/Object;" => (14, 7),
    "java/base/DataEntrySet#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (14, 8),
    "java/base/DataEntrySet#clear:()V" => (14, 9),
    "java/base/DataEntrySet#iterator:()Ljava/util/Iterator;" => (14, 10),
    "java/base/DataEntrySet#add:(Ljava/lang/Object;)Z" => (14, 11),
    "java/base/DataKeyIterator#<init>:(Ljava/util/Iterator;)V" => (15, 0),
    "java/base/DataKeyIterator#next:()Ljava/lang/Object;" => (15, 1),
    "java/base/DataKeyIterator#hasNext:()Z" => (15, 2),
    "java/base/DataKeyIterator#remove:()V" => (15, 3),
    "java/base/DataKeySet#<init>:(Ljava/base/DataEntryMap;)V" => (16, 0),
    "java/base/DataKeySet#size:()I" => (16, 1),
    "java/base/DataKeySet#isEmpty:()Z" => (16, 2),
    "java/base/DataKeySet#contains:(Ljava/lang/Object;)Z" => (16, 3),
    "java/base/DataKeySet#add:(Ljava/lang/Object;)Z" => (16, 4),
    "java/base/DataKeySet#remove:(Ljava/lang/Object;)Z" => (16, 5),
    "java/base/DataKeySet#toArray:()[Ljava/lang/Object;" => (16, 6),
    "java/base/DataKeySet#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (16, 7),
    "java/base/DataKeySet#clear:()V" => (16, 8),
    "java/base/DataKeySet#iterator:()Ljava/util/Iterator;" => (16, 9),
    "java/base/DataValueIterator#<init>:(Ljava/util/Iterator;)V" => (17, 0),
    "java/base/DataValueIterator#next:()Ljava/lang/Object;" => (17, 1),
    "java/base/DataValueIterator#hasNext:()Z" => (17, 2),
    "java/base/DataValueIterator#remove:()V" => (17, 3),
    "java/base/DataValues#<init>:(Ljava/base/DataEntryMap;)V" => (18, 0),
    "java/base/DataValues#size:()I" => (18, 1),
    "java/base/DataValues#isEmpty:()Z" => (18, 2),
    "java/base/DataValues#contains:(Ljava/lang/Object;)Z" => (18, 3),
    "java/base/DataValues#containsAll:(Ljava/util/Collection;)Z" => (18, 4),
    "java/base/DataValues#add:(Ljava/lang/Object;)Z" => (18, 5),
    "java/base/DataValues#addAll:(Ljava/util/Collection;)Z" => (18, 6),
    "java/base/DataValues#remove:(Ljava/lang/Object;)Z" => (18, 7),
    "java/base/DataValues#removeAll:(Ljava/util/Collection;)Z" => (18, 8),
    "java/base/DataValues#retainAll:(Ljava/util/Collection;)Z" => (18, 9),
    "java/base/DataValues#toArray:()[Ljava/lang/Object;" => (18, 10),
    "java/base/DataValues#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (18, 11),
    "java/base/DataValues#clear:()V" => (18, 12),
    "java/base/DataValues#iterator:()Ljava/util/Iterator;" => (18, 13),
    "java/base/FieldAddendum#<init>:()V" => (19, 0),
    "java/base/FieldData#<init>:(III)V" => (20, 0),
    "java/base/FieldRefPoolEntry#<init>:(II)V" => (21, 0),
    "java/base/FieldRefPoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (21, 1),
    "java/base/FieldRefPoolEntry#equals:(Ljava/lang/Object;)Z" => (21, 2),
    "java/base/Function#call:(Ljava/lang/Object;)Ljava/lang/Object;" => (22, 0),
    "java/base/IncompatibleContinuationException#<init>:(Ljava/lang/String;)V" => (23, 0),
    "java/base/IncompatibleContinuationException#<init>:()V" => (23, 1),
    "java/base/InnerClassReference#<init>:()V" => (24, 0),
    "java/base/IntegerPoolEntry#<init>:(I)V" => (25, 0),
    "java/base/IntegerPoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (25, 1),
    "java/base/IntegerPoolEntry#equals:(Ljava/lang/Object;)Z" => (25, 2),
    "java/base/InterfaceMethodRefPoolEntry#<init>:(II)V" => (26, 0),
    "java/base/InterfaceMethodRefPoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (26, 1),
    "java/base/InterfaceMethodRefPoolEntry#equals:(Ljava/lang/Object;)Z" => (26, 2),
    "java/base/MethodAddendum#<init>:()V" => (27, 0),
    "java/base/MethodData#<init>:(III[B)V" => (28, 0),
    "java/base/MethodRefPoolEntry#<init>:(II)V" => (29, 0),
    "java/base/MethodRefPoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (29, 1),
    "java/base/MethodRefPoolEntry#equals:(Ljava/lang/Object;)Z" => (29, 2),
    "java/base/NameAndTypePoolEntry#<init>:(II)V" => (30, 0),
    "java/base/NameAndTypePoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (30, 1),
    "java/base/NameAndTypePoolEntry#equals:(Ljava/lang/Object;)Z" => (30, 2),
    "java/base/Pair#<init>:()V" => (31, 0),
    "java/base/PoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (32, 0),
    "java/base/Singleton#<init>:()V" => (33, 0),
    "java/base/Singleton#getInt:(Ljava/lang/Object;I)I" => (33, 1),
    "java/base/Singleton#getLong:(Ljava/lang/Object;I)J" => (33, 2),
    "java/base/Singleton#getObject:(Ljava/lang/Object;I)Ljava/lang/Object;" => (33, 3),
    "java/base/Stream#<init>:()V" => (34, 0),
    "java/base/Stream#write1:(Ljava/io/OutputStream;I)V" => (34, 1),
    "java/base/Stream#read1:(Ljava/io/InputStream;)I" => (34, 2),
    "java/base/Stream#write2:(Ljava/io/OutputStream;I)V" => (34, 3),
    "java/base/Stream#read2:(Ljava/io/InputStream;)I" => (34, 4),
    "java/base/Stream#write4:(Ljava/io/OutputStream;I)V" => (34, 5),
    "java/base/Stream#read4:(Ljava/io/InputStream;)I" => (34, 6),
    "java/base/Stream#write8:(Ljava/io/OutputStream;J)V" => (34, 7),
    "java/base/Stream#read8:(Ljava/io/InputStream;)J" => (34, 8),
    "java/base/Stream#set4:([BII)V" => (34, 9),
    "java/base/StringPoolEntry#<init>:(I)V" => (35, 0),
    "java/base/StringPoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (35, 1),
    "java/base/StringPoolEntry#equals:(Ljava/lang/Object;)Z" => (35, 2),
    "java/base/SystemClassLoader#<init>:()V" => (36, 0),
    "java/base/SystemClassLoader#appLoader:()Ljava/lang/ClassLoader;" => (36, 1),
    "java/base/SystemClassLoader#findVMClass:(Ljava/lang/String;)Ljava/base/VMClass;" => (36, 2),
    "java/base/SystemClassLoader#findClass:(Ljava/lang/String;)Ljava/lang/Class;" => (36, 3),
    "java/base/SystemClassLoader#getClass:(Ljava/base/VMClass;)Ljava/lang/Class;" => (36, 4),
    "java/base/SystemClassLoader#vmClass:(Ljava/lang/Class;)Ljava/base/VMClass;" => (36, 5),
    "java/base/SystemClassLoader#findLoadedVMClass:(Ljava/lang/String;)Ljava/base/VMClass;" => (36, 6),
    "java/base/SystemClassLoader#reallyFindLoadedClass:(Ljava/lang/String;)Ljava/lang/Class;" => (36, 7),
    "java/base/SystemClassLoader#loadClass:(Ljava/lang/String;Z)Ljava/lang/Class;" => (36, 8),
    "java/base/SystemClassLoader#resourceURLPrefix:(Ljava/lang/String;)Ljava/lang/String;" => (36, 9),
    "java/base/SystemClassLoader#findResource:(Ljava/lang/String;)Ljava/lang/Object;" => (36, 10),
    "java/base/SystemClassLoader#getPackageSource:(Ljava/lang/String;)Ljava/lang/String;" => (36, 11),
    "java/base/SystemClassLoader#getResource:(Ljava/lang/String;)Ljava/lang/Object;" => (36, 12),
    "java/base/SystemClassLoader#getResources:(Ljava/lang/String;)Ljava/util/Enumeration;" => (36, 13),
    "java/base/SystemClassLoader#findResources:(Ljava/lang/String;)Ljava/util/Enumeration;" => (36, 14),
    "java/base/SystemClassLoader#getSystemClassLoader:()Ljava/lang/ClassLoader;" => (36, 15),
    "java/base/Utf8#<init>:()V" => (37, 0),
    "java/base/Utf8#test:(Ljava/lang/Object;)Z" => (37, 1),
    "java/base/Utf8#encode:([CII)[B" => (37, 2),
    "java/base/Utf8#decode:([BII)Ljava/lang/Object;" => (37, 3),
    "java/base/Utf8#decode16:([BII)[C" => (37, 4),
    "java/base/Utf8#cram:(Ljava/lang/Object;II)V" => (37, 5),
    "java/base/Utf8#widen:(Ljava/lang/Object;II)Ljava/lang/Object;" => (37, 6),
    "java/base/Utf8#trim:(Ljava/lang/Object;I)Ljava/lang/Object;" => (37, 7),
    "java/base/Utf8PoolEntry#<init>:(Ljava/lang/String;)V" => (38, 0),
    "java/base/Utf8PoolEntry#writeTo:(Ljava/io/OutputStream;)V" => (38, 1),
    "java/base/Utf8PoolEntry#equals:(Ljava/lang/Object;)Z" => (38, 2),
    "java/base/VMClass#<init>:()V" => (39, 0),
    "java/base/VMField#<init>:()V" => (40, 0),
    "java/base/VMMethod#<init>:()V" => (41, 0),
    "java/base/VMMethod#hasAnnotations:()Z" => (41, 1),
    "java/io/ByteArrayInputStream#<init>:([BII)V" => (42, 0),
    "java/io/ByteArrayInputStream#<init>:([B)V" => (42, 1),
    "java/io/ByteArrayInputStream#read:()I" => (42, 2),
    "java/io/ByteArrayInputStream#read:([BII)I" => (42, 3),
    "java/io/ByteArrayInputStream#available:()I" => (42, 4),
    "java/io/ByteArrayOutputStream#<init>:(I)V" => (43, 0),
    "java/io/ByteArrayOutputStream#<init>:()V" => (43, 1),
    "java/io/ByteArrayOutputStream#reset:()V" => (43, 2),
    "java/io/ByteArrayOutputStream#size:()I" => (43, 3),
    "java/io/ByteArrayOutputStream#write:(I)V" => (43, 4),
    "java/io/ByteArrayOutputStream#copy:([BII)[B" => (43, 5),
    "java/io/ByteArrayOutputStream#write:([BII)V" => (43, 6),
    "java/io/ByteArrayOutputStream#chainCell:(Ljava/io/ByteArrayOutputStreamCell;)V" => (43, 7),
    "java/io/ByteArrayOutputStream#flushBuffer:()V" => (43, 8),
    "java/io/ByteArrayOutputStream#toByteArray:()[B" => (43, 9),
    "java/io/ByteArrayOutputStream#writeTo:(Ljava/io/OutputStream;)V" => (43, 10),
    "java/io/ByteArrayOutputStream#toString:()Ljava/lang/String;" => (43, 11),
    "java/io/ByteArrayOutputStream#toString:(Ljava/lang/String;)Ljava/lang/String;" => (43, 12),
    "java/io/ByteArrayOutputStreamCell#<init>:([BII)V" => (44, 0),
    "java/io/CharToPrimitiveType#<init>:()V" => (45, 0),
    "java/io/CharToPrimitiveType#charToPrimitiveType:(I)Ljava/lang/Class;" => (45, 1),
    "java/io/Closeable#close:()V" => (46, 0),
    "java/io/EOFException#<init>:(Ljava/lang/String;)V" => (47, 0),
    "java/io/EOFException#<init>:()V" => (47, 1),
    "java/io/Flushable#flush:()V" => (48, 0),
    "java/io/IOException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (49, 0),
    "java/io/IOException#<init>:(Ljava/lang/String;)V" => (49, 1),
    "java/io/IOException#<init>:(Ljava/lang/Throwable;)V" => (49, 2),
    "java/io/IOException#<init>:()V" => (49, 3),
    "java/io/InputStream#<init>:()V" => (50, 0),
    "java/io/InputStream#read:()I" => (50, 1),
    "java/io/InputStream#read:([B)I" => (50, 2),
    "java/io/InputStream#read:([BII)I" => (50, 3),
    "java/io/InputStream#skip:(J)J" => (50, 4),
    "java/io/InputStream#available:()I" => (50, 5),
    "java/io/InputStream#mark:(I)V" => (50, 6),
    "java/io/InputStream#reset:()V" => (50, 7),
    "java/io/InputStream#markSupported:()Z" => (50, 8),
    "java/io/InputStream#close:()V" => (50, 9),
    "java/io/ObjectInputStream#<init>:(Ljava/io/InputStream;)V" => (51, 0),
    "java/io/ObjectInputStream#read:()I" => (51, 1),
    "java/io/ObjectInputStream#rawByte:()I" => (51, 2),
    "java/io/ObjectInputStream#rawShort:()I" => (51, 3),
    "java/io/ObjectInputStream#rawInt:()I" => (51, 4),
    "java/io/ObjectInputStream#rawLong:()J" => (51, 5),
    "java/io/ObjectInputStream#rawString:()Ljava/lang/String;" => (51, 6),
    "java/io/ObjectInputStream#read:([BII)I" => (51, 7),
    "java/io/ObjectInputStream#readFully:([B)V" => (51, 8),
    "java/io/ObjectInputStream#readFully:([BII)V" => (51, 9),
    "java/io/ObjectInputStream#readLine:()Ljava/lang/String;" => (51, 10),
    "java/io/ObjectInputStream#close:()V" => (51, 11),
    "java/io/ObjectInputStream#rawBlockDataByte:()I" => (51, 12),
    "java/io/ObjectInputStream#rawBlockDataShort:()I" => (51, 13),
    "java/io/ObjectInputStream#rawBlockDataInt:()I" => (51, 14),
    "java/io/ObjectInputStream#rawBlockDataLong:()J" => (51, 15),
    "java/io/ObjectInputStream#readBoolean:()Z" => (51, 16),
    "java/io/ObjectInputStream#readByte:()B" => (51, 17),
    "java/io/ObjectInputStream#readChar:()C" => (51, 18),
    "java/io/ObjectInputStream#readShort:()S" => (51, 19),
    "java/io/ObjectInputStream#readInt:()I" => (51, 20),
    "java/io/ObjectInputStream#readLong:()J" => (51, 21),
    "java/io/ObjectInputStream#readUnsignedByte:()I" => (51, 22),
    "java/io/ObjectInputStream#readUnsignedShort:()I" => (51, 23),
    "java/io/ObjectInputStream#readUTF:()Ljava/lang/String;" => (51, 24),
    "java/io/ObjectInputStream#skipBytes:(I)I" => (51, 25),
    "java/io/ObjectInputStream#expectToken:(I)V" => (51, 26),
    "java/io/ObjectInputStream#field:(Ljava/lang/reflect/Field;Ljava/lang/Object;)V" => (51, 27),
    "java/io/ObjectInputStream#readObject:()Ljava/lang/Object;" => (51, 28),
    "java/io/ObjectInputStream#classDesc:()Ljava/io/ObjectInputStreamClassDesc;" => (51, 29),
    "java/io/ObjectInputStream#defaultReadObject:()V" => (51, 30),
    "java/io/ObjectInputStream#defaultReadObject:(Ljava/lang/Object;[Ljava/lang/reflect/Field;)V" => (51, 31),
    "java/io/ObjectInputStream#makeInstance:(Ljava/base/VMClass;)Ljava/lang/Object;" => (51, 32),
    "java/io/ObjectInputStreamClassDesc#<init>:()V" => (52, 0),
    "java/io/ObjectOutputStream#<init>:(Ljava/io/OutputStream;)V" => (53, 0),
    "java/io/ObjectOutputStream#write:(I)V" => (53, 1),
    "java/io/ObjectOutputStream#write:([BII)V" => (53, 2),
    "java/io/ObjectOutputStream#flush:()V" => (53, 3),
    "java/io/ObjectOutputStream#close:()V" => (53, 4),
    "java/io/ObjectOutputStream#rawByte:(I)V" => (53, 5),
    "java/io/ObjectOutputStream#rawShort:(I)V" => (53, 6),
    "java/io/ObjectOutputStream#rawInt:(I)V" => (53, 7),
    "java/io/ObjectOutputStream#rawLong:(J)V" => (53, 8),
    "java/io/ObjectOutputStream#blockData:([I)V" => (53, 9),
    "java/io/ObjectOutputStream#blockData:([I[B[C)V" => (53, 10),
    "java/io/ObjectOutputStream#writeBoolean:(Z)V" => (53, 11),
    "java/io/ObjectOutputStream#writeByte:(I)V" => (53, 12),
    "java/io/ObjectOutputStream#writeShort:(I)V" => (53, 13),
    "java/io/ObjectOutputStream#writeChar:(I)V" => (53, 14),
    "java/io/ObjectOutputStream#writeInt:(I)V" => (53, 15),
    "java/io/ObjectOutputStream#writeLong:(J)V" => (53, 16),
    "java/io/ObjectOutputStream#writeBytes:(Ljava/lang/String;)V" => (53, 17),
    "java/io/ObjectOutputStream#writeChars:(Ljava/lang/String;)V" => (53, 18),
    "java/io/ObjectOutputStream#writeUTF:(Ljava/lang/String;)V" => (53, 19),
    "java/io/ObjectOutputStream#string:(Ljava/lang/String;)V" => (53, 20),
    "java/io/ObjectOutputStream#primitiveTypeChar:(Ljava/lang/Class;)C" => (53, 21),
    "java/io/ObjectOutputStream#classDesc:(Ljava/lang/Class;I)V" => (53, 22),
    "java/io/ObjectOutputStream#field:(Ljava/lang/Object;Ljava/lang/reflect/Field;)V" => (53, 23),
    "java/io/ObjectOutputStream#getFields:(Ljava/lang/Class;)[Ljava/lang/reflect/Field;" => (53, 24),
    "java/io/ObjectOutputStream#writeObject:(Ljava/lang/Object;)V" => (53, 25),
    "java/io/ObjectOutputStream#getReadOrWriteMethod:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/reflect/Method;" => (53, 26),
    "java/io/ObjectOutputStream#defaultWriteObject:()V" => (53, 27),
    "java/io/ObjectOutputStream#defaultWriteObject:(Ljava/lang/Object;)V" => (53, 28),
    "java/io/OutputStream#<init>:()V" => (54, 0),
    "java/io/OutputStream#write:(I)V" => (54, 1),
    "java/io/OutputStream#write:([B)V" => (54, 2),
    "java/io/OutputStream#write:([BII)V" => (54, 3),
    "java/io/OutputStream#flush:()V" => (54, 4),
    "java/io/OutputStream#close:()V" => (54, 5),
    "java/io/PrintStream#print:(Ljava/lang/String;)V" => (55, 0),
    "java/io/PrintStream#print:(Ljava/lang/Object;)V" => (55, 1),
    "java/io/PrintStream#print:(Z)V" => (55, 2),
    "java/io/PrintStream#print:(C)V" => (55, 3),
    "java/io/PrintStream#print:(I)V" => (55, 4),
    "java/io/PrintStream#print:(J)V" => (55, 5),
    "java/io/PrintStream#print:([C)V" => (55, 6),
    "java/io/PrintStream#println:()V" => (55, 7),
    "java/io/PrintStream#println:(Ljava/lang/String;)V" => (55, 8),
    "java/io/PrintStream#println:(Ljava/lang/Object;)V" => (55, 9),
    "java/io/PrintStream#println:(Z)V" => (55, 10),
    "java/io/PrintStream#println:(C)V" => (55, 11),
    "java/io/PrintStream#println:(I)V" => (55, 12),
    "java/io/PrintStream#println:(J)V" => (55, 13),
    "java/io/PrintStream#println:([C)V" => (55, 14),
    "java/io/PrintStream#flush:()V" => (55, 15),
    "java/io/SystemPrintStream#<init>:()V" => (57, 0),
    "java/io/SystemPrintStream#print:(Z)V" => (57, 1),
    "java/io/SystemPrintStream#print:(C)V" => (57, 2),
    "java/io/SystemPrintStream#print:(I)V" => (57, 3),
    "java/io/SystemPrintStream#print:(J)V" => (57, 4),
    "java/io/SystemPrintStream#print:([C)V" => (57, 5),
    "java/io/SystemPrintStream#print:(Ljava/lang/String;)V" => (57, 6),
    "java/io/SystemPrintStream#print:(Ljava/lang/Object;)V" => (57, 7),
    "java/io/SystemPrintStream#println:()V" => (57, 8),
    "java/io/SystemPrintStream#println:(Z)V" => (57, 9),
    "java/io/SystemPrintStream#println:(C)V" => (57, 10),
    "java/io/SystemPrintStream#println:(I)V" => (57, 11),
    "java/io/SystemPrintStream#println:(J)V" => (57, 12),
    "java/io/SystemPrintStream#println:([C)V" => (57, 13),
    "java/io/SystemPrintStream#println:(Ljava/lang/String;)V" => (57, 14),
    "java/io/SystemPrintStream#println:(Ljava/lang/Object;)V" => (57, 15),
    "java/io/SystemPrintStream#flush:()V" => (57, 16),
    "java/io/SystemPrintStream#nativePrint:(J)V" => (57, 17),
    "java/io/SystemPrintStream#nativePrint:([C)V" => (57, 18),
    "java/io/SystemPrintStream#nativePrint:(Ljava/lang/Object;)V" => (57, 19),
    "java/io/SystemPrintStream#nativePrint:(Z)V" => (57, 20),
    "java/io/SystemPrintStream#nativePrint:(I)V" => (57, 21),
    "java/io/SystemPrintStream#nativePrint:(Ljava/lang/String;)V" => (57, 22),
    "java/io/UnsupportedEncodingException#<init>:(Ljava/lang/String;)V" => (58, 0),
    "java/io/UnsupportedEncodingException#<init>:()V" => (58, 1),
    "java/lang/AbstractMethodError#<init>:()V" => (59, 0),
    "java/lang/AbstractMethodError#<init>:(Ljava/lang/String;)V" => (59, 1),
    "java/lang/Address#<init>:(Ljava/lang/Uint160;)V" => (60, 0),
    "java/lang/Address#<init>:(Ljava/math/BigInteger;)V" => (60, 1),
    "java/lang/Address#<init>:(ILjava/math/BigInteger;)V" => (60, 2),
    "java/lang/Address#<init>:(Ljava/lang/String;)V" => (60, 3),
    "java/lang/Address#<init>:(ILjava/lang/String;)V" => (60, 4),
    "java/lang/Address#toUint:()Ljava/lang/Uint160;" => (60, 5),
    "java/lang/Address#isZeroAddress:()Z" => (60, 6),
    "java/lang/Address#getTypeAsString:()Ljava/lang/String;" => (60, 7),
    "java/lang/Address#toString:()Ljava/lang/String;" => (60, 8),
    "java/lang/Address#getValue:()Ljava/lang/String;" => (60, 9),
    "java/lang/Address#equals:(Ljava/lang/Object;)Z" => (60, 10),
    "java/lang/Address#hashCode:()I" => (60, 11),
    "java/lang/Address#getValue:()Ljava/lang/Object;" => (60, 12),
    "java/lang/Address#<clinit>:()V" => (60, 13),
    "java/lang/Appendable#append:(C)Ljava/lang/Appendable;" => (61, 0),
    "java/lang/Appendable#append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;" => (61, 1),
    "java/lang/Appendable#append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;" => (61, 2),
    "java/lang/Approval#<init>:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V" => (62, 0),
    "java/lang/ArithmeticException#<init>:(Ljava/lang/String;)V" => (63, 0),
    "java/lang/ArithmeticException#<init>:()V" => (63, 1),
    "java/lang/ArrayIndexOutOfBoundsException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (64, 0),
    "java/lang/ArrayIndexOutOfBoundsException#<init>:(Ljava/lang/String;)V" => (64, 1),
    "java/lang/ArrayIndexOutOfBoundsException#<init>:(Ljava/lang/Throwable;)V" => (64, 2),
    "java/lang/ArrayIndexOutOfBoundsException#<init>:(I)V" => (64, 3),
    "java/lang/ArrayIndexOutOfBoundsException#<init>:()V" => (64, 4),
    "java/lang/ArrayStoreException#<init>:(Ljava/lang/String;)V" => (65, 0),
    "java/lang/ArrayStoreException#<init>:()V" => (65, 1),
    "java/lang/AssertionError#<init>:()V" => (66, 0),
    "java/lang/AssertionError#<init>:(Z)V" => (66, 1),
    "java/lang/AssertionError#<init>:(C)V" => (66, 2),
    "java/lang/AssertionError#<init>:(D)V" => (66, 3),
    "java/lang/AssertionError#<init>:(F)V" => (66, 4),
    "java/lang/AssertionError#<init>:(I)V" => (66, 5),
    "java/lang/AssertionError#<init>:(J)V" => (66, 6),
    "java/lang/AssertionError#<init>:(Ljava/lang/Object;)V" => (66, 7),
    "java/lang/AutoCloseable#close:()V" => (67, 0),
    "java/lang/Bool#<init>:(Z)V" => (68, 0),
    "java/lang/Bool#<init>:(Ljava/lang/Boolean;)V" => (68, 1),
    "java/lang/Bool#getTypeAsString:()Ljava/lang/String;" => (68, 2),
    "java/lang/Bool#getValue:()Ljava/lang/Boolean;" => (68, 3),
    "java/lang/Bool#equals:(Ljava/lang/Object;)Z" => (68, 4),
    "java/lang/Bool#hashCode:()I" => (68, 5),
    "java/lang/Bool#booleanValue:()Z" => (68, 6),
    "java/lang/Bool#toString:()Ljava/lang/String;" => (68, 7),
    "java/lang/Bool#getValue:()Ljava/lang/Object;" => (68, 8),
    "java/lang/Bool#<clinit>:()V" => (68, 9),
    "java/lang/Boolean#<init>:(Z)V" => (69, 0),
    "java/lang/Boolean#<init>:(Ljava/lang/String;)V" => (69, 1),
    "java/lang/Boolean#valueOf:(Z)Ljava/lang/Boolean;" => (69, 2),
    "java/lang/Boolean#valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;" => (69, 3),
    "java/lang/Boolean#compareTo:(Ljava/lang/Boolean;)I" => (69, 4),
    "java/lang/Boolean#equals:(Ljava/lang/Object;)Z" => (69, 5),
    "java/lang/Boolean#hashCode:()I" => (69, 6),
    "java/lang/Boolean#toString:()Ljava/lang/String;" => (69, 7),
    "java/lang/Boolean#toString:(Z)Ljava/lang/String;" => (69, 8),
    "java/lang/Boolean#booleanValue:()Z" => (69, 9),
    "java/lang/Boolean#getBoolean:(Ljava/lang/String;)Z" => (69, 10),
    "java/lang/Boolean#parseBoolean:(Ljava/lang/String;)Z" => (69, 11),
    "java/lang/Boolean#compareTo:(Ljava/lang/Object;)I" => (69, 12),
    "java/lang/Boolean#<clinit>:()V" => (69, 13),
    "java/lang/Byte#<init>:(B)V" => (70, 0),
    "java/lang/Byte#valueOf:(B)Ljava/lang/Byte;" => (70, 1),
    "java/lang/Byte#equals:(Ljava/lang/Object;)Z" => (70, 2),
    "java/lang/Byte#hashCode:()I" => (70, 3),
    "java/lang/Byte#toString:()Ljava/lang/String;" => (70, 4),
    "java/lang/Byte#compareTo:(Ljava/lang/Byte;)I" => (70, 5),
    "java/lang/Byte#toString:(BI)Ljava/lang/String;" => (70, 6),
    "java/lang/Byte#toString:(B)Ljava/lang/String;" => (70, 7),
    "java/lang/Byte#parseByte:(Ljava/lang/String;)B" => (70, 8),
    "java/lang/Byte#byteValue:()B" => (70, 9),
    "java/lang/Byte#shortValue:()S" => (70, 10),
    "java/lang/Byte#intValue:()I" => (70, 11),
    "java/lang/Byte#longValue:()J" => (70, 12),
    "java/lang/Byte#floatValue:()F" => (70, 13),
    "java/lang/Byte#doubleValue:()D" => (70, 14),
    "java/lang/Byte#compareTo:(Ljava/lang/Object;)I" => (70, 15),
    "java/lang/Byte#<clinit>:()V" => (70, 16),
    "java/lang/Bytes#<init>:(I[B)V" => (71, 0),
    "java/lang/Bytes#isValid:(I)Z" => (71, 1),
    "java/lang/Bytes1#<init>:([B)V" => (72, 0),
    "java/lang/Bytes1#<clinit>:()V" => (72, 1),
    "java/lang/Bytes10#<init>:([B)V" => (73, 0),
    "java/lang/Bytes10#<clinit>:()V" => (73, 1),
    "java/lang/Bytes11#<init>:([B)V" => (74, 0),
    "java/lang/Bytes11#<clinit>:()V" => (74, 1),
    "java/lang/Bytes12#<init>:([B)V" => (75, 0),
    "java/lang/Bytes12#<clinit>:()V" => (75, 1),
    "java/lang/Bytes13#<init>:([B)V" => (76, 0),
    "java/lang/Bytes13#<clinit>:()V" => (76, 1),
    "java/lang/Bytes14#<init>:([B)V" => (77, 0),
    "java/lang/Bytes14#<clinit>:()V" => (77, 1),
    "java/lang/Bytes15#<init>:([B)V" => (78, 0),
    "java/lang/Bytes15#<clinit>:()V" => (78, 1),
    "java/lang/Bytes16#<init>:([B)V" => (79, 0),
    "java/lang/Bytes16#<clinit>:()V" => (79, 1),
    "java/lang/Bytes17#<init>:([B)V" => (80, 0),
    "java/lang/Bytes17#<clinit>:()V" => (80, 1),
    "java/lang/Bytes18#<init>:([B)V" => (81, 0),
    "java/lang/Bytes18#<clinit>:()V" => (81, 1),
    "java/lang/Bytes19#<init>:([B)V" => (82, 0),
    "java/lang/Bytes19#<clinit>:()V" => (82, 1),
    "java/lang/Bytes2#<init>:([B)V" => (83, 0),
    "java/lang/Bytes2#<clinit>:()V" => (83, 1),
    "java/lang/Bytes20#<init>:([B)V" => (84, 0),
    "java/lang/Bytes20#<clinit>:()V" => (84, 1),
    "java/lang/Bytes21#<init>:([B)V" => (85, 0),
    "java/lang/Bytes21#<clinit>:()V" => (85, 1),
    "java/lang/Bytes22#<init>:([B)V" => (86, 0),
    "java/lang/Bytes22#<clinit>:()V" => (86, 1),
    "java/lang/Bytes23#<init>:([B)V" => (87, 0),
    "java/lang/Bytes23#<clinit>:()V" => (87, 1),
    "java/lang/Bytes24#<init>:([B)V" => (88, 0),
    "java/lang/Bytes24#<clinit>:()V" => (88, 1),
    "java/lang/Bytes25#<init>:([B)V" => (89, 0),
    "java/lang/Bytes25#<clinit>:()V" => (89, 1),
    "java/lang/Bytes26#<init>:([B)V" => (90, 0),
    "java/lang/Bytes26#<clinit>:()V" => (90, 1),
    "java/lang/Bytes27#<init>:([B)V" => (91, 0),
    "java/lang/Bytes27#<clinit>:()V" => (91, 1),
    "java/lang/Bytes28#<init>:([B)V" => (92, 0),
    "java/lang/Bytes28#<clinit>:()V" => (92, 1),
    "java/lang/Bytes29#<init>:([B)V" => (93, 0),
    "java/lang/Bytes29#<clinit>:()V" => (93, 1),
    "java/lang/Bytes3#<init>:([B)V" => (94, 0),
    "java/lang/Bytes3#<clinit>:()V" => (94, 1),
    "java/lang/Bytes30#<init>:([B)V" => (95, 0),
    "java/lang/Bytes30#<clinit>:()V" => (95, 1),
    "java/lang/Bytes31#<init>:([B)V" => (96, 0),
    "java/lang/Bytes31#<clinit>:()V" => (96, 1),
    "java/lang/Bytes32#<init>:([B)V" => (97, 0),
    "java/lang/Bytes32#<clinit>:()V" => (97, 1),
    "java/lang/Bytes4#<init>:([B)V" => (98, 0),
    "java/lang/Bytes4#<clinit>:()V" => (98, 1),
    "java/lang/Bytes5#<init>:([B)V" => (99, 0),
    "java/lang/Bytes5#<clinit>:()V" => (99, 1),
    "java/lang/Bytes6#<init>:([B)V" => (100, 0),
    "java/lang/Bytes6#<clinit>:()V" => (100, 1),
    "java/lang/Bytes7#<init>:([B)V" => (101, 0),
    "java/lang/Bytes7#<clinit>:()V" => (101, 1),
    "java/lang/Bytes8#<init>:([B)V" => (102, 0),
    "java/lang/Bytes8#<clinit>:()V" => (102, 1),
    "java/lang/Bytes9#<init>:([B)V" => (103, 0),
    "java/lang/Bytes9#<clinit>:()V" => (103, 1),
    "java/lang/BytesType#<init>:([BLjava/lang/String;)V" => (104, 0),
    "java/lang/BytesType#bytes32PaddedLength:()I" => (104, 1),
    "java/lang/BytesType#getValue:()[B" => (104, 2),
    "java/lang/BytesType#getTypeAsString:()Ljava/lang/String;" => (104, 3),
    "java/lang/BytesType#equals:(Ljava/lang/Object;)Z" => (104, 4),
    "java/lang/BytesType#hashCode:()I" => (104, 5),
    "java/lang/BytesType#getValue:()Ljava/lang/Object;" => (104, 6),
    "java/lang/Callable#call:()Ljava/lang/Object;" => (105, 0),
    "java/lang/CharSequence#charAt:(I)C" => (106, 0),
    "java/lang/CharSequence#length:()I" => (106, 1),
    "java/lang/CharSequence#subSequence:(II)Ljava/lang/CharSequence;" => (106, 2),
    "java/lang/CharSequence#toString:()Ljava/lang/String;" => (106, 3),
    "java/lang/Character#<init>:(C)V" => (107, 0),
    "java/lang/Character#valueOf:(C)Ljava/lang/Character;" => (107, 1),
    "java/lang/Character#compareTo:(Ljava/lang/Character;)I" => (107, 2),
    "java/lang/Character#equals:(Ljava/lang/Object;)Z" => (107, 3),
    "java/lang/Character#hashCode:()I" => (107, 4),
    "java/lang/Character#toString:()Ljava/lang/String;" => (107, 5),
    "java/lang/Character#toString:(C)Ljava/lang/String;" => (107, 6),
    "java/lang/Character#charValue:()C" => (107, 7),
    "java/lang/Character#toLowerCase:(C)C" => (107, 8),
    "java/lang/Character#toLowerCase:(I)I" => (107, 9),
    "java/lang/Character#toUpperCase:(C)C" => (107, 10),
    "java/lang/Character#toUpperCase:(I)I" => (107, 11),
    "java/lang/Character#isDigit:(C)Z" => (107, 12),
    "java/lang/Character#isDigit:(I)Z" => (107, 13),
    "java/lang/Character#digit:(CI)I" => (107, 14),
    "java/lang/Character#forDigit:(II)C" => (107, 15),
    "java/lang/Character#isLetter:(I)Z" => (107, 16),
    "java/lang/Character#isLetter:(C)Z" => (107, 17),
    "java/lang/Character#isLetterOrDigit:(C)Z" => (107, 18),
    "java/lang/Character#isLetterOrDigit:(I)Z" => (107, 19),
    "java/lang/Character#isLowerCase:(I)Z" => (107, 20),
    "java/lang/Character#isLowerCase:(C)Z" => (107, 21),
    "java/lang/Character#isUpperCase:(C)Z" => (107, 22),
    "java/lang/Character#isUpperCase:(I)Z" => (107, 23),
    "java/lang/Character#isWhitespace:(I)Z" => (107, 24),
    "java/lang/Character#isWhitespace:(C)Z" => (107, 25),
    "java/lang/Character#isSpaceChar:(C)Z" => (107, 26),
    "java/lang/Character#isHighSurrogate:(C)Z" => (107, 27),
    "java/lang/Character#isLowSurrogate:(C)Z" => (107, 28),
    "java/lang/Character#isISOControl:(C)Z" => (107, 29),
    "java/lang/Character#isJavaIdentifierStart:(C)Z" => (107, 30),
    "java/lang/Character#isJavaIdentifierStart:(I)Z" => (107, 31),
    "java/lang/Character#isJavaIdentifierPart:(C)Z" => (107, 32),
    "java/lang/Character#isJavaIdentifierPart:(I)Z" => (107, 33),
    "java/lang/Character#toCodePoint:(CC)I" => (107, 34),
    "java/lang/Character#isSupplementaryCodePoint:(I)Z" => (107, 35),
    "java/lang/Character#canCastToChar:(I)Z" => (107, 36),
    "java/lang/Character#toChars:(I)[C" => (107, 37),
    "java/lang/Character#isSurrogatePair:(CC)Z" => (107, 38),
    "java/lang/Character#codePointAt:(Ljava/lang/CharSequence;I)I" => (107, 39),
    "java/lang/Character#codePointCount:(Ljava/lang/CharSequence;II)I" => (107, 40),
    "java/lang/Character#compareTo:(Ljava/lang/Object;)I" => (107, 41),
    "java/lang/Character#<clinit>:()V" => (107, 42),
    "java/lang/Class#<init>:(Ljava/base/VMClass;)V" => (108, 0),
    "java/lang/Class#toString:()Ljava/lang/String;" => (108, 1),
    "java/lang/Class#replace:(II[BII)[B" => (108, 2),
    "java/lang/Class#getName:()Ljava/lang/String;" => (108, 3),
    "java/lang/Class#getName:(Ljava/base/VMClass;)Ljava/lang/String;" => (108, 4),
    "java/lang/Class#getCanonicalName:()Ljava/lang/String;" => (108, 5),
    "java/lang/Class#getSimpleName:()Ljava/lang/String;" => (108, 6),
    "java/lang/Class#newInstance:()Ljava/lang/Object;" => (108, 7),
    "java/lang/Class#forName:(Ljava/lang/String;)Ljava/lang/Class;" => (108, 8),
    "java/lang/Class#forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;" => (108, 9),
    "java/lang/Class#getComponentType:()Ljava/lang/Class;" => (108, 10),
    "java/lang/Class#isAssignableFrom:(Ljava/lang/Class;)Z" => (108, 11),
    "java/lang/Class#getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;" => (108, 12),
    "java/lang/Class#getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;" => (108, 13),
    "java/lang/Class#getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" => (108, 14),
    "java/lang/Class#getMethod:(Ljava/lang/String;)Ljava/lang/reflect/Method;" => (108, 15),
    "java/lang/Class#getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" => (108, 16),
    "java/lang/Class#getConstructor:()Ljava/lang/reflect/Constructor;" => (108, 17),
    "java/lang/Class#getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" => (108, 18),
    "java/lang/Class#getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" => (108, 19),
    "java/lang/Class#countConstructors:(Z)I" => (108, 20),
    "java/lang/Class#getDeclaredConstructors:()[Ljava/lang/reflect/Constructor;" => (108, 21),
    "java/lang/Class#getConstructors:()[Ljava/lang/reflect/Constructor;" => (108, 22),
    "java/lang/Class#getDeclaredFields:()[Ljava/lang/reflect/Field;" => (108, 23),
    "java/lang/Class#countPublicFields:()I" => (108, 24),
    "java/lang/Class#getFields:()[Ljava/lang/reflect/Field;" => (108, 25),
    "java/lang/Class#getAllFields:(Ljava/base/VMClass;Ljava/util/ArrayList;)V" => (108, 26),
    "java/lang/Class#getAllFields:()[Ljava/lang/reflect/Field;" => (108, 27),
    "java/lang/Class#getDeclaredMethods:()[Ljava/lang/reflect/Method;" => (108, 28),
    "java/lang/Class#getMethods:()[Ljava/lang/reflect/Method;" => (108, 29),
    "java/lang/Class#getInterfaces:()[Ljava/lang/Class;" => (108, 30),
    "java/lang/Class#getEnclosingClass:()Ljava/lang/Class;" => (108, 31),
    "java/lang/Class#getEnclosingMethod:()Ljava/lang/reflect/Method;" => (108, 32),
    "java/lang/Class#getEnclosingConstructor:()Ljava/lang/reflect/Constructor;" => (108, 33),
    "java/lang/Class#getEnumConstants:()[Ljava/lang/Object;" => (108, 34),
    "java/lang/Class#getDeclaredClasses:()[Ljava/lang/Class;" => (108, 35),
    "java/lang/Class#getDeclaringClass:()Ljava/lang/Class;" => (108, 36),
    "java/lang/Class#getClassLoader:()Ljava/lang/ClassLoader;" => (108, 37),
    "java/lang/Class#getModifiers:()I" => (108, 38),
    "java/lang/Class#isInterface:()Z" => (108, 39),
    "java/lang/Class#isAnnotation:()Z" => (108, 40),
    "java/lang/Class#getSuperclass:()Ljava/lang/Class;" => (108, 41),
    "java/lang/Class#getClassType:()Ljava/lang/ClassType;" => (108, 41),
    "java/lang/Class#isAnonymousClass:()Z" => (108, 42),
    "java/lang/Class#isLocalClass:()Z" => (108, 43),
    "java/lang/Class#isMemberClass:()Z" => (108, 44),
    "java/lang/Class#isArray:()Z" => (108, 45),
    "java/lang/Class#isInstance:(Ljava/base/VMClass;Ljava/lang/Object;)Z" => (108, 46),
    "java/lang/Class#isInstance:(Ljava/lang/Object;)Z" => (108, 47),
    "java/lang/Class#isPrimitive:()Z" => (108, 48),
    "java/lang/Class#isEnum:()Z" => (108, 49),
    "java/lang/Class#getResource:(Ljava/lang/String;)Ljava/lang/Object;" => (108, 50),
    "java/lang/Class#getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;" => (108, 51),
    "java/lang/Class#desiredAssertionStatus:()Z" => (108, 52),
    "java/lang/Class#asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;" => (108, 53),
    "java/lang/Class#cast:(Ljava/lang/Object;)Ljava/lang/Object;" => (108, 54),
    "java/lang/Class#getPackage:()Ljava/lang/Package;" => (108, 55),
    "java/lang/Class#isAnnotationPresent:(Ljava/lang/Class;)Z" => (108, 56),
    "java/lang/Class#getAnnotation:(Ljava/base/VMClass;[Ljava/lang/Object;)Ljava/lang/annotation/Annotation;" => (108, 57),
    "java/lang/Class#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;" => (108, 58),
    "java/lang/Class#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;" => (108, 59),
    "java/lang/Class#countAnnotations:()I" => (108, 60),
    "java/lang/Class#getAnnotations:()[Ljava/lang/annotation/Annotation;" => (108, 61),
    "java/lang/Class#getTypeParameters:()[Ljava/lang/reflect/TypeVariable;" => (108, 62),
    "java/lang/Class#getGenericTypeSignatures:()[Ljava/lang/String;" => (108, 63),
    "java/lang/Class#getGenericInterfaces:()[Ljava/lang/reflect/Type;" => (108, 64),
    "java/lang/Class#getGenericSuperclass:()Ljava/lang/reflect/Type;" => (108, 65),
    "java/lang/ClassCastException#<init>:(Ljava/lang/String;)V" => (109, 0),
    "java/lang/ClassCastException#<init>:()V" => (109, 1),
    "java/lang/ClassLoader#<init>:(Ljava/lang/ClassLoader;)V" => (110, 0),
    "java/lang/ClassLoader#<init>:()V" => (110, 1),
    "java/lang/ClassLoader#packages:()Ljava/util/Map;" => (110, 2),
    "java/lang/ClassLoader#getPackage:(Ljava/lang/String;)Ljava/lang/Package;" => (110, 3),
    "java/lang/ClassLoader#getPackages:()[Ljava/lang/Package;" => (110, 4),
    "java/lang/ClassLoader#definePackage:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Package;" => (110, 5),
    "java/lang/ClassLoader#getSystemClassLoader:()Ljava/lang/ClassLoader;" => (110, 6),
    "java/lang/ClassLoader#defineClass:(Ljava/lang/String;[BII)Ljava/lang/Class;" => (110, 7),
    "java/lang/ClassLoader#findClass:(Ljava/lang/String;)Ljava/lang/Class;" => (110, 8),
    "java/lang/ClassLoader#reallyFindLoadedClass:(Ljava/lang/String;)Ljava/lang/Class;" => (110, 9),
    "java/lang/ClassLoader#findLoadedClass:(Ljava/lang/String;)Ljava/lang/Class;" => (110, 10),
    "java/lang/ClassLoader#loadClass:(Ljava/lang/String;)Ljava/lang/Class;" => (110, 11),
    "java/lang/ClassLoader#loadClass:(Ljava/lang/String;Z)Ljava/lang/Class;" => (110, 12),
    "java/lang/ClassLoader#resolveClass:(Ljava/lang/Class;)V" => (110, 13),
    "java/lang/ClassLoader#getParent:()Ljava/lang/ClassLoader;" => (110, 14),
    "java/lang/ClassLoader#findResource:(Ljava/lang/String;)Ljava/lang/Object;" => (110, 15),
    "java/lang/ClassLoader#findResources:(Ljava/lang/String;)Ljava/util/Enumeration;" => (110, 16),
    "java/lang/ClassLoader#getResource:(Ljava/lang/String;)Ljava/lang/Object;" => (110, 17),
    "java/lang/ClassLoader#getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;" => (110, 18),
    "java/lang/ClassLoader#getSystemResource:(Ljava/lang/String;)Ljava/lang/Object;" => (110, 19),
    "java/lang/ClassLoader#getSystemResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;" => (110, 20),
    "java/lang/ClassLoader#getSystemResources:(Ljava/lang/String;)Ljava/util/Enumeration;" => (110, 21),
    "java/lang/ClassLoader#getResources:(Ljava/lang/String;)Ljava/util/Enumeration;" => (110, 22),
    "java/lang/ClassLoader#collectResources:(Ljava/lang/String;)Ljava/util/Collection;" => (110, 23),
    "java/lang/ClassLoader#findLibrary:(Ljava/lang/String;)Ljava/lang/String;" => (110, 24),
    "java/lang/ClassLoader#getCaller:()Ljava/lang/Class;" => (110, 25),
    "java/lang/ClassLoader#load:(Ljava/lang/String;Ljava/lang/Class;Z)V" => (110, 26),
    "java/lang/ClassNotFoundException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (111, 0),
    "java/lang/ClassNotFoundException#<init>:(Ljava/lang/String;)V" => (111, 1),
    "java/lang/ClassNotFoundException#<init>:()V" => (111, 2),
    "java/lang/ClassNotFoundException#getException:()Ljava/lang/Throwable;" => (111, 3),
    "java/lang/ClassType#values:()[Ljava/lang/ClassType;" => (112, 0),
    "java/lang/ClassType#valueOf:(Ljava/lang/String;)Ljava/lang/ClassType;" => (112, 1),
    "java/lang/ClassType#<init>:(Ljava/lang/String;I)V" => (112, 2),
    "java/lang/ClassType#<clinit>:()V" => (112, 3),
    "java/lang/CloneNotSupportedException#<init>:(Ljava/lang/String;)V" => (113, 0),
    "java/lang/CloneNotSupportedException#<init>:()V" => (113, 1),
    "java/lang/Comparable#compareTo:(Ljava/lang/Object;)I" => (115, 0),
    "java/lang/Context#<init>:()V" => (116, 0),
    "java/lang/Context#_msgSender:()Ljava/lang/Address;" => (116, 1),
    "java/lang/Context#revert:(Ljava/lang/RuntimeException;)V" => (116, 2),
    "java/lang/Context#emit:(Ljava/lang/EventLog;)V" => (116, 3),
    "java/lang/Enum#<init>:(Ljava/lang/String;I)V" => (118, 0),
    "java/lang/Enum#compareTo:(Ljava/lang/Enum;)I" => (118, 1),
    "java/lang/Enum#valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;" => (118, 2),
    "java/lang/Enum#ordinal:()I" => (118, 3),
    "java/lang/Enum#name:()Ljava/lang/String;" => (118, 4),
    "java/lang/Enum#toString:()Ljava/lang/String;" => (118, 5),
    "java/lang/Enum#getDeclaringClass:()Ljava/lang/Class;" => (118, 6),
    "java/lang/Enum#compareTo:(Ljava/lang/Object;)I" => (118, 7),
    "java/lang/Error#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (119, 0),
    "java/lang/Error#<init>:(Ljava/lang/String;)V" => (119, 1),
    "java/lang/Error#<init>:(Ljava/lang/Throwable;)V" => (119, 2),
    "java/lang/Error#<init>:()V" => (119, 3),
    "java/lang/EventLog#<init>:(Ljava/lang/String;)V" => (120, 0),
    "java/lang/EventLog#getMessage:()Ljava/lang/String;" => (120, 1),
    "java/lang/Exception#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (121, 0),
    "java/lang/Exception#<init>:(Ljava/lang/String;)V" => (121, 1),
    "java/lang/Exception#<init>:(Ljava/lang/Throwable;)V" => (121, 2),
    "java/lang/Exception#<init>:()V" => (121, 3),
    "java/lang/ExceptionInInitializerError#<init>:(Ljava/lang/String;)V" => (122, 0),
    "java/lang/ExceptionInInitializerError#<init>:()V" => (122, 1),
    "java/lang/IllegalAccessError#<init>:(Ljava/lang/String;)V" => (123, 0),
    "java/lang/IllegalAccessError#<init>:()V" => (123, 1),
    "java/lang/IllegalAccessException#<init>:(Ljava/lang/String;)V" => (124, 0),
    "java/lang/IllegalAccessException#<init>:()V" => (124, 1),
    "java/lang/IllegalArgumentException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (125, 0),
    "java/lang/IllegalArgumentException#<init>:(Ljava/lang/String;)V" => (125, 1),
    "java/lang/IllegalArgumentException#<init>:(Ljava/lang/Throwable;)V" => (125, 2),
    "java/lang/IllegalArgumentException#<init>:()V" => (125, 3),
    "java/lang/IllegalMonitorStateException#<init>:(Ljava/lang/String;)V" => (126, 0),
    "java/lang/IllegalMonitorStateException#<init>:()V" => (126, 1),
    "java/lang/IllegalStateException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (127, 0),
    "java/lang/IllegalStateException#<init>:(Ljava/lang/String;)V" => (127, 1),
    "java/lang/IllegalStateException#<init>:(Ljava/lang/Throwable;)V" => (127, 2),
    "java/lang/IllegalStateException#<init>:()V" => (127, 3),
    "java/lang/IncompatibleClassChangeError#<init>:(Ljava/lang/String;)V" => (128, 0),
    "java/lang/IncompatibleClassChangeError#<init>:()V" => (128, 1),
    "java/lang/IndexOutOfBoundsException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (129, 0),
    "java/lang/IndexOutOfBoundsException#<init>:(Ljava/lang/String;)V" => (129, 1),
    "java/lang/IndexOutOfBoundsException#<init>:(Ljava/lang/Throwable;)V" => (129, 2),
    "java/lang/IndexOutOfBoundsException#<init>:()V" => (129, 3),
    "java/lang/InstantiationError#<init>:(Ljava/lang/String;)V" => (130, 0),
    "java/lang/InstantiationError#<init>:()V" => (130, 1),
    "java/lang/InstantiationException#<init>:(Ljava/lang/String;)V" => (131, 0),
    "java/lang/InstantiationException#<init>:()V" => (131, 1),
    "java/lang/Int#<init>:(Ljava/math/BigInteger;)V" => (132, 0),
    "java/lang/Int#<init>:(ILjava/math/BigInteger;)V" => (132, 1),
    "java/lang/Int#<clinit>:()V" => (132, 2),
    "java/lang/Int104#<init>:(Ljava/math/BigInteger;)V" => (133, 0),
    "java/lang/Int104#<init>:(J)V" => (133, 1),
    "java/lang/Int104#<clinit>:()V" => (133, 2),
    "java/lang/Int112#<init>:(Ljava/math/BigInteger;)V" => (134, 0),
    "java/lang/Int112#<init>:(J)V" => (134, 1),
    "java/lang/Int112#<clinit>:()V" => (134, 2),
    "java/lang/Int120#<init>:(Ljava/math/BigInteger;)V" => (135, 0),
    "java/lang/Int120#<init>:(J)V" => (135, 1),
    "java/lang/Int120#<clinit>:()V" => (135, 2),
    "java/lang/Int128#<init>:(Ljava/math/BigInteger;)V" => (136, 0),
    "java/lang/Int128#<init>:(J)V" => (136, 1),
    "java/lang/Int128#<clinit>:()V" => (136, 2),
    "java/lang/Int136#<init>:(Ljava/math/BigInteger;)V" => (137, 0),
    "java/lang/Int136#<init>:(J)V" => (137, 1),
    "java/lang/Int136#<clinit>:()V" => (137, 2),
    "java/lang/Int144#<init>:(Ljava/math/BigInteger;)V" => (138, 0),
    "java/lang/Int144#<init>:(J)V" => (138, 1),
    "java/lang/Int144#<clinit>:()V" => (138, 2),
    "java/lang/Int152#<init>:(Ljava/math/BigInteger;)V" => (139, 0),
    "java/lang/Int152#<init>:(J)V" => (139, 1),
    "java/lang/Int152#<clinit>:()V" => (139, 2),
    "java/lang/Int16#<init>:(Ljava/math/BigInteger;)V" => (140, 0),
    "java/lang/Int16#<init>:(J)V" => (140, 1),
    "java/lang/Int16#<clinit>:()V" => (140, 2),
    "java/lang/Int160#<init>:(Ljava/math/BigInteger;)V" => (141, 0),
    "java/lang/Int160#<init>:(J)V" => (141, 1),
    "java/lang/Int160#<clinit>:()V" => (141, 2),
    "java/lang/Int168#<init>:(Ljava/math/BigInteger;)V" => (142, 0),
    "java/lang/Int168#<init>:(J)V" => (142, 1),
    "java/lang/Int168#<clinit>:()V" => (142, 2),
    "java/lang/Int176#<init>:(Ljava/math/BigInteger;)V" => (143, 0),
    "java/lang/Int176#<init>:(J)V" => (143, 1),
    "java/lang/Int176#<clinit>:()V" => (143, 2),
    "java/lang/Int184#<init>:(Ljava/math/BigInteger;)V" => (144, 0),
    "java/lang/Int184#<init>:(J)V" => (144, 1),
    "java/lang/Int184#<clinit>:()V" => (144, 2),
    "java/lang/Int192#<init>:(Ljava/math/BigInteger;)V" => (145, 0),
    "java/lang/Int192#<init>:(J)V" => (145, 1),
    "java/lang/Int192#<clinit>:()V" => (145, 2),
    "java/lang/Int200#<init>:(Ljava/math/BigInteger;)V" => (146, 0),
    "java/lang/Int200#<init>:(J)V" => (146, 1),
    "java/lang/Int200#<clinit>:()V" => (146, 2),
    "java/lang/Int208#<init>:(Ljava/math/BigInteger;)V" => (147, 0),
    "java/lang/Int208#<init>:(J)V" => (147, 1),
    "java/lang/Int208#<clinit>:()V" => (147, 2),
    "java/lang/Int216#<init>:(Ljava/math/BigInteger;)V" => (148, 0),
    "java/lang/Int216#<init>:(J)V" => (148, 1),
    "java/lang/Int216#<clinit>:()V" => (148, 2),
    "java/lang/Int224#<init>:(Ljava/math/BigInteger;)V" => (149, 0),
    "java/lang/Int224#<init>:(J)V" => (149, 1),
    "java/lang/Int224#<clinit>:()V" => (149, 2),
    "java/lang/Int232#<init>:(Ljava/math/BigInteger;)V" => (150, 0),
    "java/lang/Int232#<init>:(J)V" => (150, 1),
    "java/lang/Int232#<clinit>:()V" => (150, 2),
    "java/lang/Int24#<init>:(Ljava/math/BigInteger;)V" => (151, 0),
    "java/lang/Int24#<init>:(J)V" => (151, 1),
    "java/lang/Int24#<clinit>:()V" => (151, 2),
    "java/lang/Int240#<init>:(Ljava/math/BigInteger;)V" => (152, 0),
    "java/lang/Int240#<init>:(J)V" => (152, 1),
    "java/lang/Int240#<clinit>:()V" => (152, 2),
    "java/lang/Int248#<init>:(Ljava/math/BigInteger;)V" => (153, 0),
    "java/lang/Int248#<init>:(J)V" => (153, 1),
    "java/lang/Int248#<clinit>:()V" => (153, 2),
    "java/lang/Int256#<init>:(Ljava/math/BigInteger;)V" => (154, 0),
    "java/lang/Int256#<init>:(J)V" => (154, 1),
    "java/lang/Int256#<clinit>:()V" => (154, 2),
    "java/lang/Int32#<init>:(Ljava/math/BigInteger;)V" => (155, 0),
    "java/lang/Int32#<init>:(J)V" => (155, 1),
    "java/lang/Int32#<clinit>:()V" => (155, 2),
    "java/lang/Int40#<init>:(Ljava/math/BigInteger;)V" => (156, 0),
    "java/lang/Int40#<init>:(J)V" => (156, 1),
    "java/lang/Int40#<clinit>:()V" => (156, 2),
    "java/lang/Int48#<init>:(Ljava/math/BigInteger;)V" => (157, 0),
    "java/lang/Int48#<init>:(J)V" => (157, 1),
    "java/lang/Int48#<clinit>:()V" => (157, 2),
    "java/lang/Int56#<init>:(Ljava/math/BigInteger;)V" => (158, 0),
    "java/lang/Int56#<init>:(J)V" => (158, 1),
    "java/lang/Int56#<clinit>:()V" => (158, 2),
    "java/lang/Int64#<init>:(Ljava/math/BigInteger;)V" => (159, 0),
    "java/lang/Int64#<init>:(J)V" => (159, 1),
    "java/lang/Int64#<clinit>:()V" => (159, 2),
    "java/lang/Int72#<init>:(Ljava/math/BigInteger;)V" => (160, 0),
    "java/lang/Int72#<init>:(J)V" => (160, 1),
    "java/lang/Int72#<clinit>:()V" => (160, 2),
    "java/lang/Int8#<init>:(Ljava/math/BigInteger;)V" => (161, 0),
    "java/lang/Int8#<init>:(J)V" => (161, 1),
    "java/lang/Int8#<clinit>:()V" => (161, 2),
    "java/lang/Int80#<init>:(Ljava/math/BigInteger;)V" => (162, 0),
    "java/lang/Int80#<init>:(J)V" => (162, 1),
    "java/lang/Int80#<clinit>:()V" => (162, 2),
    "java/lang/Int88#<init>:(Ljava/math/BigInteger;)V" => (163, 0),
    "java/lang/Int88#<init>:(J)V" => (163, 1),
    "java/lang/Int88#<clinit>:()V" => (163, 2),
    "java/lang/Int96#<init>:(Ljava/math/BigInteger;)V" => (164, 0),
    "java/lang/Int96#<init>:(J)V" => (164, 1),
    "java/lang/Int96#<clinit>:()V" => (164, 2),
    "java/lang/IntType#<init>:(Ljava/lang/String;ILjava/math/BigInteger;)V" => (165, 0),
    "java/lang/IntType#getBitSize:()I" => (165, 1),
    "java/lang/IntType#valid:()Z" => (165, 2),
    "java/lang/IntType#isValidBitSize:(I)Z" => (165, 3),
    "java/lang/IntType#isValidBitCount:(ILjava/math/BigInteger;)Z" => (165, 4),
    "java/lang/Integer#<init>:(I)V" => (166, 0),
    "java/lang/Integer#<init>:(Ljava/lang/String;)V" => (166, 1),
    "java/lang/Integer#valueOf:(I)Ljava/lang/Integer;" => (166, 2),
    "java/lang/Integer#valueOf:(Ljava/lang/String;)Ljava/lang/Integer;" => (166, 3),
    "java/lang/Integer#equals:(Ljava/lang/Object;)Z" => (166, 4),
    "java/lang/Integer#hashCode:()I" => (166, 5),
    "java/lang/Integer#compareTo:(Ljava/lang/Integer;)I" => (166, 6),
    "java/lang/Integer#toString:()Ljava/lang/String;" => (166, 7),
    "java/lang/Integer#toString:(II)Ljava/lang/String;" => (166, 8),
    "java/lang/Integer#toString:(I)Ljava/lang/String;" => (166, 9),
    "java/lang/Integer#toHexString:(I)Ljava/lang/String;" => (166, 10),
    "java/lang/Integer#toOctalString:(I)Ljava/lang/String;" => (166, 11),
    "java/lang/Integer#toBinaryString:(I)Ljava/lang/String;" => (166, 12),
    "java/lang/Integer#byteValue:()B" => (166, 13),
    "java/lang/Integer#shortValue:()S" => (166, 14),
    "java/lang/Integer#intValue:()I" => (166, 15),
    "java/lang/Integer#longValue:()J" => (166, 16),
    "java/lang/Integer#floatValue:()F" => (166, 17),
    "java/lang/Integer#doubleValue:()D" => (166, 18),
    "java/lang/Integer#signum:(I)I" => (166, 19),
    "java/lang/Integer#bitCount:(I)I" => (166, 20),
    "java/lang/Integer#reverseBytes:(I)I" => (166, 21),
    "java/lang/Integer#parseInt:(Ljava/lang/String;)I" => (166, 22),
    "java/lang/Integer#parseInt:(Ljava/lang/String;I)I" => (166, 23),
    "java/lang/Integer#decode:(Ljava/lang/String;)Ljava/lang/Integer;" => (166, 24),
    "java/lang/Integer#numberOfLeadingZeros:(I)I" => (166, 25),
    "java/lang/Integer#numberOfTrailingZeros:(I)I" => (166, 26),
    "java/lang/Integer#toUnsignedString:(II)Ljava/lang/String;" => (166, 27),
    "java/lang/Integer#toUnsignedString:(I)Ljava/lang/String;" => (166, 28),
    "java/lang/Integer#compareUnsigned:(II)I" => (166, 29),
    "java/lang/Integer#compare:(II)I" => (166, 30),
    "java/lang/Integer#compareTo:(Ljava/lang/Object;)I" => (166, 31),
    "java/lang/Integer#<clinit>:()V" => (166, 32),
    "java/lang/InternalError#<init>:(Ljava/lang/String;)V" => (167, 0),
    "java/lang/InternalError#<init>:()V" => (167, 1),
    "java/lang/InterruptedException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (168, 0),
    "java/lang/InterruptedException#<init>:(Ljava/lang/String;)V" => (168, 1),
    "java/lang/InterruptedException#<init>:(Ljava/lang/Throwable;)V" => (168, 2),
    "java/lang/InterruptedException#<init>:()V" => (168, 3),
    "java/lang/Iterable#iterator:()Ljava/util/Iterator;" => (169, 0),
    "java/lang/LinkageError#<init>:(Ljava/lang/String;)V" => (170, 0),
    "java/lang/LinkageError#<init>:()V" => (170, 1),
    "java/lang/Long#<init>:(J)V" => (171, 0),
    "java/lang/Long#<init>:(Ljava/lang/String;)V" => (171, 1),
    "java/lang/Long#valueOf:(Ljava/lang/String;)Ljava/lang/Long;" => (171, 2),
    "java/lang/Long#valueOf:(J)Ljava/lang/Long;" => (171, 3),
    "java/lang/Long#compareTo:(Ljava/lang/Long;)I" => (171, 4),
    "java/lang/Long#equals:(Ljava/lang/Object;)Z" => (171, 5),
    "java/lang/Long#hashCode:()I" => (171, 6),
    "java/lang/Long#toString:()Ljava/lang/String;" => (171, 7),
    "java/lang/Long#toString:(JI)Ljava/lang/String;" => (171, 8),
    "java/lang/Long#toString:(J)Ljava/lang/String;" => (171, 9),
    "java/lang/Long#toHexString:(J)Ljava/lang/String;" => (171, 10),
    "java/lang/Long#toOctalString:(J)Ljava/lang/String;" => (171, 11),
    "java/lang/Long#toBinaryString:(J)Ljava/lang/String;" => (171, 12),
    "java/lang/Long#byteValue:()B" => (171, 13),
    "java/lang/Long#shortValue:()S" => (171, 14),
    "java/lang/Long#intValue:()I" => (171, 15),
    "java/lang/Long#longValue:()J" => (171, 16),
    "java/lang/Long#floatValue:()F" => (171, 17),
    "java/lang/Long#doubleValue:()D" => (171, 18),
    "java/lang/Long#signum:(J)I" => (171, 19),
    "java/lang/Long#pow:(JJ)J" => (171, 20),
    "java/lang/Long#parseLong:(Ljava/lang/String;)J" => (171, 21),
    "java/lang/Long#parseLong:(Ljava/lang/String;I)J" => (171, 22),
    "java/lang/Long#numberOfLeadingZeros:(J)I" => (171, 23),
    "java/lang/Long#toUnsignedString:(JI)Ljava/lang/String;" => (171, 24),
    "java/lang/Long#toUnsignedString:(J)Ljava/lang/String;" => (171, 25),
    "java/lang/Long#compareUnsigned:(JJ)I" => (171, 26),
    "java/lang/Long#compare:(JJ)I" => (171, 27),
    "java/lang/Long#compareTo:(Ljava/lang/Object;)I" => (171, 28),
    "java/lang/Long#<clinit>:()V" => (171, 29),
    "java/lang/Mapping#<init>:()V" => (172, 0),
    "java/lang/Mapping#<init>:(Ljava/lang/Object;)V" => (172, 1),
    "java/lang/Mapping#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (172, 2),
    "java/lang/Mapping#set:(Ljava/lang/Object;Ljava/lang/Object;)V" => (172, 3),
    "java/lang/Mapping#containsKey:(Ljava/lang/Object;)Z" => (172, 4),
    "java/lang/Mapping#remove:(Ljava/lang/Object;)V" => (172, 5),
    "java/lang/Mapping#clear:()V" => (172, 6),
    "java/lang/Mapping#getDefaultValue:()Ljava/lang/Object;" => (172, 7),
    "java/lang/Mapping#hasDefaultValue:()Z" => (172, 8),
    "java/lang/Math#<init>:()V" => (173, 0),
    "java/lang/Math#max:(JJ)J" => (173, 1),
    "java/lang/Math#min:(JJ)J" => (173, 2),
    "java/lang/Math#max:(II)I" => (173, 3),
    "java/lang/Math#min:(II)I" => (173, 4),
    "java/lang/Math#abs:(I)I" => (173, 5),
    "java/lang/Math#abs:(J)J" => (173, 6),
    "java/lang/Math#randomInt:()I" => (173, 7),
    "java/lang/Math#random:()I" => (173, 8),
    "java/lang/Message#<init>:()V" => (174, 0),
    "java/lang/Message#getSender:()Ljava/lang/Address;" => (174, 1),
    "java/lang/Message#getValue:()Ljava/lang/Uint256;" => (174, 2),
    "java/lang/Message#getData:()[B" => (174, 3),
    "java/lang/Message#getAsset:()Ljava/lang/Uint64;" => (174, 4),
    "java/lang/Message#getSig:()[B" => (174, 5),
    "java/lang/Message#getGas:()Ljava/lang/Uint256;" => (174, 6),
    "java/lang/Message#toString:()Ljava/lang/String;" => (174, 7),
    "java/lang/Message#<clinit>:()V" => (174, 8),
    "java/lang/NegativeArraySizeException#<init>:(Ljava/lang/String;)V" => (175, 0),
    "java/lang/NegativeArraySizeException#<init>:()V" => (175, 1),
    "java/lang/NoClassDefFoundError#<init>:(Ljava/lang/String;)V" => (176, 0),
    "java/lang/NoClassDefFoundError#<init>:()V" => (176, 1),
    "java/lang/NoSuchFieldError#<init>:(Ljava/lang/String;)V" => (177, 0),
    "java/lang/NoSuchFieldError#<init>:()V" => (177, 1),
    "java/lang/NoSuchFieldException#<init>:(Ljava/lang/String;)V" => (178, 0),
    "java/lang/NoSuchFieldException#<init>:()V" => (178, 1),
    "java/lang/NoSuchMethodError#<init>:(Ljava/lang/String;)V" => (179, 0),
    "java/lang/NoSuchMethodError#<init>:()V" => (179, 1),
    "java/lang/NoSuchMethodException#<init>:(Ljava/lang/String;)V" => (180, 0),
    "java/lang/NoSuchMethodException#<init>:()V" => (180, 1),
    "java/lang/NullPointerException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (181, 0),
    "java/lang/NullPointerException#<init>:(Ljava/lang/String;)V" => (181, 1),
    "java/lang/NullPointerException#<init>:(Ljava/lang/Throwable;)V" => (181, 2),
    "java/lang/NullPointerException#<init>:()V" => (181, 3),
    "java/lang/Number#<init>:()V" => (182, 0),
    "java/lang/Number#byteValue:()B" => (182, 1),
    "java/lang/Number#shortValue:()S" => (182, 2),
    "java/lang/Number#intValue:()I" => (182, 3),
    "java/lang/Number#longValue:()J" => (182, 4),
    "java/lang/NumberFormatException#<init>:(Ljava/lang/String;)V" => (183, 0),
    "java/lang/NumberFormatException#<init>:()V" => (183, 1),
    "java/lang/NumericArrays#<init>:()V" => (184, 0),
    "java/lang/NumericArrays#valueOf:(J)[I" => (184, 1),
    "java/lang/NumericArrays#compare:([I[I)I" => (184, 2),
    "java/lang/NumericArrays#compare:([ILjava/math/BigInteger;I)I" => (184, 3),
    "java/lang/NumericArrays#stripLeadingZeroes:([II)[I" => (184, 4),
    "java/lang/NumericArrays#stripLeadingZeroes:([I)[I" => (184, 5),
    "java/lang/NumericArrays#stripLeadingZeroes:([B)[B" => (184, 6),
    "java/lang/NumericArrays#not:([I[I)[I" => (184, 7),
    "java/lang/NumericArrays#and:([I[I)[I" => (184, 8),
    "java/lang/NumericArrays#or:([I[I)[I" => (184, 9),
    "java/lang/NumericArrays#xor:([I[I)[I" => (184, 10),
    "java/lang/NumericArrays#setBit:([II)[I" => (184, 11),
    "java/lang/NumericArrays#clearBit:([II)[I" => (184, 12),
    "java/lang/NumericArrays#flipBit:([II)[I" => (184, 13),
    "java/lang/NumericArrays#lshift:([III)[I" => (184, 14),
    "java/lang/NumericArrays#rshift:([III)[I" => (184, 15),
    "java/lang/NumericArrays#inc:([II)[I" => (184, 16),
    "java/lang/NumericArrays#inc:([IZI)[I" => (184, 17),
    "java/lang/NumericArrays#dec:([I)[I" => (184, 18),
    "java/lang/NumericArrays#add:([I[II)[I" => (184, 19),
    "java/lang/NumericArrays#subgt:([I[I[I)[I" => (184, 20),
    "java/lang/NumericArrays#sub:([I[I)[I" => (184, 21),
    "java/lang/NumericArrays#mulmod:([I[I[I)[I" => (184, 22),
    "java/lang/NumericArrays#addmod:([I[I[I)[I" => (184, 23),
    "java/lang/NumericArrays#multiply:([I[II)[I" => (184, 24),
    "java/lang/NumericArrays#mul:([IIII)[I" => (184, 25),
    "java/lang/NumericArrays#mul:([IIIII)[I" => (184, 26),
    "java/lang/NumericArrays#mul:([II[II)[I" => (184, 27),
    "java/lang/NumericArrays#mul:([II[IIII)[I" => (184, 28),
    "java/lang/NumericArrays#bitLength:([I)I" => (184, 29),
    "java/lang/NumericArrays#square:([II)[I" => (184, 30),
    "java/lang/NumericArrays#pow:([IIII)[I" => (184, 31),
    "java/lang/NumericArrays#divide:([I[I)[I" => (184, 32),
    "java/lang/NumericArrays#mod:([I[I)[I" => (184, 33),
    "java/lang/NumericArrays#divmod:([IJ)[[I" => (184, 34),
    "java/lang/NumericArrays#divmod:([I[I)[[I" => (184, 35),
    "java/lang/NumericArrays#from:(Ljava/math/BigInteger;I)[I" => (184, 36),
    "java/lang/NumericArrays#from:([B[I)[I" => (184, 37),
    "java/lang/NumericArrays#maxValue:(I)[I" => (184, 38),
    "java/lang/NumericArrays#<clinit>:()V" => (184, 39),
    "java/lang/NumericType#<init>:(Ljava/lang/String;Ljava/math/BigInteger;)V" => (185, 0),
    "java/lang/NumericType#getTypeAsString:()Ljava/lang/String;" => (185, 1),
    "java/lang/NumericType#getValue:()Ljava/math/BigInteger;" => (185, 2),
    "java/lang/NumericType#getBitSize:()I" => (185, 3),
    "java/lang/NumericType#equals:(Ljava/lang/Object;)Z" => (185, 4),
    "java/lang/NumericType#hashCode:()I" => (185, 5),
    "java/lang/NumericType#getValue:()Ljava/lang/Object;" => (185, 6),
    "java/lang/Object#<init>:()V" => (186, 0),
    "java/lang/Object#clone:()Ljava/lang/Object;" => (186, 1),
    "java/lang/Object#clone:(Ljava/lang/Object;)Ljava/lang/Object;" => (186, 2),
    "java/lang/Object#equals:(Ljava/lang/Object;)Z" => (186, 3),
    "java/lang/Object#finalize:()V" => (186, 4),
    "java/lang/Object#getClass:()Ljava/lang/Class;" => (186, 5),
    "java/lang/Object#getVMClass:()Ljava/base/VMClass;" => (186, 6),
    "java/lang/Object#hashCode:()I" => (186, 7),
    "java/lang/Object#notify:()V" => (186, 8),
    "java/lang/Object#notifyAll:()V" => (186, 9),
    "java/lang/Object#toString:()Ljava/lang/String;" => (186, 10),
    "java/lang/Object#wait:()V" => (186, 11),
    "java/lang/Object#wait:(J)V" => (186, 12),
    "java/lang/Object#wait:(JI)V" => (186, 13),
    "java/lang/OutOfMemoryError#<init>:(Ljava/lang/String;)V" => (187, 0),
    "java/lang/OutOfMemoryError#<init>:()V" => (187, 1),
    "java/lang/OwnershipTransferred#<init>:(Ljava/lang/Address;Ljava/lang/Address;)V" => (189, 0),
    "java/lang/Package#<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/ClassLoader;)V" => (190, 0),
    "java/lang/Package#getName:()Ljava/lang/String;" => (190, 1),
    "java/lang/Package#getImplementationTitle:()Ljava/lang/String;" => (190, 2),
    "java/lang/Package#getImplementationVendor:()Ljava/lang/String;" => (190, 3),
    "java/lang/Package#getImplementationVersion:()Ljava/lang/String;" => (190, 4),
    "java/lang/Package#getSpecificationTitle:()Ljava/lang/String;" => (190, 5),
    "java/lang/Package#getSpecificationVendor:()Ljava/lang/String;" => (190, 6),
    "java/lang/Package#getSpecificationVersion:()Ljava/lang/String;" => (190, 7),
    "java/lang/Package#isSealed:()Z" => (190, 8),
    "java/lang/Package#isSealed:(Ljava/lang/Object;)Z" => (190, 9),
    "java/lang/Paused#<init>:(Ljava/lang/Address;)V" => (191, 0),
    "java/lang/Readable#read:(Ljava/lang/Object;)I" => (192, 0),
    "java/lang/ReflectiveOperationException#<init>:()V" => (193, 0),
    "java/lang/RevertException#<init>:(Ljava/lang/String;)V" => (194, 0),
    "java/lang/Runtime#<init>:()V" => (195, 0),
    "java/lang/Runtime#getRuntime:()Ljava/lang/Runtime;" => (195, 1),
    "java/lang/Runtime#<clinit>:()V" => (195, 2),
    "java/lang/RuntimeException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (196, 0),
    "java/lang/RuntimeException#<init>:(Ljava/lang/String;)V" => (196, 1),
    "java/lang/RuntimeException#<init>:(Ljava/lang/Throwable;)V" => (196, 2),
    "java/lang/RuntimeException#<init>:()V" => (196, 3),
    "java/lang/SecurityException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (197, 0),
    "java/lang/SecurityException#<init>:(Ljava/lang/String;)V" => (197, 1),
    "java/lang/SecurityException#<init>:(Ljava/lang/Throwable;)V" => (197, 2),
    "java/lang/SecurityException#<init>:()V" => (197, 3),
    "java/lang/SecurityManager#<init>:()V" => (198, 0),
    "java/lang/SecurityManager#checkSecurityAccess:(Ljava/lang/String;)V" => (198, 1),
    "java/lang/Short#<init>:(S)V" => (199, 0),
    "java/lang/Short#valueOf:(S)Ljava/lang/Short;" => (199, 1),
    "java/lang/Short#compareTo:(Ljava/lang/Short;)I" => (199, 2),
    "java/lang/Short#equals:(Ljava/lang/Object;)Z" => (199, 3),
    "java/lang/Short#hashCode:()I" => (199, 4),
    "java/lang/Short#toString:()Ljava/lang/String;" => (199, 5),
    "java/lang/Short#toString:(SI)Ljava/lang/String;" => (199, 6),
    "java/lang/Short#toString:(S)Ljava/lang/String;" => (199, 7),
    "java/lang/Short#byteValue:()B" => (199, 8),
    "java/lang/Short#shortValue:()S" => (199, 9),
    "java/lang/Short#intValue:()I" => (199, 10),
    "java/lang/Short#longValue:()J" => (199, 11),
    "java/lang/Short#floatValue:()F" => (199, 12),
    "java/lang/Short#doubleValue:()D" => (199, 13),
    "java/lang/Short#compareTo:(Ljava/lang/Object;)I" => (199, 14),
    "java/lang/Short#<clinit>:()V" => (199, 15),
    "java/lang/StackOverflowError#<init>:(Ljava/lang/String;)V" => (200, 0),
    "java/lang/StackOverflowError#<init>:()V" => (200, 1),
    "java/lang/StackTraceElement#<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V" => (201, 0),
    "java/lang/StackTraceElement#hashCode:()I" => (201, 1),
    "java/lang/StackTraceElement#equals:(Ljava/lang/Object;)Z" => (201, 2),
    "java/lang/StackTraceElement#toString:()Ljava/lang/String;" => (201, 3),
    "java/lang/StackTraceElement#getClassName:()Ljava/lang/String;" => (201, 4),
    "java/lang/StackTraceElement#getMethodName:()Ljava/lang/String;" => (201, 5),
    "java/lang/StackTraceElement#getFileName:()Ljava/lang/String;" => (201, 6),
    "java/lang/StackTraceElement#getLineNumber:()I" => (201, 7),
    "java/lang/StackTraceElement#isNativeMethod:()Z" => (201, 8),
    "java/lang/StackTraceElement#<clinit>:()V" => (201, 9),
    "java/lang/String#<init>:()V" => (202, 0),
    "java/lang/String#<init>:([CIIZ)V" => (202, 1),
    "java/lang/String#<init>:([CII)V" => (202, 2),
    "java/lang/String#<init>:([C)V" => (202, 3),
    "java/lang/String#<init>:([BIILjava/lang/String;)V" => (202, 4),
    "java/lang/String#<init>:([BIIZ)V" => (202, 5),
    "java/lang/String#<init>:([BII)V" => (202, 6),
    "java/lang/String#<init>:([B)V" => (202, 7),
    "java/lang/String#<init>:(Ljava/lang/String;)V" => (202, 8),
    "java/lang/String#<init>:([BLjava/lang/String;)V" => (202, 9),
    "java/lang/String#<init>:([BIII)V" => (202, 10),
    "java/lang/String#<init>:(Ljava/lang/Object;IIZ)V" => (202, 11),
    "java/lang/String#toString:()Ljava/lang/String;" => (202, 12),
    "java/lang/String#length:()I" => (202, 13),
    "java/lang/String#hashCode:()I" => (202, 14),
    "java/lang/String#equals:(Ljava/lang/Object;)Z" => (202, 15),
    "java/lang/String#equalsIgnoreCase:(Ljava/lang/String;)Z" => (202, 16),
    "java/lang/String#compareTo:(Ljava/lang/String;)I" => (202, 17),
    "java/lang/String#compareToIgnoreCase:(Ljava/lang/String;)I" => (202, 18),
    "java/lang/String#trim:()Ljava/lang/String;" => (202, 19),
    "java/lang/String#toLowerCase:()Ljava/lang/String;" => (202, 20),
    "java/lang/String#toUpperCase:()Ljava/lang/String;" => (202, 21),
    "java/lang/String#indexOf:(I)I" => (202, 22),
    "java/lang/String#indexOf:(II)I" => (202, 23),
    "java/lang/String#lastIndexOf:(I)I" => (202, 24),
    "java/lang/String#indexOf:(Ljava/lang/String;)I" => (202, 25),
    "java/lang/String#indexOf:(Ljava/lang/String;I)I" => (202, 26),
    "java/lang/String#lastIndexOf:(Ljava/lang/String;)I" => (202, 27),
    "java/lang/String#lastIndexOf:(Ljava/lang/String;I)I" => (202, 28),
    "java/lang/String#replace:(CC)Ljava/lang/String;" => (202, 29),
    "java/lang/String#substring:(I)Ljava/lang/String;" => (202, 30),
    "java/lang/String#substring:(II)Ljava/lang/String;" => (202, 31),
    "java/lang/String#startsWith:(Ljava/lang/String;)Z" => (202, 32),
    "java/lang/String#startsWith:(Ljava/lang/String;I)Z" => (202, 33),
    "java/lang/String#endsWith:(Ljava/lang/String;)Z" => (202, 34),
    "java/lang/String#concat:(Ljava/lang/String;)Ljava/lang/String;" => (202, 35),
    "java/lang/String#getBytes:(II[BI)V" => (202, 36),
    "java/lang/String#getBytes:()[B" => (202, 37),
    "java/lang/String#getBytes:(Ljava/lang/String;)[B" => (202, 38),
    "java/lang/String#getChars:(II[CI)V" => (202, 39),
    "java/lang/String#toCharArray:()[C" => (202, 40),
    "java/lang/String#charAt:(I)C" => (202, 41),
    "java/lang/String#subSequence:(II)Ljava/lang/CharSequence;" => (202, 42),
    "java/lang/String#replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;" => (202, 43),
    "java/lang/String#infuse:(Ljava/lang/String;)Ljava/lang/String;" => (202, 44),
    "java/lang/String#intern:()Ljava/lang/String;" => (202, 45),
    "java/lang/String#valueOf:(Ljava/lang/Object;)Ljava/lang/String;" => (202, 46),
    "java/lang/String#valueOf:(Z)Ljava/lang/String;" => (202, 47),
    "java/lang/String#valueOf:(B)Ljava/lang/String;" => (202, 48),
    "java/lang/String#valueOf:(S)Ljava/lang/String;" => (202, 49),
    "java/lang/String#valueOf:(C)Ljava/lang/String;" => (202, 50),
    "java/lang/String#valueOf:(I)Ljava/lang/String;" => (202, 51),
    "java/lang/String#valueOf:(J)Ljava/lang/String;" => (202, 52),
    "java/lang/String#valueOf:([CII)Ljava/lang/String;" => (202, 53),
    "java/lang/String#valueOf:([C)Ljava/lang/String;" => (202, 54),
    "java/lang/String#lastIndexOf:(II)I" => (202, 55),
    "java/lang/String#regionMatches:(ILjava/lang/String;II)Z" => (202, 56),
    "java/lang/String#regionMatches:(ZILjava/lang/String;II)Z" => (202, 57),
    "java/lang/String#isEmpty:()Z" => (202, 58),
    "java/lang/String#contains:(Ljava/lang/CharSequence;)Z" => (202, 59),
    "java/lang/String#codePointAt:(I)I" => (202, 60),
    "java/lang/String#codePointCount:(II)I" => (202, 61),
    "java/lang/String#compareTo:(Ljava/lang/Object;)I" => (202, 62),
    "java/lang/String#<clinit>:()V" => (202, 63),
    "java/lang/StringBuffer#<init>:(Ljava/lang/String;)V" => (203, 0),
    "java/lang/StringBuffer#<init>:(I)V" => (203, 1),
    "java/lang/StringBuffer#<init>:()V" => (203, 2),
    "java/lang/StringBuffer#append:(Ljava/lang/String;)Ljava/lang/StringBuffer;" => (203, 3),
    "java/lang/StringBuffer#append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;" => (203, 4),
    "java/lang/StringBuffer#append:(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;" => (203, 5),
    "java/lang/StringBuffer#append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;" => (203, 6),
    "java/lang/StringBuffer#append:(C)Ljava/lang/StringBuffer;" => (203, 7),
    "java/lang/StringBuffer#append:(Z)Ljava/lang/StringBuffer;" => (203, 8),
    "java/lang/StringBuffer#append:(I)Ljava/lang/StringBuffer;" => (203, 9),
    "java/lang/StringBuffer#append:(J)Ljava/lang/StringBuffer;" => (203, 10),
    "java/lang/StringBuffer#append:(F)Ljava/lang/StringBuffer;" => (203, 11),
    "java/lang/StringBuffer#append:(D)Ljava/lang/StringBuffer;" => (203, 12),
    "java/lang/StringBuffer#append:([CII)Ljava/lang/StringBuffer;" => (203, 13),
    "java/lang/StringBuffer#append:([C)Ljava/lang/StringBuffer;" => (203, 14),
    "java/lang/StringBuffer#indexOf:(Ljava/lang/String;)I" => (203, 15),
    "java/lang/StringBuffer#indexOf:(Ljava/lang/String;I)I" => (203, 16),
    "java/lang/StringBuffer#insert:(ILjava/lang/String;)Ljava/lang/StringBuffer;" => (203, 17),
    "java/lang/StringBuffer#insert:(IC)Ljava/lang/StringBuffer;" => (203, 18),
    "java/lang/StringBuffer#insert:(II)Ljava/lang/StringBuffer;" => (203, 19),
    "java/lang/StringBuffer#delete:(II)Ljava/lang/StringBuffer;" => (203, 20),
    "java/lang/StringBuffer#deleteCharAt:(I)Ljava/lang/StringBuffer;" => (203, 21),
    "java/lang/StringBuffer#charAt:(I)C" => (203, 22),
    "java/lang/StringBuffer#length:()I" => (203, 23),
    "java/lang/StringBuffer#replace:(IILjava/lang/String;)Ljava/lang/StringBuffer;" => (203, 24),
    "java/lang/StringBuffer#setLength:(I)V" => (203, 25),
    "java/lang/StringBuffer#setCharAt:(IC)V" => (203, 26),
    "java/lang/StringBuffer#getChars:(II[CI)V" => (203, 27),
    "java/lang/StringBuffer#toString:()Ljava/lang/String;" => (203, 28),
    "java/lang/StringBuffer#substring:(II)Ljava/lang/String;" => (203, 29),
    "java/lang/StringBuffer#subSequence:(II)Ljava/lang/CharSequence;" => (203, 30),
    "java/lang/StringBuilder#<init>:(Ljava/lang/String;)V" => (204, 0),
    "java/lang/StringBuilder#<init>:(I)V" => (204, 1),
    "java/lang/StringBuilder#<init>:()V" => (204, 2),
    "java/lang/StringBuilder#flush:()V" => (204, 3),
    "java/lang/StringBuilder#append:(Ljava/lang/String;)Ljava/lang/StringBuilder;" => (204, 4),
    "java/lang/StringBuilder#append:(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;" => (204, 5),
    "java/lang/StringBuilder#append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;" => (204, 6),
    "java/lang/StringBuilder#append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;" => (204, 7),
    "java/lang/StringBuilder#append:([CII)Ljava/lang/StringBuilder;" => (204, 8),
    "java/lang/StringBuilder#append:([C)Ljava/lang/StringBuilder;" => (204, 9),
    "java/lang/StringBuilder#append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;" => (204, 10),
    "java/lang/StringBuilder#append:(C)Ljava/lang/StringBuilder;" => (204, 11),
    "java/lang/StringBuilder#append:(Z)Ljava/lang/StringBuilder;" => (204, 12),
    "java/lang/StringBuilder#append:(I)Ljava/lang/StringBuilder;" => (204, 13),
    "java/lang/StringBuilder#append:(J)Ljava/lang/StringBuilder;" => (204, 14),
    "java/lang/StringBuilder#append:(F)Ljava/lang/StringBuilder;" => (204, 15),
    "java/lang/StringBuilder#append:(D)Ljava/lang/StringBuilder;" => (204, 16),
    "java/lang/StringBuilder#charAt:(I)C" => (204, 17),
    "java/lang/StringBuilder#insert:(ILjava/lang/String;)Ljava/lang/StringBuilder;" => (204, 18),
    "java/lang/StringBuilder#insert:(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;" => (204, 19),
    "java/lang/StringBuilder#insert:(IC)Ljava/lang/StringBuilder;" => (204, 20),
    "java/lang/StringBuilder#insert:(II)Ljava/lang/StringBuilder;" => (204, 21),
    "java/lang/StringBuilder#delete:(II)Ljava/lang/StringBuilder;" => (204, 22),
    "java/lang/StringBuilder#deleteCharAt:(I)Ljava/lang/StringBuilder;" => (204, 23),
    "java/lang/StringBuilder#replace:(IILjava/lang/String;)Ljava/lang/StringBuilder;" => (204, 24),
    "java/lang/StringBuilder#indexOf:(Ljava/lang/String;)I" => (204, 25),
    "java/lang/StringBuilder#indexOf:(Ljava/lang/String;I)I" => (204, 26),
    "java/lang/StringBuilder#lastIndexOf:(Ljava/lang/String;)I" => (204, 27),
    "java/lang/StringBuilder#lastIndexOf:(Ljava/lang/String;I)I" => (204, 28),
    "java/lang/StringBuilder#length:()I" => (204, 29),
    "java/lang/StringBuilder#setLength:(I)V" => (204, 30),
    "java/lang/StringBuilder#getChars:(II[CI)V" => (204, 31),
    "java/lang/StringBuilder#toString:()Ljava/lang/String;" => (204, 32),
    "java/lang/StringBuilder#substring:(I)Ljava/lang/String;" => (204, 33),
    "java/lang/StringBuilder#substring:(II)Ljava/lang/String;" => (204, 34),
    "java/lang/StringBuilder#subSequence:(II)Ljava/lang/CharSequence;" => (204, 35),
    "java/lang/StringBuilder#setCharAt:(IC)V" => (204, 36),
    "java/lang/StringBuilder#ensureCapacity:(I)V" => (204, 37),
    "java/lang/StringBuilder#append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;" => (204, 38),
    "java/lang/StringBuilder#append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;" => (204, 39),
    "java/lang/StringBuilder#append:(C)Ljava/lang/Appendable;" => (204, 40),
    "java/lang/StringBuilderCell#<init>:(Ljava/lang/String;Ljava/lang/StringBuilderCell;)V" => (205, 0),
    "java/lang/StringComparator#<init>:()V" => (206, 0),
    "java/lang/StringComparator#compare:(Ljava/lang/String;Ljava/lang/String;)I" => (206, 1),
    "java/lang/StringComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I" => (206, 2),
    "java/lang/StringIndexOutOfBoundsException#<init>:(I)V" => (207, 0),
    "java/lang/StringIndexOutOfBoundsException#<init>:(Ljava/lang/String;)V" => (207, 1),
    "java/lang/StringIndexOutOfBoundsException#<init>:()V" => (207, 2),
    "java/lang/StringUtil#<init>:()V" => (208, 0),
    "java/lang/StringUtil#fromString:(Ljava/lang/String;II)[I" => (208, 1),
    "java/lang/StringUtil#muladd:([III)V" => (208, 2),
    "java/lang/StringUtil#toString:([II)Ljava/lang/String;" => (208, 3),
    "java/lang/StringUtil#<clinit>:()V" => (208, 4),
    "java/lang/SuppressWarnings#value:()[Ljava/lang/String;" => (209, 0),
    "java/lang/System#<init>:()V" => (210, 0),
    "java/lang/System#arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V" => (210, 1),
    "java/lang/System#getProperty:(Ljava/lang/String;)Ljava/lang/String;" => (210, 2),
    "java/lang/System#getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" => (210, 3),
    "java/lang/System#currentTimeMillis:()J" => (210, 4),
    "java/lang/System#identityHashCode:(Ljava/lang/Object;)I" => (210, 5),
    "java/lang/System#nanoTime:()J" => (210, 6),
    "java/lang/System#load:(Ljava/lang/String;)V" => (210, 7),
    "java/lang/System#loadLibrary:(Ljava/lang/String;)V" => (210, 8),
    "java/lang/System#gc:()V" => (210, 9),
    "java/lang/System#exit:(I)V" => (210, 10),
    "java/lang/System#setOut0:(Ljava/io/SystemPrintStream;)V" => (210, 11),
    "java/lang/System#setErr0:(Ljava/io/SystemPrintStream;)V" => (210, 12),
    "java/lang/System#setIn0:(Ljava/io/SystemPrintStream;)V" => (210, 13),
    "java/lang/System#initSystemOut:()V" => (210, 14),
    "java/lang/System#<clinit>:()V" => (210, 15),
    "java/lang/SystemNanoTime#<init>:()V" => (211, 0),
    "java/lang/SystemNanoTime#<clinit>:()V" => (211, 1),
    "java/lang/ThreadDeath#<init>:()V" => (212, 0),
    "java/lang/Throwable#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (213, 0),
    "java/lang/Throwable#<init>:(Ljava/lang/String;)V" => (213, 1),
    "java/lang/Throwable#<init>:(Ljava/lang/Throwable;)V" => (213, 2),
    "java/lang/Throwable#<init>:()V" => (213, 3),
    "java/lang/Throwable#getCause:()Ljava/lang/Throwable;" => (213, 4),
    "java/lang/Throwable#initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;" => (213, 5),
    "java/lang/Throwable#getMessage:()Ljava/lang/String;" => (213, 6),
    "java/lang/Throwable#getLocalizedMessage:()Ljava/lang/String;" => (213, 7),
    "java/lang/Throwable#toString:()Ljava/lang/String;" => (213, 8),
    "java/lang/Throwable#trace:(I)Ljava/lang/Object;" => (213, 9),
    "java/lang/Throwable#resolveTrace:(Ljava/lang/Object;)[Ljava/lang/StackTraceElement;" => (213, 10),
    "java/lang/Throwable#resolveTrace:()[Ljava/lang/StackTraceElement;" => (213, 11),
    "java/lang/Throwable#getStackTrace:()[Ljava/lang/StackTraceElement;" => (213, 12),
    "java/lang/Throwable#setStackTrace:([Ljava/lang/StackTraceElement;)V" => (213, 13),
    "java/lang/Throwable#printStackTrace:()V" => (213, 14),
    "java/lang/Throwable#printStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/String;)V" => (213, 15),
    "java/lang/Throwable#fillInStackTrace:()Ljava/lang/Throwable;" => (213, 16),
    "java/lang/Throwable#addSuppressed:(Ljava/lang/Throwable;)V" => (213, 17),
    "java/lang/Transfer#<init>:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V" => (214, 0),
    "java/lang/TypeNotPresentException#<init>:(Ljava/lang/String;)V" => (215, 0),
    "java/lang/TypeNotPresentException#<init>:()V" => (215, 1),
    "java/lang/Uint#<init>:([I)V" => (216, 0),
    "java/lang/Uint#<init>:([B)V" => (216, 1),
    "java/lang/Uint#<init>:(Ljava/lang/Uint128;)V" => (216, 2),
    "java/lang/Uint#<init>:(Ljava/lang/String;)V" => (216, 3),
    "java/lang/Uint#<init>:(Ljava/lang/String;I)V" => (216, 4),
    "java/lang/Uint#<init>:(Ljava/math/BigInteger;)V" => (216, 5),
    "java/lang/Uint#<init>:(J)V" => (216, 6),
    "java/lang/Uint#not:()Ljava/lang/Uint;" => (216, 7),
    "java/lang/Uint#and:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 8),
    "java/lang/Uint#or:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 9),
    "java/lang/Uint#xor:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 10),
    "java/lang/Uint#setBit:(I)Ljava/lang/Uint;" => (216, 11),
    "java/lang/Uint#clearBit:(I)Ljava/lang/Uint;" => (216, 12),
    "java/lang/Uint#flipBit:(I)Ljava/lang/Uint;" => (216, 13),
    "java/lang/Uint#shiftLeft:(I)Ljava/lang/Uint;" => (216, 14),
    "java/lang/Uint#shiftRight:(I)Ljava/lang/Uint;" => (216, 15),
    "java/lang/Uint#inc:()Ljava/lang/Uint;" => (216, 16),
    "java/lang/Uint#dec:()Ljava/lang/Uint;" => (216, 17),
    "java/lang/Uint#add:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 18),
    "java/lang/Uint#addmod:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 19),
    "java/lang/Uint#sub:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 20),
    "java/lang/Uint#mul:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 21),
    "java/lang/Uint#mulmod:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 22),
    "java/lang/Uint#pow:(I)Ljava/lang/Uint;" => (216, 23),
    "java/lang/Uint#div:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 24),
    "java/lang/Uint#mod:(Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 25),
    "java/lang/Uint#divmod:(Ljava/lang/Uint;)[Ljava/lang/Uint;" => (216, 26),
    "java/lang/Uint#add:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 27),
    "java/lang/Uint#sub:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 28),
    "java/lang/Uint#mul:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 29),
    "java/lang/Uint#div:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 30),
    "java/lang/Uint#mod:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;" => (216, 31),
    "java/lang/Uint#equals:(Ljava/lang/Object;)Z" => (216, 32),
    "java/lang/Uint#flipBit:(I)Ljava/lang/UintType;" => (216, 33),
    "java/lang/Uint#clearBit:(I)Ljava/lang/UintType;" => (216, 34),
    "java/lang/Uint#setBit:(I)Ljava/lang/UintType;" => (216, 35),
    "java/lang/Uint#shiftRight:(I)Ljava/lang/UintType;" => (216, 36),
    "java/lang/Uint#shiftLeft:(I)Ljava/lang/UintType;" => (216, 37),
    "java/lang/Uint#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 38),
    "java/lang/Uint#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 39),
    "java/lang/Uint#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 40),
    "java/lang/Uint#dec:()Ljava/lang/UintType;" => (216, 41),
    "java/lang/Uint#inc:()Ljava/lang/UintType;" => (216, 42),
    "java/lang/Uint#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 43),
    "java/lang/Uint#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 44),
    "java/lang/Uint#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 45),
    "java/lang/Uint#not:()Ljava/lang/UintType;" => (216, 46),
    "java/lang/Uint#pow:(I)Ljava/lang/UintType;" => (216, 47),
    "java/lang/Uint#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 48),
    "java/lang/Uint#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 49),
    "java/lang/Uint#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 50),
    "java/lang/Uint#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (216, 51),
    "java/lang/Uint#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (216, 52),
    "java/lang/Uint#<clinit>:()V" => (216, 53),
    "java/lang/Uint128#<init>:([I)V" => (217, 0),
    "java/lang/Uint128#<init>:([B)V" => (217, 1),
    "java/lang/Uint128#<init>:(Ljava/lang/Uint256;)V" => (217, 2),
    "java/lang/Uint128#<init>:(Ljava/lang/String;)V" => (217, 3),
    "java/lang/Uint128#<init>:(Ljava/lang/String;I)V" => (217, 4),
    "java/lang/Uint128#<init>:(Ljava/math/BigInteger;)V" => (217, 5),
    "java/lang/Uint128#<init>:(J)V" => (217, 6),
    "java/lang/Uint128#not:()Ljava/lang/Uint128;" => (217, 7),
    "java/lang/Uint128#and:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 8),
    "java/lang/Uint128#or:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 9),
    "java/lang/Uint128#xor:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 10),
    "java/lang/Uint128#setBit:(I)Ljava/lang/Uint128;" => (217, 11),
    "java/lang/Uint128#clearBit:(I)Ljava/lang/Uint128;" => (217, 12),
    "java/lang/Uint128#flipBit:(I)Ljava/lang/Uint128;" => (217, 13),
    "java/lang/Uint128#shiftLeft:(I)Ljava/lang/Uint128;" => (217, 14),
    "java/lang/Uint128#shiftRight:(I)Ljava/lang/Uint128;" => (217, 15),
    "java/lang/Uint128#inc:()Ljava/lang/Uint128;" => (217, 16),
    "java/lang/Uint128#dec:()Ljava/lang/Uint128;" => (217, 17),
    "java/lang/Uint128#add:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 18),
    "java/lang/Uint128#addmod:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 19),
    "java/lang/Uint128#sub:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 20),
    "java/lang/Uint128#mul:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 21),
    "java/lang/Uint128#mulmod:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 22),
    "java/lang/Uint128#pow:(I)Ljava/lang/Uint128;" => (217, 23),
    "java/lang/Uint128#div:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 24),
    "java/lang/Uint128#mod:(Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 25),
    "java/lang/Uint128#divmod:(Ljava/lang/Uint128;)[Ljava/lang/Uint128;" => (217, 26),
    "java/lang/Uint128#add:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 27),
    "java/lang/Uint128#sub:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 28),
    "java/lang/Uint128#mul:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 29),
    "java/lang/Uint128#div:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 30),
    "java/lang/Uint128#mod:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;" => (217, 31),
    "java/lang/Uint128#equals:(Ljava/lang/Object;)Z" => (217, 32),
    "java/lang/Uint128#flipBit:(I)Ljava/lang/UintType;" => (217, 33),
    "java/lang/Uint128#clearBit:(I)Ljava/lang/UintType;" => (217, 34),
    "java/lang/Uint128#setBit:(I)Ljava/lang/UintType;" => (217, 35),
    "java/lang/Uint128#shiftRight:(I)Ljava/lang/UintType;" => (217, 36),
    "java/lang/Uint128#shiftLeft:(I)Ljava/lang/UintType;" => (217, 37),
    "java/lang/Uint128#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 38),
    "java/lang/Uint128#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 39),
    "java/lang/Uint128#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 40),
    "java/lang/Uint128#dec:()Ljava/lang/UintType;" => (217, 41),
    "java/lang/Uint128#inc:()Ljava/lang/UintType;" => (217, 42),
    "java/lang/Uint128#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 43),
    "java/lang/Uint128#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 44),
    "java/lang/Uint128#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 45),
    "java/lang/Uint128#not:()Ljava/lang/UintType;" => (217, 46),
    "java/lang/Uint128#pow:(I)Ljava/lang/UintType;" => (217, 47),
    "java/lang/Uint128#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 48),
    "java/lang/Uint128#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 49),
    "java/lang/Uint128#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 50),
    "java/lang/Uint128#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (217, 51),
    "java/lang/Uint128#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (217, 52),
    "java/lang/Uint128#<clinit>:()V" => (217, 53),
    "java/lang/Uint16#<init>:([I)V" => (218, 0),
    "java/lang/Uint16#<init>:([B)V" => (218, 1),
    "java/lang/Uint16#<init>:(Ljava/lang/String;)V" => (218, 2),
    "java/lang/Uint16#<init>:(Ljava/lang/String;I)V" => (218, 3),
    "java/lang/Uint16#<init>:(Ljava/math/BigInteger;)V" => (218, 4),
    "java/lang/Uint16#<init>:(J)V" => (218, 5),
    "java/lang/Uint16#<init>:(I)V" => (218, 6),
    "java/lang/Uint16#<init>:(S)V" => (218, 7),
    "java/lang/Uint16#not:()Ljava/lang/Uint16;" => (218, 8),
    "java/lang/Uint16#and:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 9),
    "java/lang/Uint16#or:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 10),
    "java/lang/Uint16#xor:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 11),
    "java/lang/Uint16#setBit:(I)Ljava/lang/Uint16;" => (218, 12),
    "java/lang/Uint16#clearBit:(I)Ljava/lang/Uint16;" => (218, 13),
    "java/lang/Uint16#flipBit:(I)Ljava/lang/Uint16;" => (218, 14),
    "java/lang/Uint16#shiftLeft:(I)Ljava/lang/Uint16;" => (218, 15),
    "java/lang/Uint16#shiftRight:(I)Ljava/lang/Uint16;" => (218, 16),
    "java/lang/Uint16#inc:()Ljava/lang/Uint16;" => (218, 17),
    "java/lang/Uint16#dec:()Ljava/lang/Uint16;" => (218, 18),
    "java/lang/Uint16#add:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 19),
    "java/lang/Uint16#addmod:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 20),
    "java/lang/Uint16#sub:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 21),
    "java/lang/Uint16#mul:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 22),
    "java/lang/Uint16#mulmod:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 23),
    "java/lang/Uint16#pow:(I)Ljava/lang/Uint16;" => (218, 24),
    "java/lang/Uint16#div:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 25),
    "java/lang/Uint16#mod:(Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 26),
    "java/lang/Uint16#divmod:(Ljava/lang/Uint16;)[Ljava/lang/Uint16;" => (218, 27),
    "java/lang/Uint16#add:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 28),
    "java/lang/Uint16#sub:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 29),
    "java/lang/Uint16#mul:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 30),
    "java/lang/Uint16#div:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 31),
    "java/lang/Uint16#mod:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;" => (218, 32),
    "java/lang/Uint16#equals:(Ljava/lang/Object;)Z" => (218, 33),
    "java/lang/Uint16#flipBit:(I)Ljava/lang/UintType;" => (218, 34),
    "java/lang/Uint16#clearBit:(I)Ljava/lang/UintType;" => (218, 35),
    "java/lang/Uint16#setBit:(I)Ljava/lang/UintType;" => (218, 36),
    "java/lang/Uint16#shiftRight:(I)Ljava/lang/UintType;" => (218, 37),
    "java/lang/Uint16#shiftLeft:(I)Ljava/lang/UintType;" => (218, 38),
    "java/lang/Uint16#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 39),
    "java/lang/Uint16#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 40),
    "java/lang/Uint16#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 41),
    "java/lang/Uint16#dec:()Ljava/lang/UintType;" => (218, 42),
    "java/lang/Uint16#inc:()Ljava/lang/UintType;" => (218, 43),
    "java/lang/Uint16#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 44),
    "java/lang/Uint16#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 45),
    "java/lang/Uint16#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 46),
    "java/lang/Uint16#not:()Ljava/lang/UintType;" => (218, 47),
    "java/lang/Uint16#pow:(I)Ljava/lang/UintType;" => (218, 48),
    "java/lang/Uint16#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 49),
    "java/lang/Uint16#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 50),
    "java/lang/Uint16#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 51),
    "java/lang/Uint16#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (218, 52),
    "java/lang/Uint16#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (218, 53),
    "java/lang/Uint16#<clinit>:()V" => (218, 54),
    "java/lang/Uint160#<init>:([I)V" => (219, 0),
    "java/lang/Uint160#<init>:([B)V" => (219, 1),
    "java/lang/Uint160#<init>:(Ljava/lang/Uint128;)V" => (219, 2),
    "java/lang/Uint160#<init>:(Ljava/lang/String;)V" => (219, 3),
    "java/lang/Uint160#<init>:(Ljava/lang/String;I)V" => (219, 4),
    "java/lang/Uint160#<init>:(Ljava/math/BigInteger;)V" => (219, 5),
    "java/lang/Uint160#<init>:(J)V" => (219, 6),
    "java/lang/Uint160#not:()Ljava/lang/Uint160;" => (219, 7),
    "java/lang/Uint160#and:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 8),
    "java/lang/Uint160#or:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 9),
    "java/lang/Uint160#xor:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 10),
    "java/lang/Uint160#setBit:(I)Ljava/lang/Uint160;" => (219, 11),
    "java/lang/Uint160#clearBit:(I)Ljava/lang/Uint160;" => (219, 12),
    "java/lang/Uint160#flipBit:(I)Ljava/lang/Uint160;" => (219, 13),
    "java/lang/Uint160#shiftLeft:(I)Ljava/lang/Uint160;" => (219, 14),
    "java/lang/Uint160#shiftRight:(I)Ljava/lang/Uint160;" => (219, 15),
    "java/lang/Uint160#inc:()Ljava/lang/Uint160;" => (219, 16),
    "java/lang/Uint160#dec:()Ljava/lang/Uint160;" => (219, 17),
    "java/lang/Uint160#add:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 18),
    "java/lang/Uint160#addmod:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 19),
    "java/lang/Uint160#sub:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 20),
    "java/lang/Uint160#mul:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 21),
    "java/lang/Uint160#mulmod:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 22),
    "java/lang/Uint160#pow:(I)Ljava/lang/Uint160;" => (219, 23),
    "java/lang/Uint160#div:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 24),
    "java/lang/Uint160#mod:(Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 25),
    "java/lang/Uint160#divmod:(Ljava/lang/Uint160;)[Ljava/lang/Uint160;" => (219, 26),
    "java/lang/Uint160#add:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 27),
    "java/lang/Uint160#sub:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 28),
    "java/lang/Uint160#mul:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 29),
    "java/lang/Uint160#div:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 30),
    "java/lang/Uint160#mod:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;" => (219, 31),
    "java/lang/Uint160#equals:(Ljava/lang/Object;)Z" => (219, 32),
    "java/lang/Uint160#flipBit:(I)Ljava/lang/UintType;" => (219, 33),
    "java/lang/Uint160#clearBit:(I)Ljava/lang/UintType;" => (219, 34),
    "java/lang/Uint160#setBit:(I)Ljava/lang/UintType;" => (219, 35),
    "java/lang/Uint160#shiftRight:(I)Ljava/lang/UintType;" => (219, 36),
    "java/lang/Uint160#shiftLeft:(I)Ljava/lang/UintType;" => (219, 37),
    "java/lang/Uint160#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 38),
    "java/lang/Uint160#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 39),
    "java/lang/Uint160#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 40),
    "java/lang/Uint160#dec:()Ljava/lang/UintType;" => (219, 41),
    "java/lang/Uint160#inc:()Ljava/lang/UintType;" => (219, 42),
    "java/lang/Uint160#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 43),
    "java/lang/Uint160#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 44),
    "java/lang/Uint160#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 45),
    "java/lang/Uint160#not:()Ljava/lang/UintType;" => (219, 46),
    "java/lang/Uint160#pow:(I)Ljava/lang/UintType;" => (219, 47),
    "java/lang/Uint160#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 48),
    "java/lang/Uint160#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 49),
    "java/lang/Uint160#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 50),
    "java/lang/Uint160#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (219, 51),
    "java/lang/Uint160#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (219, 52),
    "java/lang/Uint160#<clinit>:()V" => (219, 53),
    "java/lang/Uint256#<init>:([I)V" => (220, 0),
    "java/lang/Uint256#<init>:([B)V" => (220, 1),
    "java/lang/Uint256#<init>:(Ljava/lang/Uint128;)V" => (220, 2),
    "java/lang/Uint256#<init>:(Ljava/lang/String;)V" => (220, 3),
    "java/lang/Uint256#<init>:(Ljava/lang/String;I)V" => (220, 4),
    "java/lang/Uint256#<init>:(Ljava/math/BigInteger;)V" => (220, 5),
    "java/lang/Uint256#<init>:(J)V" => (220, 6),
    "java/lang/Uint256#not:()Ljava/lang/Uint256;" => (220, 7),
    "java/lang/Uint256#and:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 8),
    "java/lang/Uint256#or:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 9),
    "java/lang/Uint256#xor:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 10),
    "java/lang/Uint256#setBit:(I)Ljava/lang/Uint256;" => (220, 11),
    "java/lang/Uint256#clearBit:(I)Ljava/lang/Uint256;" => (220, 12),
    "java/lang/Uint256#flipBit:(I)Ljava/lang/Uint256;" => (220, 13),
    "java/lang/Uint256#shiftLeft:(I)Ljava/lang/Uint256;" => (220, 14),
    "java/lang/Uint256#shiftRight:(I)Ljava/lang/Uint256;" => (220, 15),
    "java/lang/Uint256#inc:()Ljava/lang/Uint256;" => (220, 16),
    "java/lang/Uint256#dec:()Ljava/lang/Uint256;" => (220, 17),
    "java/lang/Uint256#add:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 18),
    "java/lang/Uint256#addmod:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 19),
    "java/lang/Uint256#sub:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 20),
    "java/lang/Uint256#mul:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 21),
    "java/lang/Uint256#mulmod:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 22),
    "java/lang/Uint256#pow:(I)Ljava/lang/Uint256;" => (220, 23),
    "java/lang/Uint256#div:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 24),
    "java/lang/Uint256#mod:(Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 25),
    "java/lang/Uint256#divmod:(Ljava/lang/Uint256;)[Ljava/lang/Uint256;" => (220, 26),
    "java/lang/Uint256#add:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 27),
    "java/lang/Uint256#sub:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 28),
    "java/lang/Uint256#mul:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 29),
    "java/lang/Uint256#div:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 30),
    "java/lang/Uint256#mod:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;" => (220, 31),
    "java/lang/Uint256#equals:(Ljava/lang/Object;)Z" => (220, 32),
    "java/lang/Uint256#flipBit:(I)Ljava/lang/UintType;" => (220, 33),
    "java/lang/Uint256#clearBit:(I)Ljava/lang/UintType;" => (220, 34),
    "java/lang/Uint256#setBit:(I)Ljava/lang/UintType;" => (220, 35),
    "java/lang/Uint256#shiftRight:(I)Ljava/lang/UintType;" => (220, 36),
    "java/lang/Uint256#shiftLeft:(I)Ljava/lang/UintType;" => (220, 37),
    "java/lang/Uint256#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 38),
    "java/lang/Uint256#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 39),
    "java/lang/Uint256#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 40),
    "java/lang/Uint256#dec:()Ljava/lang/UintType;" => (220, 41),
    "java/lang/Uint256#inc:()Ljava/lang/UintType;" => (220, 42),
    "java/lang/Uint256#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 43),
    "java/lang/Uint256#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 44),
    "java/lang/Uint256#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 45),
    "java/lang/Uint256#not:()Ljava/lang/UintType;" => (220, 46),
    "java/lang/Uint256#pow:(I)Ljava/lang/UintType;" => (220, 47),
    "java/lang/Uint256#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 48),
    "java/lang/Uint256#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 49),
    "java/lang/Uint256#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 50),
    "java/lang/Uint256#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (220, 51),
    "java/lang/Uint256#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (220, 52),
    "java/lang/Uint256#<clinit>:()V" => (220, 53),
    "java/lang/Uint32#<init>:([I)V" => (221, 0),
    "java/lang/Uint32#<init>:([B)V" => (221, 1),
    "java/lang/Uint32#<init>:(Ljava/lang/String;)V" => (221, 2),
    "java/lang/Uint32#<init>:(Ljava/lang/String;I)V" => (221, 3),
    "java/lang/Uint32#<init>:(Ljava/math/BigInteger;)V" => (221, 4),
    "java/lang/Uint32#<init>:(J)V" => (221, 5),
    "java/lang/Uint32#<init>:(I)V" => (221, 6),
    "java/lang/Uint32#not:()Ljava/lang/Uint32;" => (221, 7),
    "java/lang/Uint32#and:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 8),
    "java/lang/Uint32#or:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 9),
    "java/lang/Uint32#xor:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 10),
    "java/lang/Uint32#setBit:(I)Ljava/lang/Uint32;" => (221, 11),
    "java/lang/Uint32#clearBit:(I)Ljava/lang/Uint32;" => (221, 12),
    "java/lang/Uint32#flipBit:(I)Ljava/lang/Uint32;" => (221, 13),
    "java/lang/Uint32#shiftLeft:(I)Ljava/lang/Uint32;" => (221, 14),
    "java/lang/Uint32#shiftRight:(I)Ljava/lang/Uint32;" => (221, 15),
    "java/lang/Uint32#inc:()Ljava/lang/Uint32;" => (221, 16),
    "java/lang/Uint32#dec:()Ljava/lang/Uint32;" => (221, 17),
    "java/lang/Uint32#add:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 18),
    "java/lang/Uint32#addmod:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 19),
    "java/lang/Uint32#sub:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 20),
    "java/lang/Uint32#mul:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 21),
    "java/lang/Uint32#mulmod:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 22),
    "java/lang/Uint32#pow:(I)Ljava/lang/Uint32;" => (221, 23),
    "java/lang/Uint32#div:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 24),
    "java/lang/Uint32#mod:(Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 25),
    "java/lang/Uint32#divmod:(Ljava/lang/Uint32;)[Ljava/lang/Uint32;" => (221, 26),
    "java/lang/Uint32#add:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 27),
    "java/lang/Uint32#sub:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 28),
    "java/lang/Uint32#mul:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 29),
    "java/lang/Uint32#div:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 30),
    "java/lang/Uint32#mod:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;" => (221, 31),
    "java/lang/Uint32#equals:(Ljava/lang/Object;)Z" => (221, 32),
    "java/lang/Uint32#flipBit:(I)Ljava/lang/UintType;" => (221, 33),
    "java/lang/Uint32#clearBit:(I)Ljava/lang/UintType;" => (221, 34),
    "java/lang/Uint32#setBit:(I)Ljava/lang/UintType;" => (221, 35),
    "java/lang/Uint32#shiftRight:(I)Ljava/lang/UintType;" => (221, 36),
    "java/lang/Uint32#shiftLeft:(I)Ljava/lang/UintType;" => (221, 37),
    "java/lang/Uint32#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 38),
    "java/lang/Uint32#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 39),
    "java/lang/Uint32#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 40),
    "java/lang/Uint32#dec:()Ljava/lang/UintType;" => (221, 41),
    "java/lang/Uint32#inc:()Ljava/lang/UintType;" => (221, 42),
    "java/lang/Uint32#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 43),
    "java/lang/Uint32#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 44),
    "java/lang/Uint32#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 45),
    "java/lang/Uint32#not:()Ljava/lang/UintType;" => (221, 46),
    "java/lang/Uint32#pow:(I)Ljava/lang/UintType;" => (221, 47),
    "java/lang/Uint32#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 48),
    "java/lang/Uint32#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 49),
    "java/lang/Uint32#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 50),
    "java/lang/Uint32#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (221, 51),
    "java/lang/Uint32#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (221, 52),
    "java/lang/Uint32#<clinit>:()V" => (221, 53),
    "java/lang/Uint64#<init>:([I)V" => (222, 0),
    "java/lang/Uint64#<init>:([B)V" => (222, 1),
    "java/lang/Uint64#<init>:(Ljava/lang/String;)V" => (222, 2),
    "java/lang/Uint64#<init>:(Ljava/lang/String;I)V" => (222, 3),
    "java/lang/Uint64#<init>:(Ljava/math/BigInteger;)V" => (222, 4),
    "java/lang/Uint64#<init>:(J)V" => (222, 5),
    "java/lang/Uint64#not:()Ljava/lang/Uint64;" => (222, 6),
    "java/lang/Uint64#and:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 7),
    "java/lang/Uint64#or:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 8),
    "java/lang/Uint64#xor:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 9),
    "java/lang/Uint64#setBit:(I)Ljava/lang/Uint64;" => (222, 10),
    "java/lang/Uint64#clearBit:(I)Ljava/lang/Uint64;" => (222, 11),
    "java/lang/Uint64#flipBit:(I)Ljava/lang/Uint64;" => (222, 12),
    "java/lang/Uint64#shiftLeft:(I)Ljava/lang/Uint64;" => (222, 13),
    "java/lang/Uint64#shiftRight:(I)Ljava/lang/Uint64;" => (222, 14),
    "java/lang/Uint64#inc:()Ljava/lang/Uint64;" => (222, 15),
    "java/lang/Uint64#dec:()Ljava/lang/Uint64;" => (222, 16),
    "java/lang/Uint64#add:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 17),
    "java/lang/Uint64#addmod:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 18),
    "java/lang/Uint64#sub:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 19),
    "java/lang/Uint64#mul:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 20),
    "java/lang/Uint64#mulmod:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 21),
    "java/lang/Uint64#pow:(I)Ljava/lang/Uint64;" => (222, 22),
    "java/lang/Uint64#div:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 23),
    "java/lang/Uint64#mod:(Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 24),
    "java/lang/Uint64#divmod:(Ljava/lang/Uint64;)[Ljava/lang/Uint64;" => (222, 25),
    "java/lang/Uint64#add:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 26),
    "java/lang/Uint64#sub:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 27),
    "java/lang/Uint64#mul:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 28),
    "java/lang/Uint64#div:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 29),
    "java/lang/Uint64#mod:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;" => (222, 30),
    "java/lang/Uint64#equals:(Ljava/lang/Object;)Z" => (222, 31),
    "java/lang/Uint64#flipBit:(I)Ljava/lang/UintType;" => (222, 32),
    "java/lang/Uint64#clearBit:(I)Ljava/lang/UintType;" => (222, 33),
    "java/lang/Uint64#setBit:(I)Ljava/lang/UintType;" => (222, 34),
    "java/lang/Uint64#shiftRight:(I)Ljava/lang/UintType;" => (222, 35),
    "java/lang/Uint64#shiftLeft:(I)Ljava/lang/UintType;" => (222, 36),
    "java/lang/Uint64#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 37),
    "java/lang/Uint64#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 38),
    "java/lang/Uint64#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 39),
    "java/lang/Uint64#dec:()Ljava/lang/UintType;" => (222, 40),
    "java/lang/Uint64#inc:()Ljava/lang/UintType;" => (222, 41),
    "java/lang/Uint64#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 42),
    "java/lang/Uint64#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 43),
    "java/lang/Uint64#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 44),
    "java/lang/Uint64#not:()Ljava/lang/UintType;" => (222, 45),
    "java/lang/Uint64#pow:(I)Ljava/lang/UintType;" => (222, 46),
    "java/lang/Uint64#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 47),
    "java/lang/Uint64#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 48),
    "java/lang/Uint64#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 49),
    "java/lang/Uint64#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (222, 50),
    "java/lang/Uint64#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (222, 51),
    "java/lang/Uint64#<clinit>:()V" => (222, 52),
    "java/lang/Uint8#<init>:(I)V" => (223, 0),
    "java/lang/Uint8#<init>:(Ljava/math/BigInteger;)V" => (223, 1),
    "java/lang/Uint8#add:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 2),
    "java/lang/Uint8#sub:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 3),
    "java/lang/Uint8#mul:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 4),
    "java/lang/Uint8#div:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 5),
    "java/lang/Uint8#mod:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 6),
    "java/lang/Uint8#and:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 7),
    "java/lang/Uint8#or:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 8),
    "java/lang/Uint8#xor:(Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 9),
    "java/lang/Uint8#not:()Ljava/lang/Uint8;" => (223, 10),
    "java/lang/Uint8#shiftRight:(I)Ljava/lang/Uint8;" => (223, 11),
    "java/lang/Uint8#shiftLeft:(I)Ljava/lang/Uint8;" => (223, 12),
    "java/lang/Uint8#setBit:(I)Ljava/lang/Uint8;" => (223, 13),
    "java/lang/Uint8#clearBit:(I)Ljava/lang/Uint8;" => (223, 14),
    "java/lang/Uint8#flipBit:(I)Ljava/lang/Uint8;" => (223, 15),
    "java/lang/Uint8#inc:()Ljava/lang/Uint8;" => (223, 16),
    "java/lang/Uint8#dec:()Ljava/lang/Uint8;" => (223, 17),
    "java/lang/Uint8#pow:(I)Ljava/lang/Uint8;" => (223, 18),
    "java/lang/Uint8#divmod:(Ljava/lang/Uint8;)[Ljava/lang/Uint8;" => (223, 19),
    "java/lang/Uint8#mulmod:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 20),
    "java/lang/Uint8#addmod:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 21),
    "java/lang/Uint8#add:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 22),
    "java/lang/Uint8#sub:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 23),
    "java/lang/Uint8#mul:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 24),
    "java/lang/Uint8#div:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 25),
    "java/lang/Uint8#mod:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;" => (223, 26),
    "java/lang/Uint8#flipBit:(I)Ljava/lang/UintType;" => (223, 27),
    "java/lang/Uint8#clearBit:(I)Ljava/lang/UintType;" => (223, 28),
    "java/lang/Uint8#setBit:(I)Ljava/lang/UintType;" => (223, 29),
    "java/lang/Uint8#shiftRight:(I)Ljava/lang/UintType;" => (223, 30),
    "java/lang/Uint8#shiftLeft:(I)Ljava/lang/UintType;" => (223, 31),
    "java/lang/Uint8#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 32),
    "java/lang/Uint8#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 33),
    "java/lang/Uint8#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 34),
    "java/lang/Uint8#dec:()Ljava/lang/UintType;" => (223, 35),
    "java/lang/Uint8#inc:()Ljava/lang/UintType;" => (223, 36),
    "java/lang/Uint8#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 37),
    "java/lang/Uint8#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 38),
    "java/lang/Uint8#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 39),
    "java/lang/Uint8#not:()Ljava/lang/UintType;" => (223, 40),
    "java/lang/Uint8#pow:(I)Ljava/lang/UintType;" => (223, 41),
    "java/lang/Uint8#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 42),
    "java/lang/Uint8#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 43),
    "java/lang/Uint8#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 44),
    "java/lang/Uint8#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (223, 45),
    "java/lang/Uint8#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (223, 46),
    "java/lang/Uint8#<clinit>:()V" => (223, 47),
    "java/lang/UintType#<init>:(J)V" => (224, 0),
    "java/lang/UintType#<init>:([I)V" => (224, 1),
    "java/lang/UintType#<init>:([II)V" => (224, 2),
    "java/lang/UintType#<init>:(Ljava/lang/UintType;I)V" => (224, 3),
    "java/lang/UintType#<init>:(Ljava/lang/String;II)V" => (224, 4),
    "java/lang/UintType#<init>:(Ljava/math/BigInteger;I)V" => (224, 5),
    "java/lang/UintType#<init>:([BLjava/lang/UintType;)V" => (224, 6),
    "java/lang/UintType#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (224, 7),
    "java/lang/UintType#div:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 8),
    "java/lang/UintType#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 9),
    "java/lang/UintType#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 10),
    "java/lang/UintType#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 11),
    "java/lang/UintType#pow:(I)Ljava/lang/UintType;" => (224, 12),
    "java/lang/UintType#not:()Ljava/lang/UintType;" => (224, 13),
    "java/lang/UintType#and:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 14),
    "java/lang/UintType#or:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 15),
    "java/lang/UintType#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 16),
    "java/lang/UintType#inc:()Ljava/lang/UintType;" => (224, 17),
    "java/lang/UintType#dec:()Ljava/lang/UintType;" => (224, 18),
    "java/lang/UintType#add:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 19),
    "java/lang/UintType#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 20),
    "java/lang/UintType#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 21),
    "java/lang/UintType#shiftLeft:(I)Ljava/lang/UintType;" => (224, 22),
    "java/lang/UintType#shiftRight:(I)Ljava/lang/UintType;" => (224, 23),
    "java/lang/UintType#setBit:(I)Ljava/lang/UintType;" => (224, 24),
    "java/lang/UintType#clearBit:(I)Ljava/lang/UintType;" => (224, 25),
    "java/lang/UintType#flipBit:(I)Ljava/lang/UintType;" => (224, 26),
    "java/lang/UintType#testBit:(I)Z" => (224, 27),
    "java/lang/UintType#divideAndRemainder:(Ljava/lang/UintType;)[Ljava/lang/UintType;" => (224, 28),
    "java/lang/UintType#remainder:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 29),
    "java/lang/UintType#bitLength:()I" => (224, 30),
    "java/lang/UintType#isZero:()Z" => (224, 31),
    "java/lang/UintType#getLowestSetBit:()I" => (224, 32),
    "java/lang/UintType#hashCode:()I" => (224, 33),
    "java/lang/UintType#equals:(Ljava/lang/Object;)Z" => (224, 34),
    "java/lang/UintType#compareTo:(Ljava/lang/UintType;)I" => (224, 35),
    "java/lang/UintType#max:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 36),
    "java/lang/UintType#min:(Ljava/lang/UintType;)Ljava/lang/UintType;" => (224, 37),
    "java/lang/UintType#intValue:()I" => (224, 38),
    "java/lang/UintType#longValue:()J" => (224, 39),
    "java/lang/UintType#shortValue:()S" => (224, 40),
    "java/lang/UintType#byteValue:()B" => (224, 41),
    "java/lang/UintType#intValueExact:()I" => (224, 42),
    "java/lang/UintType#longValueExact:()J" => (224, 43),
    "java/lang/UintType#shortValueExact:()S" => (224, 44),
    "java/lang/UintType#byteValueExact:()B" => (224, 45),
    "java/lang/UintType#toBigInteger:()Ljava/math/BigInteger;" => (224, 46),
    "java/lang/UintType#ceil:(II)I" => (224, 47),
    "java/lang/UintType#toByteArray:()[B" => (224, 48),
    "java/lang/UintType#toIntArray:()[I" => (224, 49),
    "java/lang/UintType#toString:()Ljava/lang/String;" => (224, 50),
    "java/lang/UintType#toString:(I)Ljava/lang/String;" => (224, 51),
    "java/lang/UintType#compareTo:(Ljava/lang/Object;)I" => (224, 52),
    "java/lang/Unpaused#<init>:(Ljava/lang/Address;)V" => (225, 0),
    "java/lang/UnsatisfiedLinkError#<init>:(Ljava/lang/String;)V" => (226, 0),
    "java/lang/UnsatisfiedLinkError#<init>:()V" => (226, 1),
    "java/lang/UnsupportedOperationException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (227, 0),
    "java/lang/UnsupportedOperationException#<init>:(Ljava/lang/String;)V" => (227, 1),
    "java/lang/UnsupportedOperationException#<init>:(Ljava/lang/Throwable;)V" => (227, 2),
    "java/lang/UnsupportedOperationException#<init>:()V" => (227, 3),
    "java/lang/VirtualMachineError#<init>:(Ljava/lang/String;)V" => (228, 0),
    "java/lang/VirtualMachineError#<init>:()V" => (228, 1),
    "java/lang/Void#<init>:()V" => (229, 0),
    "java/lang/Void#<clinit>:()V" => (229, 1),
    "java/lang/annotation/Annotation#annotationType:()Ljava/lang/Class;" => (230, 0),
    "java/lang/annotation/ElementType#values:()[Ljava/lang/annotation/ElementType;" => (232, 0),
    "java/lang/annotation/ElementType#valueOf:(Ljava/lang/String;)Ljava/lang/annotation/ElementType;" => (232, 1),
    "java/lang/annotation/ElementType#<init>:(Ljava/lang/String;I)V" => (232, 2),
    "java/lang/annotation/ElementType#<clinit>:()V" => (232, 3),
    "java/lang/annotation/Retention#value:()Ljava/lang/annotation/RetentionPolicy;" => (237, 0),
    "java/lang/annotation/RetentionPolicy#values:()[Ljava/lang/annotation/RetentionPolicy;" => (238, 0),
    "java/lang/annotation/RetentionPolicy#valueOf:(Ljava/lang/String;)Ljava/lang/annotation/RetentionPolicy;" => (238, 1),
    "java/lang/annotation/RetentionPolicy#<init>:(Ljava/lang/String;I)V" => (238, 2),
    "java/lang/annotation/RetentionPolicy#<clinit>:()V" => (238, 3),
    "java/lang/annotation/Target#value:()[Ljava/lang/annotation/ElementType;" => (239, 0),
    "java/lang/bytes/Division#<init>:()V" => (242, 0),
    "java/lang/bytes/Division#div:([II)[[I" => (242, 1),
    "java/lang/bytes/Division#div:([IJ)[[I" => (242, 2),
    "java/lang/bytes/Division#div:([I[I)[[I" => (242, 3),
    "java/lang/bytes/Division#D3:(I[IIJI)I" => (242, 4),
    "java/lang/bytes/Division#D4_D5:(I[I[II)I" => (242, 5),
    "java/lang/bytes/Division#D4_D5:(I[IIII)I" => (242, 6),
    "java/lang/bytes/Division#mulsub:([I[IJII)I" => (242, 7),
    "java/lang/bytes/Division#mulsub:([IIIJI)I" => (242, 8),
    "java/lang/bytes/Division#divadd:([I[II)I" => (242, 9),
    "java/lang/bytes/Division#divadd:(JJ[II)I" => (242, 10),
    "java/lang/bytes/Division#divone:(JJ)J" => (242, 11),
    "java/lang/bytes/Division#lshunt:([II)V" => (242, 12),
    "java/lang/bytes/Division#rshunt:([II)V" => (242, 13),
    "java/lang/bytes/Division#rshift:([II)V" => (242, 14),
    "java/lang/bytes/Division#copyshift:([II[III)V" => (242, 15),
    "java/lang/bytes/Division#<clinit>:()V" => (242, 16),
    "java/lang/bytes/Hex#<init>:()V" => (243, 0),
    "java/lang/bytes/Hex#encodeQuantity:(Ljava/math/BigInteger;)Ljava/lang/String;" => (243, 1),
    "java/lang/bytes/Hex#decodeQuantity:(Ljava/lang/String;)Ljava/math/BigInteger;" => (243, 2),
    "java/lang/bytes/Hex#parsePaddedNumberHex:(Ljava/lang/String;)Ljava/math/BigInteger;" => (243, 3),
    "java/lang/bytes/Hex#isLongValue:(Ljava/lang/String;)Z" => (243, 4),
    "java/lang/bytes/Hex#isValidHexQuantity:(Ljava/lang/String;)Z" => (243, 5),
    "java/lang/bytes/Hex#cleanHexPrefix:(Ljava/lang/String;)Ljava/lang/String;" => (243, 6),
    "java/lang/bytes/Hex#prependHexPrefix:(Ljava/lang/String;)Ljava/lang/String;" => (243, 7),
    "java/lang/bytes/Hex#containsHexPrefix:(Ljava/lang/String;)Z" => (243, 8),
    "java/lang/bytes/Hex#toBigInt:([BII)Ljava/math/BigInteger;" => (243, 9),
    "java/lang/bytes/Hex#toBigInt:([B)Ljava/math/BigInteger;" => (243, 10),
    "java/lang/bytes/Hex#toBigInt:(Ljava/lang/String;)Ljava/math/BigInteger;" => (243, 11),
    "java/lang/bytes/Hex#toBigIntNoPrefix:(Ljava/lang/String;)Ljava/math/BigInteger;" => (243, 12),
    "java/lang/bytes/Hex#toHexStringWithPrefix:(Ljava/math/BigInteger;)Ljava/lang/String;" => (243, 13),
    "java/lang/bytes/Hex#toHexStringNoPrefix:(Ljava/math/BigInteger;)Ljava/lang/String;" => (243, 14),
    "java/lang/bytes/Hex#toHexStringNoPrefix:([B)Ljava/lang/String;" => (243, 15),
    "java/lang/bytes/Hex#toHexStringWithPrefixZeroPadded:(Ljava/math/BigInteger;I)Ljava/lang/String;" => (243, 16),
    "java/lang/bytes/Hex#toHexStringWithPrefixSafe:(Ljava/math/BigInteger;)Ljava/lang/String;" => (243, 17),
    "java/lang/bytes/Hex#toHexStringNoPrefixZeroPadded:(Ljava/math/BigInteger;I)Ljava/lang/String;" => (243, 18),
    "java/lang/bytes/Hex#toHexStringZeroPadded:(Ljava/math/BigInteger;IZ)Ljava/lang/String;" => (243, 19),
    "java/lang/bytes/Hex#toBytesPadded:(Ljava/math/BigInteger;I)[B" => (243, 20),
    "java/lang/bytes/Hex#hexStringToByteArray:(Ljava/lang/String;)[B" => (243, 21),
    "java/lang/bytes/Hex#toHexString:([BIIZ)Ljava/lang/String;" => (243, 22),
    "java/lang/bytes/Hex#toHexCharArray:([BII)[C" => (243, 23),
    "java/lang/bytes/Hex#toHexString:([B)Ljava/lang/String;" => (243, 24),
    "java/lang/bytes/Hex#asByte:(II)B" => (243, 25),
    "java/lang/bytes/Hex#removeDoubleQuotes:(Ljava/lang/String;)Ljava/lang/String;" => (243, 26),
    "java/lang/bytes/Hex#isEmpty:(Ljava/lang/String;)Z" => (243, 27),
    "java/lang/bytes/Hex#zeros:(I)Ljava/lang/String;" => (243, 28),
    "java/lang/bytes/Hex#repeat:(CI)Ljava/lang/String;" => (243, 29),
    "java/lang/bytes/Hex#<clinit>:()V" => (243, 30),
    "java/lang/bytes/Type#bytes32PaddedLength:()I" => (244, 0),
    "java/lang/bytes/Type#getValue:()Ljava/lang/Object;" => (244, 1),
    "java/lang/bytes/Type#getTypeAsString:()Ljava/lang/String;" => (244, 2),
    "java/lang/contract/Contract#<init>:()V" => (245, 0),
    "java/lang/contract/ERC20#<init>:(Ljava/lang/String;Ljava/lang/String;)V" => (246, 0),
    "java/lang/contract/ERC20#name:()Ljava/lang/String;" => (246, 1),
    "java/lang/contract/ERC20#symbol:()Ljava/lang/String;" => (246, 2),
    "java/lang/contract/ERC20#decimals:()Ljava/lang/Uint8;" => (246, 3),
    "java/lang/contract/ERC20#owner:()Ljava/lang/Address;" => (246, 4),
    "java/lang/contract/ERC20#onlyOwner:()V" => (246, 5),
    "java/lang/contract/ERC20#totalSupply:()Ljava/lang/Uint256;" => (246, 6),
    "java/lang/contract/ERC20#balanceOf:(Ljava/lang/Address;)Ljava/lang/Uint256;" => (246, 7),
    "java/lang/contract/ERC20#transfer:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (246, 8),
    "java/lang/contract/ERC20#allowance:(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/Uint256;" => (246, 9),
    "java/lang/contract/ERC20#approve:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (246, 10),
    "java/lang/contract/ERC20#transferFrom:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (246, 11),
    "java/lang/contract/ERC20#_getAllowanceKey:(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/String;" => (246, 12),
    "java/lang/contract/ERC20#_transfer:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 13),
    "java/lang/contract/ERC20#_update:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 14),
    "java/lang/contract/ERC20#_mint:(Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 15),
    "java/lang/contract/ERC20#mint:(Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 16),
    "java/lang/contract/ERC20#_burn:(Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 17),
    "java/lang/contract/ERC20#burn:(Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 18),
    "java/lang/contract/ERC20#_approve:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 19),
    "java/lang/contract/ERC20#_approve:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;Z)V" => (246, 20),
    "java/lang/contract/ERC20#_spendAllowance:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V" => (246, 21),
    "java/lang/contract/ERC20#increaseAllowance:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (246, 22),
    "java/lang/contract/ERC20#decreaseAllowance:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (246, 23),
    "java/lang/contract/ERC20#paused:()Ljava/lang/Bool;" => (246, 24),
    "java/lang/contract/ERC20#pause:()V" => (246, 25),
    "java/lang/contract/ERC20#unpause:()V" => (246, 26),
    "java/lang/contract/ERC20#transferOwnership:(Ljava/lang/Address;)V" => (246, 27),
    "java/lang/contract/ERC20#renounceOwnership:()V" => (246, 28),
    "java/lang/contract/ERC20InsufficientAllowance#<init>:(Ljava/lang/Address;Ljava/lang/Uint256;Ljava/lang/Uint256;)V" => (247, 0),
    "java/lang/contract/ERC20InsufficientBalance#<init>:(Ljava/lang/Address;Ljava/lang/Uint256;Ljava/lang/Uint256;)V" => (248, 0),
    "java/lang/contract/ERC20InvalidAmount#<init>:(Ljava/lang/Uint256;)V" => (249, 0),
    "java/lang/contract/ERC20InvalidApprover#<init>:(Ljava/lang/Address;)V" => (250, 0),
    "java/lang/contract/ERC20InvalidReceiver#<init>:(Ljava/lang/Address;)V" => (251, 0),
    "java/lang/contract/ERC20InvalidSender#<init>:(Ljava/lang/Address;)V" => (252, 0),
    "java/lang/contract/ERC20InvalidSpender#<init>:(Ljava/lang/Address;)V" => (253, 0),
    "java/lang/contract/ERC20TokenPaused#<init>:()V" => (254, 0),
    "java/lang/contract/IERC20#totalSupply:()Ljava/lang/Uint256;" => (255, 0),
    "java/lang/contract/IERC20#balanceOf:(Ljava/lang/Address;)Ljava/lang/Uint256;" => (255, 1),
    "java/lang/contract/IERC20#transfer:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (255, 2),
    "java/lang/contract/IERC20#allowance:(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/Uint256;" => (255, 3),
    "java/lang/contract/IERC20#approve:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (255, 4),
    "java/lang/contract/IERC20#transferFrom:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;" => (255, 5),
    "java/lang/contract/IERC20Metadata#name:()Ljava/lang/String;" => (257, 0),
    "java/lang/contract/IERC20Metadata#symbol:()Ljava/lang/String;" => (257, 1),
    "java/lang/contract/IERC20Metadata#decimals:()Ljava/lang/Uint8;" => (257, 2),
    "java/lang/contract/OnlyOwner#<init>:(Ljava/lang/Address;)V" => (258, 0),
    "java/lang/invoke/MethodHandle#<init>:(ILjava/lang/ClassLoader;Ljava/base/VMMethod;)V" => (259, 0),
    "java/lang/invoke/MethodHandle#<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V" => (259, 1),
    "java/lang/invoke/MethodHandle#toString:()Ljava/lang/String;" => (259, 2),
    "java/lang/invoke/MethodHandle#type:()Ljava/lang/invoke/MethodType;" => (259, 3),
    "java/lang/invoke/MethodHandles#<init>:()V" => (260, 0),
    "java/lang/invoke/MethodHandles#lookup:()Ljava/lang/invoke/MethodHandlesLookup;" => (260, 1),
    "java/lang/invoke/MethodHandlesLookup#<init>:(Ljava/base/VMClass;I)V" => (261, 0),
    "java/lang/invoke/MethodHandlesLookup#toString:()Ljava/lang/String;" => (261, 1),
    "java/lang/invoke/MethodType#<init>:(Ljava/lang/ClassLoader;[B)V" => (262, 0),
    "java/lang/invoke/MethodType#<init>:(Ljava/lang/String;)V" => (262, 1),
    "java/lang/invoke/MethodType#toMethodDescriptorString:()Ljava/lang/String;" => (262, 2),
    "java/lang/invoke/MethodType#spec:(Ljava/lang/Class;)Ljava/lang/String;" => (262, 3),
    "java/lang/invoke/MethodType#<init>:(Ljava/lang/Class;[Ljava/lang/Class;)V" => (262, 4),
    "java/lang/invoke/MethodType#methodType:(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;" => (262, 5),
    "java/lang/invoke/MethodType#methodType:(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;" => (262, 6),
    "java/lang/invoke/MethodType#toString:()Ljava/lang/String;" => (262, 7),
    "java/lang/invoke/MethodType#footprint:()I" => (262, 8),
    "java/lang/invoke/MethodType#returnType:()Ljava/lang/Class;" => (262, 9),
    "java/lang/invoke/MethodType#parameterArray:()[Ljava/lang/Class;" => (262, 10),
    "java/lang/invoke/MethodType#parameters:()Ljava/lang/Iterable;" => (262, 11),
    "java/lang/invoke/MethodType#result:()Ljava/lang/invoke/MethodTypeResult;" => (262, 12),
    "java/lang/invoke/MethodType#type:(Ljava/lang/String;)Ljava/lang/invoke/MethodTypeType;" => (262, 13),
    "java/lang/invoke/MethodType#<clinit>:()V" => (262, 14),
    "java/lang/invoke/MethodTypeParameter#<init>:(IILjava/lang/String;Ljava/lang/Class;I)V" => (263, 0),
    "java/lang/invoke/MethodTypeParameter#index:()I" => (263, 1),
    "java/lang/invoke/MethodTypeParameter#position:()I" => (263, 2),
    "java/lang/invoke/MethodTypeParameter#spec:()Ljava/lang/String;" => (263, 3),
    "java/lang/invoke/MethodTypeParameter#type:()Ljava/lang/Class;" => (263, 4),
    "java/lang/invoke/MethodTypeParameter#load:()I" => (263, 5),
    "java/lang/invoke/MethodTypeResult#<init>:(Ljava/lang/String;Ljava/lang/Class;I)V" => (264, 0),
    "java/lang/invoke/MethodTypeResult#return_:()I" => (264, 1),
    "java/lang/invoke/MethodTypeResult#spec:()Ljava/lang/String;" => (264, 2),
    "java/lang/invoke/MethodTypeResult#type:()Ljava/lang/Class;" => (264, 3),
    "java/lang/invoke/MethodTypeType#values:()[Ljava/lang/invoke/MethodTypeType;" => (265, 0),
    "java/lang/invoke/MethodTypeType#valueOf:(Ljava/lang/String;)Ljava/lang/invoke/MethodTypeType;" => (265, 1),
    "java/lang/invoke/MethodTypeType#<init>:(Ljava/lang/String;IIII)V" => (265, 2),
    "java/lang/invoke/MethodTypeType#<clinit>:()V" => (265, 3),
    "java/lang/invoke/MethodTypeTypeSpec#type:()Ljava/lang/Class;" => (266, 0),
    "java/lang/invoke/MethodTypeTypeSpec#spec:()Ljava/lang/String;" => (266, 1),
    "java/lang/reflect/AccessibleObject#<init>:()V" => (267, 0),
    "java/lang/reflect/AccessibleObject#isAnnotationPresent:(Ljava/lang/Class;)Z" => (267, 1),
    "java/lang/reflect/AccessibleObject#isAccessible:()Z" => (267, 2),
    "java/lang/reflect/AccessibleObject#setAccessible:(Z)V" => (267, 3),
    "java/lang/reflect/AccessibleObject#setAccessible:([Ljava/lang/reflect/AccessibleObject;Z)V" => (267, 4),
    "java/lang/reflect/AnnotatedElement#isAnnotationPresent:(Ljava/lang/Class;)Z" => (268, 0),
    "java/lang/reflect/AnnotatedElement#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;" => (268, 1),
    "java/lang/reflect/AnnotatedElement#getAnnotations:()[Ljava/lang/annotation/Annotation;" => (268, 2),
    "java/lang/reflect/AnnotatedElement#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;" => (268, 3),
    "java/lang/reflect/Array#<init>:()V" => (269, 0),
    "java/lang/reflect/Array#get:(Ljava/lang/Object;I)Ljava/lang/Object;" => (269, 1),
    "java/lang/reflect/Array#set:(Ljava/lang/Object;ILjava/lang/Object;)V" => (269, 2),
    "java/lang/reflect/Array#getLength:(Ljava/lang/Object;)I" => (269, 3),
    "java/lang/reflect/Array#makeObjectArray:(Ljava/lang/Class;I)Ljava/lang/Object;" => (269, 4),
    "java/lang/reflect/Array#newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;" => (269, 5),
    "java/lang/reflect/Constructor#<init>:(Ljava/lang/reflect/Method;)V" => (270, 0),
    "java/lang/reflect/Constructor#equals:(Ljava/lang/Object;)Z" => (270, 1),
    "java/lang/reflect/Constructor#isAccessible:()Z" => (270, 2),
    "java/lang/reflect/Constructor#setAccessible:(Z)V" => (270, 3),
    "java/lang/reflect/Constructor#getDeclaringClass:()Ljava/lang/Class;" => (270, 4),
    "java/lang/reflect/Constructor#getParameterTypes:()[Ljava/lang/Class;" => (270, 5),
    "java/lang/reflect/Constructor#getModifiers:()I" => (270, 6),
    "java/lang/reflect/Constructor#isSynthetic:()Z" => (270, 7),
    "java/lang/reflect/Constructor#getName:()Ljava/lang/String;" => (270, 8),
    "java/lang/reflect/Constructor#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;" => (270, 9),
    "java/lang/reflect/Constructor#getAnnotations:()[Ljava/lang/annotation/Annotation;" => (270, 10),
    "java/lang/reflect/Constructor#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;" => (270, 11),
    "java/lang/reflect/Constructor#make:(Ljava/base/VMClass;)Ljava/lang/Object;" => (270, 12),
    "java/lang/reflect/Constructor#newInstance:()Ljava/lang/Object;" => (270, 13),
    "java/lang/reflect/Constructor#newInstance:([Ljava/lang/Object;)Ljava/lang/Object;" => (270, 14),
    "java/lang/reflect/Constructor#getExceptionTypes:()[Ljava/lang/Class;" => (270, 15),
    "java/lang/reflect/Field#<init>:(Ljava/base/VMField;)V" => (271, 0),
    "java/lang/reflect/Field#isAccessible:()Z" => (271, 1),
    "java/lang/reflect/Field#setAccessible:(Z)V" => (271, 2),
    "java/lang/reflect/Field#getDeclaringClass:()Ljava/lang/Class;" => (271, 3),
    "java/lang/reflect/Field#getModifiers:()I" => (271, 4),
    "java/lang/reflect/Field#isSynthetic:()Z" => (271, 5),
    "java/lang/reflect/Field#getName:()Ljava/lang/String;" => (271, 6),
    "java/lang/reflect/Field#getName:(Ljava/base/VMField;)Ljava/lang/String;" => (271, 7),
    "java/lang/reflect/Field#getType:()Ljava/lang/Class;" => (271, 8),
    "java/lang/reflect/Field#getGenericType:()Ljava/lang/reflect/Type;" => (271, 9),
    "java/lang/reflect/Field#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (271, 10),
    "java/lang/reflect/Field#getBoolean:(Ljava/lang/Object;)Z" => (271, 11),
    "java/lang/reflect/Field#getByte:(Ljava/lang/Object;)B" => (271, 12),
    "java/lang/reflect/Field#getShort:(Ljava/lang/Object;)S" => (271, 13),
    "java/lang/reflect/Field#getChar:(Ljava/lang/Object;)C" => (271, 14),
    "java/lang/reflect/Field#getInt:(Ljava/lang/Object;)I" => (271, 15),
    "java/lang/reflect/Field#getLong:(Ljava/lang/Object;)J" => (271, 16),
    "java/lang/reflect/Field#matchType:(Ljava/lang/Object;)Z" => (271, 17),
    "java/lang/reflect/Field#set:(Ljava/lang/Object;Ljava/lang/Object;)V" => (271, 18),
    "java/lang/reflect/Field#set:(Ljava/lang/Object;J)V" => (271, 19),
    "java/lang/reflect/Field#setByte:(Ljava/lang/Object;B)V" => (271, 20),
    "java/lang/reflect/Field#setBoolean:(Ljava/lang/Object;Z)V" => (271, 21),
    "java/lang/reflect/Field#setChar:(Ljava/lang/Object;C)V" => (271, 22),
    "java/lang/reflect/Field#setShort:(Ljava/lang/Object;S)V" => (271, 23),
    "java/lang/reflect/Field#setInt:(Ljava/lang/Object;I)V" => (271, 24),
    "java/lang/reflect/Field#setLong:(Ljava/lang/Object;J)V" => (271, 25),
    "java/lang/reflect/Field#getAnnotation:([Ljava/lang/Object;)Ljava/lang/annotation/Annotation;" => (271, 26),
    "java/lang/reflect/Field#hasAnnotations:()Z" => (271, 27),
    "java/lang/reflect/Field#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;" => (271, 28),
    "java/lang/reflect/Field#getAnnotations:()[Ljava/lang/annotation/Annotation;" => (271, 29),
    "java/lang/reflect/Field#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;" => (271, 30),
    "java/lang/reflect/Field#getPrimitive:(Ljava/lang/Object;II)J" => (271, 31),
    "java/lang/reflect/Field#getObject:(Ljava/lang/Object;I)Ljava/lang/Object;" => (271, 32),
    "java/lang/reflect/Field#setPrimitive:(Ljava/lang/Object;IIJ)V" => (271, 33),
    "java/lang/reflect/Field#setObject:(Ljava/lang/Object;ILjava/lang/Object;)V" => (271, 34),
    "java/lang/reflect/GenericDeclaration#getTypeParameters:()[Ljava/lang/reflect/TypeVariable;" => (272, 0),
    "java/lang/reflect/InvocationHandler#invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;" => (273, 0),
    "java/lang/reflect/InvocationTargetException#<init>:(Ljava/lang/Throwable;Ljava/lang/String;)V" => (274, 0),
    "java/lang/reflect/InvocationTargetException#<init>:(Ljava/lang/Throwable;)V" => (274, 1),
    "java/lang/reflect/InvocationTargetException#<init>:()V" => (274, 2),
    "java/lang/reflect/InvocationTargetException#getTargetException:()Ljava/lang/Throwable;" => (274, 3),
    "java/lang/reflect/Member#getDeclaringClass:()Ljava/lang/Class;" => (275, 0),
    "java/lang/reflect/Member#getModifiers:()I" => (275, 1),
    "java/lang/reflect/Member#getName:()Ljava/lang/String;" => (275, 2),
    "java/lang/reflect/Member#isSynthetic:()Z" => (275, 3),
    "java/lang/reflect/Method#<init>:(Ljava/base/VMMethod;)V" => (276, 0),
    "java/lang/reflect/Method#equals:(Ljava/lang/Object;)Z" => (276, 1),
    "java/lang/reflect/Method#isAccessible:()Z" => (276, 2),
    "java/lang/reflect/Method#setAccessible:(Z)V" => (276, 3),
    "java/lang/reflect/Method#getCaller:()Ljava/base/VMMethod;" => (276, 4),
    "java/lang/reflect/Method#getDeclaringClass:()Ljava/lang/Class;" => (276, 5),
    "java/lang/reflect/Method#getModifiers:()I" => (276, 6),
    "java/lang/reflect/Method#getName:()Ljava/lang/String;" => (276, 7),
    "java/lang/reflect/Method#getName:(Ljava/base/VMMethod;)Ljava/lang/String;" => (276, 8),
    "java/lang/reflect/Method#getSpec:()Ljava/lang/String;" => (276, 9),
    "java/lang/reflect/Method#getSpec:(Ljava/base/VMMethod;)Ljava/lang/String;" => (276, 10),
    "java/lang/reflect/Method#getParameterTypes:()[Ljava/lang/Class;" => (276, 11),
    "java/lang/reflect/Method#invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" => (276, 12),
    "java/lang/reflect/Method#invoke:(Ljava/base/VMMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" => (276, 13),
    "java/lang/reflect/Method#getReturnType:()Ljava/lang/Class;" => (276, 14),
    "java/lang/reflect/Method#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;" => (276, 15),
    "java/lang/reflect/Method#getAnnotations:()[Ljava/lang/annotation/Annotation;" => (276, 16),
    "java/lang/reflect/Method#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;" => (276, 17),
    "java/lang/reflect/Method#isVarArgs:()Z" => (276, 18),
    "java/lang/reflect/Method#isSynthetic:()Z" => (276, 19),
    "java/lang/reflect/Method#getDefaultValue:()Ljava/lang/Object;" => (276, 20),
    "java/lang/reflect/Method#getExceptionTypes:()[Ljava/lang/Class;" => (276, 21),
    "java/lang/reflect/Modifier#<init>:()V" => (277, 0),
    "java/lang/reflect/Modifier#isPublic:(I)Z" => (277, 1),
    "java/lang/reflect/Modifier#isPrivate:(I)Z" => (277, 2),
    "java/lang/reflect/Modifier#isProtected:(I)Z" => (277, 3),
    "java/lang/reflect/Modifier#isStatic:(I)Z" => (277, 4),
    "java/lang/reflect/Modifier#isFinal:(I)Z" => (277, 5),
    "java/lang/reflect/Modifier#isTransient:(I)Z" => (277, 6),
    "java/lang/reflect/Modifier#isSuper:(I)Z" => (277, 7),
    "java/lang/reflect/Modifier#isNative:(I)Z" => (277, 8),
    "java/lang/reflect/Modifier#isAbstract:(I)Z" => (277, 9),
    "java/lang/reflect/Modifier#isInterface:(I)Z" => (277, 10),
    "java/lang/reflect/ParameterizedType#getActualTypeArguments:()[Ljava/lang/reflect/Type;" => (278, 0),
    "java/lang/reflect/ParameterizedType#getOwnerType:()Ljava/lang/reflect/Type;" => (278, 1),
    "java/lang/reflect/ParameterizedType#getRawType:()Ljava/lang/reflect/Type;" => (278, 2),
    "java/lang/reflect/Proxy#<init>:()V" => (279, 0),
    "java/lang/reflect/Proxy#getProxyClass:(Ljava/lang/ClassLoader;[Ljava/lang/Class;)Ljava/lang/Class;" => (279, 1),
    "java/lang/reflect/Proxy#isProxyClass:(Ljava/lang/Class;)Z" => (279, 2),
    "java/lang/reflect/Proxy#getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;" => (279, 3),
    "java/lang/reflect/Proxy#makeInvokeCode:(Ljava/util/List;Ljava/lang/String;[BIII)[B" => (279, 4),
    "java/lang/reflect/Proxy#makeConstructorCode:(Ljava/util/List;)[B" => (279, 5),
    "java/lang/reflect/Proxy#makeClass:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Class;" => (279, 6),
    "java/lang/reflect/Proxy#newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;" => (279, 7),
    "java/lang/reflect/Proxy#<clinit>:()V" => (279, 8),
    "java/lang/reflect/SignatureParser#parse:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/reflect/Type;" => (280, 0),
    "java/lang/reflect/SignatureParser#parse:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Map;)Ljava/lang/reflect/Type;" => (280, 1),
    "java/lang/reflect/SignatureParser#<init>:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Map;)V" => (280, 2),
    "java/lang/reflect/SignatureParser#parseType:()Ljava/lang/reflect/Type;" => (280, 3),
    "java/lang/reflect/SignatureParser#typeName:(Ljava/lang/reflect/Type;)Ljava/lang/String;" => (280, 4),
    "java/lang/reflect/SignatureParser#makeType:([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;" => (280, 5),
    "java/lang/reflect/SignatureParser#collectTypeVariables:(Ljava/lang/Class;)Ljava/util/Map;" => (280, 6),
    "java/lang/reflect/SignatureParserType#<init>:([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V" => (281, 0),
    "java/lang/reflect/SignatureParserType#getRawType:()Ljava/lang/reflect/Type;" => (281, 1),
    "java/lang/reflect/SignatureParserType#getOwnerType:()Ljava/lang/reflect/Type;" => (281, 2),
    "java/lang/reflect/SignatureParserType#getActualTypeArguments:()[Ljava/lang/reflect/Type;" => (281, 3),
    "java/lang/reflect/SignatureParserType#toString:()Ljava/lang/String;" => (281, 4),
    "java/lang/reflect/SignatureParserType#typeName:(Ljava/lang/reflect/Type;)Ljava/lang/String;" => (281, 5),
    "java/lang/reflect/TypeVariable#getBounds:()[Ljava/lang/reflect/Type;" => (283, 0),
    "java/lang/reflect/TypeVariable#getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;" => (283, 1),
    "java/lang/reflect/TypeVariable#getName:()Ljava/lang/String;" => (283, 2),
    "java/lang/reflect/TypeVariableImpl#getBounds:()[Ljava/lang/reflect/Type;" => (284, 0),
    "java/lang/reflect/TypeVariableImpl#getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;" => (284, 1),
    "java/lang/reflect/TypeVariableImpl#getName:()Ljava/lang/String;" => (284, 2),
    "java/lang/reflect/TypeVariableImpl#<init>:(Ljava/lang/String;Ljava/lang/reflect/Type;)V" => (284, 3),
    "java/lang/reflect/TypeVariableImpl#setVars:(Ljava/util/List;)V" => (284, 4),
    "java/lang/reflect/TypeVariableImpl#toString:()Ljava/lang/String;" => (284, 5),
    "java/lang/reflect/TypeVariableImpl1#<init>:([Ljava/lang/reflect/TypeVariableImpl;)V" => (285, 0),
    "java/lang/reflect/TypeVariableImpl1#getTypeParameters:()[Ljava/lang/reflect/TypeVariable;" => (285, 1),
    "java/lang/reflect/TypeVariableImpl1#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;" => (285, 2),
    "java/lang/reflect/TypeVariableImpl1#getAnnotations:()[Ljava/lang/annotation/Annotation;" => (285, 3),
    "java/lang/reflect/TypeVariableImpl1#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;" => (285, 4),
    "java/math/BigInteger#<init>:(IJ)V" => (286, 0),
    "java/math/BigInteger#valueOf:(J)Ljava/math/BigInteger;" => (286, 1),
    "java/math/BigInteger#<init>:(Ljava/lang/String;I)V" => (286, 2),
    "java/math/BigInteger#<init>:(I[B)V" => (286, 3),
    "java/math/BigInteger#signum:()I" => (286, 4),
    "java/math/BigInteger#toString:(I)Ljava/lang/String;" => (286, 5),
    "java/math/BigInteger#toByteArray:()[B" => (286, 6),
    "java/math/BigInteger#shiftLeft:(I)Ljava/math/BigInteger;" => (286, 7),
    "java/math/BigInteger#shiftRight:(I)Ljava/math/BigInteger;" => (286, 8),
    "java/math/BigInteger#and:(Ljava/math/BigInteger;)Ljava/math/BigInteger;" => (286, 9),
    "java/math/BigInteger#or:(Ljava/math/BigInteger;)Ljava/math/BigInteger;" => (286, 10),
    "java/math/BigInteger#intValueExact:()I" => (286, 11),
    "java/math/BigInteger#intValue:()I" => (286, 12),
    "java/math/BigInteger#shortValue:()S" => (286, 13),
    "java/math/BigInteger#byteValue:()B" => (286, 14),
    "java/math/BigInteger#longValue:()J" => (286, 15),
    "java/math/BigInteger#floatValue:()F" => (286, 16),
    "java/math/BigInteger#doubleValue:()D" => (286, 17),
    "java/math/BigInteger#bitLength:()I" => (286, 18),
    "java/math/BigInteger#<init>:(I[I)V" => (286, 19),
    "java/math/BigInteger#<clinit>:()V" => (286, 20),
    "java/util/AbstractCollection#<init>:()V" => (287, 0),
    "java/util/AbstractCollection#add:(Ljava/lang/Object;)Z" => (287, 1),
    "java/util/AbstractCollection#addAll:(Ljava/util/Collection;)Z" => (287, 2),
    "java/util/AbstractCollection#clear:()V" => (287, 3),
    "java/util/AbstractCollection#contains:(Ljava/lang/Object;)Z" => (287, 4),
    "java/util/AbstractCollection#containsAll:(Ljava/util/Collection;)Z" => (287, 5),
    "java/util/AbstractCollection#isEmpty:()Z" => (287, 6),
    "java/util/AbstractCollection#remove:(Ljava/lang/Object;)Z" => (287, 7),
    "java/util/AbstractCollection#removeAll:(Ljava/util/Collection;)Z" => (287, 8),
    "java/util/AbstractCollection#size:()I" => (287, 9),
    "java/util/AbstractCollection#toArray:()[Ljava/lang/Object;" => (287, 10),
    "java/util/AbstractCollection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (287, 11),
    "java/util/AbstractCollection#iterator:()Ljava/util/Iterator;" => (287, 12),
    "java/util/AbstractCollection#toString:()Ljava/lang/String;" => (287, 13),
    "java/util/AbstractList#<init>:()V" => (288, 0),
    "java/util/AbstractList#add:(Ljava/lang/Object;)Z" => (288, 1),
    "java/util/AbstractList#addAll:(Ljava/util/Collection;)Z" => (288, 2),
    "java/util/AbstractList#addAll:(ILjava/util/Collection;)Z" => (288, 3),
    "java/util/AbstractList#iterator:()Ljava/util/Iterator;" => (288, 4),
    "java/util/AbstractList#listIterator:()Ljava/util/ListIterator;" => (288, 5),
    "java/util/AbstractList#indexOf:(Ljava/lang/Object;)I" => (288, 6),
    "java/util/AbstractMap#<init>:()V" => (289, 0),
    "java/util/AbstractSequentialList#<init>:()V" => (290, 0),
    "java/util/AbstractSet#<init>:()V" => (291, 0),
    "java/util/ArrayList#<init>:(I)V" => (292, 0),
    "java/util/ArrayList#<init>:()V" => (292, 1),
    "java/util/ArrayList#<init>:(Ljava/util/Collection;)V" => (292, 2),
    "java/util/ArrayList#grow:(I)V" => (292, 3),
    "java/util/ArrayList#shrink:(I)V" => (292, 4),
    "java/util/ArrayList#resize:(I)V" => (292, 5),
    "java/util/ArrayList#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (292, 6),
    "java/util/ArrayList#size:()I" => (292, 7),
    "java/util/ArrayList#ensureCapacity:(I)V" => (292, 8),
    "java/util/ArrayList#contains:(Ljava/lang/Object;)Z" => (292, 9),
    "java/util/ArrayList#add:(ILjava/lang/Object;)V" => (292, 10),
    "java/util/ArrayList#add:(Ljava/lang/Object;)Z" => (292, 11),
    "java/util/ArrayList#addAll:(Ljava/util/Collection;)Z" => (292, 12),
    "java/util/ArrayList#indexOf:(Ljava/lang/Object;)I" => (292, 13),
    "java/util/ArrayList#lastIndexOf:(Ljava/lang/Object;)I" => (292, 14),
    "java/util/ArrayList#get:(I)Ljava/lang/Object;" => (292, 15),
    "java/util/ArrayList#set:(ILjava/lang/Object;)Ljava/lang/Object;" => (292, 16),
    "java/util/ArrayList#remove:(I)Ljava/lang/Object;" => (292, 17),
    "java/util/ArrayList#remove:(Ljava/lang/Object;)Z" => (292, 18),
    "java/util/ArrayList#isEmpty:()Z" => (292, 19),
    "java/util/ArrayList#clear:()V" => (292, 20),
    "java/util/ArrayList#iterator:()Ljava/util/Iterator;" => (292, 21),
    "java/util/ArrayList#listIterator:(I)Ljava/util/ListIterator;" => (292, 22),
    "java/util/ArrayList#listIterator:()Ljava/util/ListIterator;" => (292, 23),
    "java/util/ArrayList#toString:()Ljava/lang/String;" => (292, 24),
    "java/util/ArrayList#writeObject:(Ljava/io/ObjectOutputStream;)V" => (292, 25),
    "java/util/ArrayList#readObject:(Ljava/io/ObjectInputStream;)V" => (292, 26),
    "java/util/ArrayListIterator#<init>:(Ljava/util/List;)V" => (293, 0),
    "java/util/ArrayListIterator#<init>:(Ljava/util/List;I)V" => (293, 1),
    "java/util/ArrayListIterator#hasPrevious:()Z" => (293, 2),
    "java/util/ArrayListIterator#previous:()Ljava/lang/Object;" => (293, 3),
    "java/util/ArrayListIterator#next:()Ljava/lang/Object;" => (293, 4),
    "java/util/ArrayListIterator#hasNext:()Z" => (293, 5),
    "java/util/ArrayListIterator#remove:()V" => (293, 6),
    "java/util/Arrays#<init>:()V" => (294, 0),
    "java/util/Arrays#toString:([Ljava/lang/Object;)Ljava/lang/String;" => (294, 1),
    "java/util/Arrays#toString:([Z)Ljava/lang/String;" => (294, 2),
    "java/util/Arrays#toString:([B)Ljava/lang/String;" => (294, 3),
    "java/util/Arrays#toString:([S)Ljava/lang/String;" => (294, 4),
    "java/util/Arrays#toString:([I)Ljava/lang/String;" => (294, 5),
    "java/util/Arrays#toString:([J)Ljava/lang/String;" => (294, 6),
    "java/util/Arrays#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (294, 7),
    "java/util/Arrays#sort:([Ljava/lang/Object;)V" => (294, 8),
    "java/util/Arrays#sort:([Ljava/lang/Object;Ljava/util/Comparator;)V" => (294, 9),
    "java/util/Arrays#introSort:([Ljava/lang/Object;Ljava/util/Comparator;III)V" => (294, 10),
    "java/util/Arrays#heapSort:([Ljava/lang/Object;Ljava/util/Comparator;II)V" => (294, 11),
    "java/util/Arrays#siftDown:([Ljava/lang/Object;Ljava/util/Comparator;III)V" => (294, 12),
    "java/util/Arrays#insertionSort:([Ljava/lang/Object;Ljava/util/Comparator;)V" => (294, 13),
    "java/util/Arrays#hashCode:([Ljava/lang/Object;)I" => (294, 14),
    "java/util/Arrays#hashCode:([B)I" => (294, 15),
    "java/util/Arrays#equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z" => (294, 16),
    "java/util/Arrays#equals:([B[B)Z" => (294, 17),
    "java/util/Arrays#equals:([I[I)Z" => (294, 18),
    "java/util/Arrays#equals:([J[J)Z" => (294, 19),
    "java/util/Arrays#equals:([S[S)Z" => (294, 20),
    "java/util/Arrays#equals:([C[C)Z" => (294, 21),
    "java/util/Arrays#deepEquals:([Ljava/lang/Object;[Ljava/lang/Object;)Z" => (294, 22),
    "java/util/Arrays#asList:([Ljava/lang/Object;)Ljava/util/List;" => (294, 23),
    "java/util/Arrays#checkRange:(III)V" => (294, 24),
    "java/util/Arrays#fill:([II)V" => (294, 25),
    "java/util/Arrays#fill:([IIII)V" => (294, 26),
    "java/util/Arrays#fill:([CC)V" => (294, 27),
    "java/util/Arrays#fill:([CIIC)V" => (294, 28),
    "java/util/Arrays#fill:([SS)V" => (294, 29),
    "java/util/Arrays#fill:([SIIS)V" => (294, 30),
    "java/util/Arrays#fill:([BB)V" => (294, 31),
    "java/util/Arrays#fill:([BIIB)V" => (294, 32),
    "java/util/Arrays#fill:([ZZ)V" => (294, 33),
    "java/util/Arrays#fill:([ZIIZ)V" => (294, 34),
    "java/util/Arrays#fill:([JJ)V" => (294, 35),
    "java/util/Arrays#fill:([JIIJ)V" => (294, 36),
    "java/util/Arrays#fill:([Ljava/lang/Object;Ljava/lang/Object;)V" => (294, 37),
    "java/util/Arrays#fill:([Ljava/lang/Object;IILjava/lang/Object;)V" => (294, 38),
    "java/util/Arrays#copyOf:([ZI)[Z" => (294, 39),
    "java/util/Arrays#copyOf:([BI)[B" => (294, 40),
    "java/util/Arrays#copyOf:([CI)[C" => (294, 41),
    "java/util/Arrays#copyOf:([II)[I" => (294, 42),
    "java/util/Arrays#copyOf:([JI)[J" => (294, 43),
    "java/util/Arrays#copyOf:([SI)[S" => (294, 44),
    "java/util/Arrays#copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;" => (294, 45),
    "java/util/Arrays#copyOf:([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;" => (294, 46),
    "java/util/Arrays#copyOfRange:([ZII)[Z" => (294, 47),
    "java/util/Arrays#copyOfRange:([BII)[B" => (294, 48),
    "java/util/Arrays#copyOfRange:([CII)[C" => (294, 49),
    "java/util/Arrays#copyOfRange:([III)[I" => (294, 50),
    "java/util/Arrays#copyOfRange:([JII)[J" => (294, 51),
    "java/util/Arrays#copyOfRange:([SII)[S" => (294, 52),
    "java/util/Arrays#copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;" => (294, 53),
    "java/util/Arrays#copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;" => (294, 54),
    "java/util/Arrays#binarySearch:([II)I" => (294, 55),
    "java/util/Arrays#binarySearch:([IIII)I" => (294, 56),
    "java/util/ArraysAbstractList#<init>:([Ljava/lang/Object;)V" => (295, 0),
    "java/util/ArraysAbstractList#size:()I" => (295, 1),
    "java/util/ArraysAbstractList#add:(ILjava/lang/Object;)V" => (295, 2),
    "java/util/ArraysAbstractList#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (295, 3),
    "java/util/ArraysAbstractList#indexOf:(Ljava/lang/Object;)I" => (295, 4),
    "java/util/ArraysAbstractList#lastIndexOf:(Ljava/lang/Object;)I" => (295, 5),
    "java/util/ArraysAbstractList#get:(I)Ljava/lang/Object;" => (295, 6),
    "java/util/ArraysAbstractList#set:(ILjava/lang/Object;)Ljava/lang/Object;" => (295, 7),
    "java/util/ArraysAbstractList#remove:(I)Ljava/lang/Object;" => (295, 8),
    "java/util/ArraysAbstractList#listIterator:(I)Ljava/util/ListIterator;" => (295, 9),
    "java/util/ArraysComparator#<init>:()V" => (296, 0),
    "java/util/ArraysComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I" => (296, 1),
    "java/util/ArraysListIterator#<init>:([Ljava/lang/Object;I)V" => (297, 0),
    "java/util/ArraysListIterator#hasNext:()Z" => (297, 1),
    "java/util/ArraysListIterator#next:()Ljava/lang/Object;" => (297, 2),
    "java/util/ArraysListIterator#remove:()V" => (297, 3),
    "java/util/ArraysListIterator#hasPrevious:()Z" => (297, 4),
    "java/util/ArraysListIterator#previous:()Ljava/lang/Object;" => (297, 5),
    "java/util/ArraysListIterator#nextIndex:()I" => (297, 6),
    "java/util/ArraysListIterator#previousIndex:()I" => (297, 7),
    "java/util/ArraysListIterator#set:(Ljava/lang/Object;)V" => (297, 8),
    "java/util/ArraysListIterator#add:(Ljava/lang/Object;)V" => (297, 9),
    "java/util/BitSet#longPosition:(I)I" => (298, 0),
    "java/util/BitSet#bitPosition:(I)J" => (298, 1),
    "java/util/BitSet#getTrueMask:(II)J" => (298, 2),
    "java/util/BitSet#<init>:(I)V" => (298, 3),
    "java/util/BitSet#<init>:()V" => (298, 4),
    "java/util/BitSet#and:(Ljava/util/BitSet;)V" => (298, 5),
    "java/util/BitSet#andNot:(Ljava/util/BitSet;)V" => (298, 6),
    "java/util/BitSet#or:(Ljava/util/BitSet;)V" => (298, 7),
    "java/util/BitSet#xor:(Ljava/util/BitSet;)V" => (298, 8),
    "java/util/BitSet#enlarge:(I)V" => (298, 9),
    "java/util/BitSet#get:(I)Z" => (298, 10),
    "java/util/BitSet#flip:(I)V" => (298, 11),
    "java/util/BitSet#flip:(II)V" => (298, 12),
    "java/util/BitSet#set:(I)V" => (298, 13),
    "java/util/BitSet#set:(II)V" => (298, 14),
    "java/util/BitSet#clear:(I)V" => (298, 15),
    "java/util/BitSet#clear:(II)V" => (298, 16),
    "java/util/BitSet#isEmpty:()Z" => (298, 17),
    "java/util/BitSet#intersects:(Ljava/util/BitSet;)Z" => (298, 18),
    "java/util/BitSet#length:()I" => (298, 19),
    "java/util/BitSet#nextSetBit:(I)I" => (298, 20),
    "java/util/BitSet#nextBit:(IZ)I" => (298, 21),
    "java/util/BitSet#nextClearBit:(I)I" => (298, 22),
    "java/util/BitSet#cardinality:()I" => (298, 23),
    "java/util/Collection#size:()I" => (299, 0),
    "java/util/Collection#isEmpty:()Z" => (299, 1),
    "java/util/Collection#contains:(Ljava/lang/Object;)Z" => (299, 2),
    "java/util/Collection#containsAll:(Ljava/util/Collection;)Z" => (299, 3),
    "java/util/Collection#add:(Ljava/lang/Object;)Z" => (299, 4),
    "java/util/Collection#addAll:(Ljava/util/Collection;)Z" => (299, 5),
    "java/util/Collection#remove:(Ljava/lang/Object;)Z" => (299, 6),
    "java/util/Collection#removeAll:(Ljava/util/Collection;)Z" => (299, 7),
    "java/util/Collection#toArray:()[Ljava/lang/Object;" => (299, 8),
    "java/util/Collection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (299, 9),
    "java/util/Collection#clear:()V" => (299, 10),
    "java/util/Collection#iterator:()Ljava/util/Iterator;" => (299, 11),
    "java/util/Collections#<init>:()V" => (300, 0),
    "java/util/Collections#sort:(Ljava/util/List;)V" => (300, 1),
    "java/util/Collections#sort:(Ljava/util/List;Ljava/util/Comparator;)V" => (300, 2),
    "java/util/Collections#introSort:(Ljava/util/List;Ljava/util/Comparator;III)V" => (300, 3),
    "java/util/Collections#heapSort:(Ljava/util/List;Ljava/util/Comparator;II)V" => (300, 4),
    "java/util/Collections#siftDown:(Ljava/util/List;Ljava/util/Comparator;III)V" => (300, 5),
    "java/util/Collections#insertionSort:(Ljava/util/List;Ljava/util/Comparator;)V" => (300, 6),
    "java/util/Collections#binarySearch:(Ljava/util/List;Ljava/lang/Object;)I" => (300, 7),
    "java/util/Collections#reverse:(Ljava/util/List;)V" => (300, 8),
    "java/util/Collections#emptyList:()Ljava/util/List;" => (300, 9),
    "java/util/Collections#emptyMap:()Ljava/util/Map;" => (300, 10),
    "java/util/Collections#emptySet:()Ljava/util/Set;" => (300, 11),
    "java/util/Collections#enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;" => (300, 12),
    "java/util/Collections#reverseOrder:(Ljava/util/Comparator;)Ljava/util/Comparator;" => (300, 13),
    "java/util/Collections#synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;" => (300, 14),
    "java/util/Collections#synchronizedSet:(Ljava/util/Set;)Ljava/util/Set;" => (300, 15),
    "java/util/Collections#synchronizedList:(Ljava/util/List;)Ljava/util/List;" => (300, 16),
    "java/util/Collections#unmodifiableList:(Ljava/util/List;)Ljava/util/List;" => (300, 17),
    "java/util/Collections#unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;" => (300, 18),
    "java/util/Collections#unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/UnmodifiableCollection;" => (300, 19),
    "java/util/Collections#unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;" => (300, 20),
    "java/util/Collections#singletonList:(Ljava/lang/Object;)Ljava/util/List;" => (300, 21),
    "java/util/Collections#<clinit>:()V" => (300, 22),
    "java/util/CollectionsComparator#<init>:()V" => (301, 0),
    "java/util/CollectionsComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I" => (301, 1),
    "java/util/Comparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I" => (302, 0),
    "java/util/Date#<init>:()V" => (303, 0),
    "java/util/Date#<init>:(J)V" => (303, 1),
    "java/util/Date#getTime:()J" => (303, 2),
    "java/util/Date#toString:()Ljava/lang/String;" => (303, 3),
    "java/util/Date#toString:(J)Ljava/lang/String;" => (303, 4),
    "java/util/Deque#offerFirst:(Ljava/lang/Object;)Z" => (304, 0),
    "java/util/Deque#push:(Ljava/lang/Object;)V" => (304, 1),
    "java/util/Deque#addFirst:(Ljava/lang/Object;)V" => (304, 2),
    "java/util/Deque#offerLast:(Ljava/lang/Object;)Z" => (304, 3),
    "java/util/Deque#addLast:(Ljava/lang/Object;)V" => (304, 4),
    "java/util/Deque#peekFirst:()Ljava/lang/Object;" => (304, 5),
    "java/util/Deque#getFirst:()Ljava/lang/Object;" => (304, 6),
    "java/util/Deque#peekLast:()Ljava/lang/Object;" => (304, 7),
    "java/util/Deque#getLast:()Ljava/lang/Object;" => (304, 8),
    "java/util/Deque#pollFirst:()Ljava/lang/Object;" => (304, 9),
    "java/util/Deque#removeFirst:()Ljava/lang/Object;" => (304, 10),
    "java/util/Deque#pop:()Ljava/lang/Object;" => (304, 11),
    "java/util/Deque#pollLast:()Ljava/lang/Object;" => (304, 12),
    "java/util/Deque#removeLast:()Ljava/lang/Object;" => (304, 13),
    "java/util/Deque#descendingIterator:()Ljava/util/Iterator;" => (304, 14),
    "java/util/Deque#removeLastOccurrence:(Ljava/lang/Object;)Z" => (304, 15),
    "java/util/Deque#removeFirstOccurrence:(Ljava/lang/Object;)Z" => (304, 16),
    "java/util/Entry#getKey:()Ljava/lang/Object;" => (305, 0),
    "java/util/Entry#getValue:()Ljava/lang/Object;" => (305, 1),
    "java/util/Entry#setValue:(Ljava/lang/Object;)Ljava/lang/Object;" => (305, 2),
    "java/util/EnumSet#<init>:(ILjava/lang/Class;)V" => (306, 0),
    "java/util/EnumSet#add:(Ljava/lang/Enum;)Z" => (306, 1),
    "java/util/EnumSet#remove:(Ljava/lang/Object;)Z" => (306, 2),
    "java/util/EnumSet#contains:(Ljava/lang/Object;)Z" => (306, 3),
    "java/util/EnumSet#size:()I" => (306, 4),
    "java/util/EnumSet#iterator:()Ljava/util/Iterator;" => (306, 5),
    "java/util/EnumSet#allOf:(Ljava/lang/Class;)Ljava/util/EnumSet;" => (306, 6),
    "java/util/EnumSet#noneOf:(Ljava/lang/Class;)Ljava/util/EnumSet;" => (306, 7),
    "java/util/EnumSet#of:(Ljava/lang/Enum;[Ljava/lang/Enum;)Ljava/util/EnumSet;" => (306, 8),
    "java/util/EnumSet#complementOf:(Ljava/util/EnumSet;)Ljava/util/EnumSet;" => (306, 9),
    "java/util/EnumSet#copyOf:(Ljava/util/EnumSet;)Ljava/util/EnumSet;" => (306, 10),
    "java/util/EnumSet#createEmptyEnumSet:(Ljava/lang/Class;)Ljava/util/EnumSet;" => (306, 11),
    "java/util/EnumSet#addAllElementsToSet:(Ljava/lang/Iterable;Ljava/util/EnumSet;)V" => (306, 12),
    "java/util/EnumSet#tryToCast:(Ljava/lang/Object;)Ljava/lang/Enum;" => (306, 13),
    "java/util/EnumSet#add:(Ljava/lang/Object;)Z" => (306, 14),
    "java/util/EnumSetIterator#<init>:(Ljava/util/EnumSet;Ljava/lang/Class;Ljava/util/BitSet;)V" => (307, 0),
    "java/util/EnumSetIterator#next:()Ljava/lang/Enum;" => (307, 1),
    "java/util/EnumSetIterator#hasNext:()Z" => (307, 2),
    "java/util/EnumSetIterator#remove:()V" => (307, 3),
    "java/util/EnumSetIterator#nextIndex:()I" => (307, 4),
    "java/util/EnumSetIterator#next:()Ljava/lang/Object;" => (307, 5),
    "java/util/Enumeration#nextElement:()Ljava/lang/Object;" => (308, 0),
    "java/util/Enumeration#hasMoreElements:()Z" => (308, 1),
    "java/util/EventObject#<init>:(Ljava/lang/Object;)V" => (310, 0),
    "java/util/EventObject#getSource:()Ljava/lang/Object;" => (310, 1),
    "java/util/HashMap#<init>:(ILjava/util/HashMapHelper;)V" => (311, 0),
    "java/util/HashMap#<init>:(I)V" => (311, 1),
    "java/util/HashMap#<init>:()V" => (311, 2),
    "java/util/HashMap#getHead:()Ljava/util/HashMapCell;" => (311, 3),
    "java/util/HashMap#<init>:(Ljava/util/Map;)V" => (311, 4),
    "java/util/HashMap#toString:()Ljava/lang/String;" => (311, 5),
    "java/util/HashMap#isEmpty:()Z" => (311, 6),
    "java/util/HashMap#size:()I" => (311, 7),
    "java/util/HashMap#grow:()V" => (311, 8),
    "java/util/HashMap#shrink:()V" => (311, 9),
    "java/util/HashMap#resize:(I)V" => (311, 10),
    "java/util/HashMap#find:(Ljava/lang/Object;)Ljava/util/HashMapCell;" => (311, 11),
    "java/util/HashMap#insert:(Ljava/util/HashMapCell;)V" => (311, 12),
    "java/util/HashMap#remove:(Ljava/util/HashMapCell;)V" => (311, 13),
    "java/util/HashMap#putCell:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMapCell;" => (311, 14),
    "java/util/HashMap#containsKey:(Ljava/lang/Object;)Z" => (311, 15),
    "java/util/HashMap#containsValue:(Ljava/lang/Object;)Z" => (311, 16),
    "java/util/HashMap#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (311, 17),
    "java/util/HashMap#removeCell:(Ljava/lang/Object;)Ljava/util/HashMapCell;" => (311, 18),
    "java/util/HashMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" => (311, 19),
    "java/util/HashMap#putAll:(Ljava/util/Map;)V" => (311, 20),
    "java/util/HashMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;" => (311, 21),
    "java/util/HashMap#clear:()V" => (311, 22),
    "java/util/HashMap#entrySet:()Ljava/util/Set;" => (311, 23),
    "java/util/HashMap#keySet:()Ljava/util/Set;" => (311, 24),
    "java/util/HashMap#values:()Ljava/util/Collection;" => (311, 25),
    "java/util/HashMap#iterator:()Ljava/util/Iterator;" => (311, 26),
    "java/util/HashMapCell#next:()Ljava/util/HashMapCell;" => (312, 0),
    "java/util/HashMapCell#setNext:(Ljava/util/HashMapCell;)V" => (312, 1),
    "java/util/HashMapCell#getKey:()Ljava/lang/Object;" => (312, 2),
    "java/util/HashMapCell#getValue:()Ljava/lang/Object;" => (312, 3),
    "java/util/HashMapCell#before:()Ljava/util/HashMapCell;" => (312, 4),
    "java/util/HashMapCell#setBefore:(Ljava/util/HashMapCell;)V" => (312, 5),
    "java/util/HashMapCell#after:()Ljava/util/HashMapCell;" => (312, 6),
    "java/util/HashMapCell#setAfter:(Ljava/util/HashMapCell;)V" => (312, 7),
    "java/util/HashMapHelper#make:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;)Ljava/util/HashMapCell;" => (313, 0),
    "java/util/HashMapHelper#hash:(Ljava/lang/Object;)I" => (313, 1),
    "java/util/HashMapHelper#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (313, 2),
    "java/util/HashMapMyCell#<init>:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;I)V" => (314, 0),
    "java/util/HashMapMyCell#getKey:()Ljava/lang/Object;" => (314, 1),
    "java/util/HashMapMyCell#getValue:()Ljava/lang/Object;" => (314, 2),
    "java/util/HashMapMyCell#setValue:(Ljava/lang/Object;)Ljava/lang/Object;" => (314, 3),
    "java/util/HashMapMyCell#next:()Ljava/util/HashMapCell;" => (314, 4),
    "java/util/HashMapMyCell#setNext:(Ljava/util/HashMapCell;)V" => (314, 5),
    "java/util/HashMapMyCell#hashCode:()I" => (314, 6),
    "java/util/HashMapMyCell#before:()Ljava/util/HashMapCell;" => (314, 7),
    "java/util/HashMapMyCell#setBefore:(Ljava/util/HashMapCell;)V" => (314, 8),
    "java/util/HashMapMyCell#after:()Ljava/util/HashMapCell;" => (314, 9),
    "java/util/HashMapMyCell#setAfter:(Ljava/util/HashMapCell;)V" => (314, 10),
    "java/util/HashMapMyEntryMap#<init>:(Ljava/util/HashMap;)V" => (315, 0),
    "java/util/HashMapMyEntryMap#size:()I" => (315, 1),
    "java/util/HashMapMyEntryMap#find:(Ljava/lang/Object;)Ljava/util/Entry;" => (315, 2),
    "java/util/HashMapMyEntryMap#remove:(Ljava/lang/Object;)Ljava/util/Entry;" => (315, 3),
    "java/util/HashMapMyEntryMap#clear:()V" => (315, 4),
    "java/util/HashMapMyEntryMap#iterator:()Ljava/util/Iterator;" => (315, 5),
    "java/util/HashMapMyHelper#<init>:()V" => (316, 0),
    "java/util/HashMapMyHelper#make:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;)Ljava/util/HashMapCell;" => (316, 1),
    "java/util/HashMapMyHelper#hash:(Ljava/lang/Object;)I" => (316, 2),
    "java/util/HashMapMyHelper#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (316, 3),
    "java/util/HashMapMyIterator#<init>:(Ljava/util/HashMap;)V" => (317, 0),
    "java/util/HashMapMyIterator#hasNext:()Z" => (317, 1),
    "java/util/HashMapMyIterator#next:()Ljava/util/Entry;" => (317, 2),
    "java/util/HashMapMyIterator#remove:()V" => (317, 3),
    "java/util/HashMapMyIterator#next:()Ljava/lang/Object;" => (317, 4),
    "java/util/HashSet#<init>:(Ljava/util/Collection;)V" => (318, 0),
    "java/util/HashSet#<init>:(I)V" => (318, 1),
    "java/util/HashSet#<init>:()V" => (318, 2),
    "java/util/HashSet#size:()I" => (318, 3),
    "java/util/HashSet#isEmpty:()Z" => (318, 4),
    "java/util/HashSet#contains:(Ljava/lang/Object;)Z" => (318, 5),
    "java/util/HashSet#add:(Ljava/lang/Object;)Z" => (318, 6),
    "java/util/HashSet#addAll:(Ljava/util/Collection;)Z" => (318, 7),
    "java/util/HashSet#remove:(Ljava/lang/Object;)Z" => (318, 8),
    "java/util/HashSet#clear:()V" => (318, 9),
    "java/util/HashSet#iterator:()Ljava/util/Iterator;" => (318, 10),
    "java/util/HashSet#toString:()Ljava/lang/String;" => (318, 11),
    "java/util/HashSet#<clinit>:()V" => (318, 12),
    "java/util/HashSetMyIterator#<init>:(Ljava/util/Iterator;)V" => (319, 0),
    "java/util/HashSetMyIterator#next:()Ljava/lang/Object;" => (319, 1),
    "java/util/HashSetMyIterator#hasNext:()Z" => (319, 2),
    "java/util/HashSetMyIterator#remove:()V" => (319, 3),
    "java/util/Hashtable#<init>:(I)V" => (320, 0),
    "java/util/Hashtable#<init>:()V" => (320, 1),
    "java/util/Hashtable#<init>:(Ljava/util/Map;)V" => (320, 2),
    "java/util/Hashtable#toString:()Ljava/lang/String;" => (320, 3),
    "java/util/Hashtable#isEmpty:()Z" => (320, 4),
    "java/util/Hashtable#size:()I" => (320, 5),
    "java/util/Hashtable#containsKey:(Ljava/lang/Object;)Z" => (320, 6),
    "java/util/Hashtable#containsValue:(Ljava/lang/Object;)Z" => (320, 7),
    "java/util/Hashtable#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (320, 8),
    "java/util/Hashtable#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" => (320, 9),
    "java/util/Hashtable#putAll:(Ljava/util/Map;)V" => (320, 10),
    "java/util/Hashtable#remove:(Ljava/lang/Object;)Ljava/lang/Object;" => (320, 11),
    "java/util/Hashtable#clear:()V" => (320, 12),
    "java/util/Hashtable#keys:()Ljava/util/Enumeration;" => (320, 13),
    "java/util/Hashtable#elements:()Ljava/util/Enumeration;" => (320, 14),
    "java/util/Hashtable#entrySet:()Ljava/util/Set;" => (320, 15),
    "java/util/Hashtable#keySet:()Ljava/util/Set;" => (320, 16),
    "java/util/Hashtable#values:()Ljava/util/Collection;" => (320, 17),
    "java/util/IdentityHashMap#<init>:(I)V" => (321, 0),
    "java/util/IdentityHashMap#<init>:()V" => (321, 1),
    "java/util/IdentityHashMap#isEmpty:()Z" => (321, 2),
    "java/util/IdentityHashMap#size:()I" => (321, 3),
    "java/util/IdentityHashMap#containsKey:(Ljava/lang/Object;)Z" => (321, 4),
    "java/util/IdentityHashMap#containsValue:(Ljava/lang/Object;)Z" => (321, 5),
    "java/util/IdentityHashMap#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (321, 6),
    "java/util/IdentityHashMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" => (321, 7),
    "java/util/IdentityHashMap#putAll:(Ljava/util/Map;)V" => (321, 8),
    "java/util/IdentityHashMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;" => (321, 9),
    "java/util/IdentityHashMap#clear:()V" => (321, 10),
    "java/util/IdentityHashMap#entrySet:()Ljava/util/Set;" => (321, 11),
    "java/util/IdentityHashMap#keySet:()Ljava/util/Set;" => (321, 12),
    "java/util/IdentityHashMap#values:()Ljava/util/Collection;" => (321, 13),
    "java/util/IdentityHashMapMyHelper#<init>:()V" => (322, 0),
    "java/util/IdentityHashMapMyHelper#hash:(Ljava/lang/Object;)I" => (322, 1),
    "java/util/IdentityHashMapMyHelper#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (322, 2),
    "java/util/IllegalFormatException#<init>:()V" => (323, 0),
    "java/util/IllegalFormatException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (323, 1),
    "java/util/IllegalFormatException#<init>:(Ljava/lang/String;)V" => (323, 2),
    "java/util/IllegalFormatException#<init>:(Ljava/lang/Throwable;)V" => (323, 3),
    "java/util/IterationModificationException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V" => (324, 0),
    "java/util/IterationModificationException#<init>:(Ljava/lang/String;)V" => (324, 1),
    "java/util/IterationModificationException#<init>:(Ljava/lang/Throwable;)V" => (324, 2),
    "java/util/IterationModificationException#<init>:()V" => (324, 3),
    "java/util/Iterator#next:()Ljava/lang/Object;" => (325, 0),
    "java/util/Iterator#hasNext:()Z" => (325, 1),
    "java/util/Iterator#remove:()V" => (325, 2),
    "java/util/IteratorEnumeration#<init>:(Ljava/util/Iterator;)V" => (326, 0),
    "java/util/IteratorEnumeration#nextElement:()Ljava/lang/Object;" => (326, 1),
    "java/util/IteratorEnumeration#hasMoreElements:()Z" => (326, 2),
    "java/util/LinkedList#<init>:(Ljava/util/Collection;)V" => (327, 0),
    "java/util/LinkedList#<init>:()V" => (327, 1),
    "java/util/LinkedList#getFront:()Ljava/util/LinkedListCell;" => (327, 2),
    "java/util/LinkedList#removeCell:(Ljava/util/LinkedListCell;)V" => (327, 3),
    "java/util/LinkedList#incrementSize:()V" => (327, 4),
    "java/util/LinkedList#find:(I)Ljava/util/LinkedListCell;" => (327, 5),
    "java/util/LinkedList#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (327, 6),
    "java/util/LinkedList#addFirst:(Ljava/util/LinkedListCell;)V" => (327, 7),
    "java/util/LinkedList#addLast:(Ljava/util/LinkedListCell;)V" => (327, 8),
    "java/util/LinkedList#find:(Ljava/lang/Object;)Ljava/util/LinkedListCell;" => (327, 9),
    "java/util/LinkedList#remove:(Ljava/util/LinkedListCell;)V" => (327, 10),
    "java/util/LinkedList#size:()I" => (327, 11),
    "java/util/LinkedList#contains:(Ljava/lang/Object;)Z" => (327, 12),
    "java/util/LinkedList#indexOf:(Ljava/lang/Object;)I" => (327, 13),
    "java/util/LinkedList#lastIndexOf:(Ljava/lang/Object;)I" => (327, 14),
    "java/util/LinkedList#offer:(Ljava/lang/Object;)Z" => (327, 15),
    "java/util/LinkedList#add:(Ljava/lang/Object;)Z" => (327, 16),
    "java/util/LinkedList#addAll:(Ljava/util/Collection;)Z" => (327, 17),
    "java/util/LinkedList#add:(ILjava/lang/Object;)V" => (327, 18),
    "java/util/LinkedList#offerFirst:(Ljava/lang/Object;)Z" => (327, 19),
    "java/util/LinkedList#push:(Ljava/lang/Object;)V" => (327, 20),
    "java/util/LinkedList#addFirst:(Ljava/lang/Object;)V" => (327, 21),
    "java/util/LinkedList#offerLast:(Ljava/lang/Object;)Z" => (327, 22),
    "java/util/LinkedList#addLast:(Ljava/lang/Object;)V" => (327, 23),
    "java/util/LinkedList#get:(I)Ljava/lang/Object;" => (327, 24),
    "java/util/LinkedList#set:(ILjava/lang/Object;)Ljava/lang/Object;" => (327, 25),
    "java/util/LinkedList#peek:()Ljava/lang/Object;" => (327, 26),
    "java/util/LinkedList#peekFirst:()Ljava/lang/Object;" => (327, 27),
    "java/util/LinkedList#getFirst:()Ljava/lang/Object;" => (327, 28),
    "java/util/LinkedList#peekLast:()Ljava/lang/Object;" => (327, 29),
    "java/util/LinkedList#getLast:()Ljava/lang/Object;" => (327, 30),
    "java/util/LinkedList#remove:(I)Ljava/lang/Object;" => (327, 31),
    "java/util/LinkedList#isEmpty:()Z" => (327, 32),
    "java/util/LinkedList#poll:()Ljava/lang/Object;" => (327, 33),
    "java/util/LinkedList#pollFirst:()Ljava/lang/Object;" => (327, 34),
    "java/util/LinkedList#removeFirst:()Ljava/lang/Object;" => (327, 35),
    "java/util/LinkedList#pop:()Ljava/lang/Object;" => (327, 36),
    "java/util/LinkedList#remove:()Ljava/lang/Object;" => (327, 37),
    "java/util/LinkedList#pollLast:()Ljava/lang/Object;" => (327, 38),
    "java/util/LinkedList#removeLast:()Ljava/lang/Object;" => (327, 39),
    "java/util/LinkedList#remove:(Ljava/lang/Object;)Z" => (327, 40),
    "java/util/LinkedList#clear:()V" => (327, 41),
    "java/util/LinkedList#iterator:()Ljava/util/Iterator;" => (327, 42),
    "java/util/LinkedList#listIterator:()Ljava/util/ListIterator;" => (327, 43),
    "java/util/LinkedList#listIterator:(I)Ljava/util/ListIterator;" => (327, 44),
    "java/util/LinkedList#descendingIterator:()Ljava/util/Iterator;" => (327, 45),
    "java/util/LinkedList#toString:()Ljava/lang/String;" => (327, 46),
    "java/util/LinkedList#element:()Ljava/lang/Object;" => (327, 47),
    "java/util/LinkedList#removeFirstOccurrence:(Ljava/lang/Object;)Z" => (327, 48),
    "java/util/LinkedList#removeLastOccurrence:(Ljava/lang/Object;)Z" => (327, 49),
    "java/util/LinkedListCell#<init>:(Ljava/lang/Object;Ljava/util/LinkedListCell;Ljava/util/LinkedListCell;)V" => (328, 0),
    "java/util/LinkedListDescendingIterator#<init>:(Ljava/util/ListIterator;)V" => (329, 0),
    "java/util/LinkedListDescendingIterator#next:()Ljava/lang/Object;" => (329, 1),
    "java/util/LinkedListDescendingIterator#hasNext:()Z" => (329, 2),
    "java/util/LinkedListDescendingIterator#remove:()V" => (329, 3),
    "java/util/LinkedListMyIterator#<init>:(Ljava/util/LinkedList;)V" => (330, 0),
    "java/util/LinkedListMyIterator#previous:()Ljava/lang/Object;" => (330, 1),
    "java/util/LinkedListMyIterator#next:()Ljava/lang/Object;" => (330, 2),
    "java/util/LinkedListMyIterator#hasNext:()Z" => (330, 3),
    "java/util/LinkedListMyIterator#hasPrevious:()Z" => (330, 4),
    "java/util/LinkedListMyIterator#remove:()V" => (330, 5),
    "java/util/LinkedListMyIterator#nextIndex:()I" => (330, 6),
    "java/util/LinkedListMyIterator#previousIndex:()I" => (330, 7),
    "java/util/LinkedListMyIterator#set:(Ljava/lang/Object;)V" => (330, 8),
    "java/util/LinkedListMyIterator#add:(Ljava/lang/Object;)V" => (330, 9),
    "java/util/List#size:()I" => (331, 0),
    "java/util/List#get:(I)Ljava/lang/Object;" => (331, 1),
    "java/util/List#set:(ILjava/lang/Object;)Ljava/lang/Object;" => (331, 2),
    "java/util/List#remove:(I)Ljava/lang/Object;" => (331, 3),
    "java/util/List#add:(Ljava/lang/Object;)Z" => (331, 4),
    "java/util/List#add:(ILjava/lang/Object;)V" => (331, 5),
    "java/util/List#addAll:(ILjava/util/Collection;)Z" => (331, 6),
    "java/util/List#indexOf:(Ljava/lang/Object;)I" => (331, 7),
    "java/util/List#lastIndexOf:(Ljava/lang/Object;)I" => (331, 8),
    "java/util/List#isEmpty:()Z" => (331, 9),
    "java/util/List#iterator:()Ljava/util/Iterator;" => (331, 10),
    "java/util/List#listIterator:(I)Ljava/util/ListIterator;" => (331, 11),
    "java/util/List#listIterator:()Ljava/util/ListIterator;" => (331, 12),
    "java/util/ListIterator#hasPrevious:()Z" => (332, 0),
    "java/util/ListIterator#previous:()Ljava/lang/Object;" => (332, 1),
    "java/util/Map#isEmpty:()Z" => (333, 0),
    "java/util/Map#size:()I" => (333, 1),
    "java/util/Map#containsKey:(Ljava/lang/Object;)Z" => (333, 2),
    "java/util/Map#containsValue:(Ljava/lang/Object;)Z" => (333, 3),
    "java/util/Map#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (333, 4),
    "java/util/Map#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" => (333, 5),
    "java/util/Map#putAll:(Ljava/util/Map;)V" => (333, 6),
    "java/util/Map#remove:(Ljava/lang/Object;)Ljava/lang/Object;" => (333, 7),
    "java/util/Map#clear:()V" => (333, 8),
    "java/util/Map#entrySet:()Ljava/util/Set;" => (333, 9),
    "java/util/Map#keySet:()Ljava/util/Set;" => (333, 10),
    "java/util/Map#values:()Ljava/util/Collection;" => (333, 11),
    "java/util/Map#equals:(Ljava/lang/Object;)Z" => (333, 12),
    "java/util/Map#hashCode:()I" => (333, 13),
    "java/util/MaskInfo#<init>:(JI)V" => (334, 0),
    "java/util/MaskInfoIterator#longPosition:(I)I" => (335, 0),
    "java/util/MaskInfoIterator#getTrueMask:(II)J" => (335, 1),
    "java/util/MaskInfoIterator#<init>:(II)V" => (335, 2),
    "java/util/MaskInfoIterator#next:()Ljava/util/MaskInfo;" => (335, 3),
    "java/util/MaskInfoIterator#hasNext:()Z" => (335, 4),
    "java/util/MaskInfoIterator#remove:()V" => (335, 5),
    "java/util/MaskInfoIterator#getLastPartition:()I" => (335, 6),
    "java/util/MaskInfoIterator#next:()Ljava/lang/Object;" => (335, 7),
    "java/util/NoSuchElementException#<init>:(Ljava/lang/String;)V" => (336, 0),
    "java/util/NoSuchElementException#<init>:()V" => (336, 1),
    "java/util/Objects#<init>:()V" => (337, 0),
    "java/util/Objects#compare:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I" => (337, 1),
    "java/util/Objects#deepEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (337, 2),
    "java/util/Objects#equals:(Ljava/lang/Object;Ljava/lang/Object;)Z" => (337, 3),
    "java/util/Objects#hash:([Ljava/lang/Object;)I" => (337, 4),
    "java/util/Objects#hashCode:(Ljava/lang/Object;)I" => (337, 5),
    "java/util/Objects#requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;" => (337, 6),
    "java/util/Objects#requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;" => (337, 7),
    "java/util/Objects#toString:(Ljava/lang/Object;)Ljava/lang/String;" => (337, 8),
    "java/util/Objects#toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;" => (337, 9),
    "java/util/Queue#add:(Ljava/lang/Object;)Z" => (338, 0),
    "java/util/Queue#element:()Ljava/lang/Object;" => (338, 1),
    "java/util/Queue#offer:(Ljava/lang/Object;)Z" => (338, 2),
    "java/util/Queue#peek:()Ljava/lang/Object;" => (338, 3),
    "java/util/Queue#poll:()Ljava/lang/Object;" => (338, 4),
    "java/util/Queue#remove:()Ljava/lang/Object;" => (338, 5),
    "java/util/RandomAccessSynchronizedList#<init>:(Ljava/util/List;)V" => (340, 0),
    "java/util/ReverseComparator#<init>:(Ljava/util/Comparator;)V" => (341, 0),
    "java/util/ReverseComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I" => (341, 1),
    "java/util/Set#iterator:()Ljava/util/Iterator;" => (342, 0),
    "java/util/SynchronizedCollection#<init>:(Ljava/lang/Object;Ljava/util/Collection;)V" => (343, 0),
    "java/util/SynchronizedCollection#size:()I" => (343, 1),
    "java/util/SynchronizedCollection#isEmpty:()Z" => (343, 2),
    "java/util/SynchronizedCollection#contains:(Ljava/lang/Object;)Z" => (343, 3),
    "java/util/SynchronizedCollection#add:(Ljava/lang/Object;)Z" => (343, 4),
    "java/util/SynchronizedCollection#addAll:(Ljava/util/Collection;)Z" => (343, 5),
    "java/util/SynchronizedCollection#remove:(Ljava/lang/Object;)Z" => (343, 6),
    "java/util/SynchronizedCollection#toArray:()[Ljava/lang/Object;" => (343, 7),
    "java/util/SynchronizedCollection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (343, 8),
    "java/util/SynchronizedCollection#clear:()V" => (343, 9),
    "java/util/SynchronizedCollection#iterator:()Ljava/util/Iterator;" => (343, 10),
    "java/util/SynchronizedCollection#containsAll:(Ljava/util/Collection;)Z" => (343, 11),
    "java/util/SynchronizedCollection#removeAll:(Ljava/util/Collection;)Z" => (343, 12),
    "java/util/SynchronizedIterator#<init>:(Ljava/lang/Object;Ljava/util/Iterator;)V" => (344, 0),
    "java/util/SynchronizedIterator#next:()Ljava/lang/Object;" => (344, 1),
    "java/util/SynchronizedIterator#hasNext:()Z" => (344, 2),
    "java/util/SynchronizedIterator#remove:()V" => (344, 3),
    "java/util/SynchronizedList#<init>:(Ljava/util/List;)V" => (345, 0),
    "java/util/SynchronizedList#get:(I)Ljava/lang/Object;" => (345, 1),
    "java/util/SynchronizedList#set:(ILjava/lang/Object;)Ljava/lang/Object;" => (345, 2),
    "java/util/SynchronizedList#remove:(I)Ljava/lang/Object;" => (345, 3),
    "java/util/SynchronizedList#add:(ILjava/lang/Object;)V" => (345, 4),
    "java/util/SynchronizedList#addAll:(ILjava/util/Collection;)Z" => (345, 5),
    "java/util/SynchronizedList#indexOf:(Ljava/lang/Object;)I" => (345, 6),
    "java/util/SynchronizedList#lastIndexOf:(Ljava/lang/Object;)I" => (345, 7),
    "java/util/SynchronizedList#listIterator:(I)Ljava/util/ListIterator;" => (345, 8),
    "java/util/SynchronizedList#listIterator:()Ljava/util/ListIterator;" => (345, 9),
    "java/util/SynchronizedMap#<init>:(Ljava/util/Map;)V" => (346, 0),
    "java/util/SynchronizedMap#<init>:(Ljava/lang/Object;Ljava/util/Map;)V" => (346, 1),
    "java/util/SynchronizedMap#clear:()V" => (346, 2),
    "java/util/SynchronizedMap#containsKey:(Ljava/lang/Object;)Z" => (346, 3),
    "java/util/SynchronizedMap#containsValue:(Ljava/lang/Object;)Z" => (346, 4),
    "java/util/SynchronizedMap#entrySet:()Ljava/util/Set;" => (346, 5),
    "java/util/SynchronizedMap#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (346, 6),
    "java/util/SynchronizedMap#isEmpty:()Z" => (346, 7),
    "java/util/SynchronizedMap#keySet:()Ljava/util/Set;" => (346, 8),
    "java/util/SynchronizedMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" => (346, 9),
    "java/util/SynchronizedMap#putAll:(Ljava/util/Map;)V" => (346, 10),
    "java/util/SynchronizedMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;" => (346, 11),
    "java/util/SynchronizedMap#size:()I" => (346, 12),
    "java/util/SynchronizedMap#values:()Ljava/util/Collection;" => (346, 13),
    "java/util/SynchronizedSet#<init>:(Ljava/lang/Object;Ljava/util/Set;)V" => (347, 0),
    "java/util/UnmodifiableCollection#<init>:(Ljava/util/Collection;)V" => (348, 0),
    "java/util/UnmodifiableCollection#iterator:()Ljava/util/Iterator;" => (348, 1),
    "java/util/UnmodifiableCollection#size:()I" => (348, 2),
    "java/util/UnmodifiableCollection#isEmpty:()Z" => (348, 3),
    "java/util/UnmodifiableCollection#contains:(Ljava/lang/Object;)Z" => (348, 4),
    "java/util/UnmodifiableCollection#containsAll:(Ljava/util/Collection;)Z" => (348, 5),
    "java/util/UnmodifiableCollection#add:(Ljava/lang/Object;)Z" => (348, 6),
    "java/util/UnmodifiableCollection#addAll:(Ljava/util/Collection;)Z" => (348, 7),
    "java/util/UnmodifiableCollection#remove:(Ljava/lang/Object;)Z" => (348, 8),
    "java/util/UnmodifiableCollection#removeAll:(Ljava/util/Collection;)Z" => (348, 9),
    "java/util/UnmodifiableCollection#toArray:()[Ljava/lang/Object;" => (348, 10),
    "java/util/UnmodifiableCollection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (348, 11),
    "java/util/UnmodifiableCollection#clear:()V" => (348, 12),
    "java/util/UnmodifiableIterator#<init>:(Ljava/util/Iterator;)V" => (349, 0),
    "java/util/UnmodifiableIterator#next:()Ljava/lang/Object;" => (349, 1),
    "java/util/UnmodifiableIterator#hasNext:()Z" => (349, 2),
    "java/util/UnmodifiableIterator#remove:()V" => (349, 3),
    "java/util/UnmodifiableList#<init>:(Ljava/util/List;)V" => (350, 0),
    "java/util/UnmodifiableList#get:(I)Ljava/lang/Object;" => (350, 1),
    "java/util/UnmodifiableList#set:(ILjava/lang/Object;)Ljava/lang/Object;" => (350, 2),
    "java/util/UnmodifiableList#remove:(I)Ljava/lang/Object;" => (350, 3),
    "java/util/UnmodifiableList#remove:(Ljava/lang/Object;)Z" => (350, 4),
    "java/util/UnmodifiableList#add:(Ljava/lang/Object;)Z" => (350, 5),
    "java/util/UnmodifiableList#add:(ILjava/lang/Object;)V" => (350, 6),
    "java/util/UnmodifiableList#iterator:()Ljava/util/Iterator;" => (350, 7),
    "java/util/UnmodifiableList#indexOf:(Ljava/lang/Object;)I" => (350, 8),
    "java/util/UnmodifiableList#lastIndexOf:(Ljava/lang/Object;)I" => (350, 9),
    "java/util/UnmodifiableList#isEmpty:()Z" => (350, 10),
    "java/util/UnmodifiableList#listIterator:(I)Ljava/util/ListIterator;" => (350, 11),
    "java/util/UnmodifiableList#listIterator:()Ljava/util/ListIterator;" => (350, 12),
    "java/util/UnmodifiableList#size:()I" => (350, 13),
    "java/util/UnmodifiableList#contains:(Ljava/lang/Object;)Z" => (350, 14),
    "java/util/UnmodifiableList#addAll:(Ljava/util/Collection;)Z" => (350, 15),
    "java/util/UnmodifiableList#toArray:()[Ljava/lang/Object;" => (350, 16),
    "java/util/UnmodifiableList#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;" => (350, 17),
    "java/util/UnmodifiableList#clear:()V" => (350, 18),
    "java/util/UnmodifiableList#removeAll:(Ljava/util/Collection;)Z" => (350, 19),
    "java/util/UnmodifiableList#addAll:(ILjava/util/Collection;)Z" => (350, 20),
    "java/util/UnmodifiableList#containsAll:(Ljava/util/Collection;)Z" => (350, 21),
    "java/util/UnmodifiableListIterator#<init>:(Ljava/util/ListIterator;)V" => (351, 0),
    "java/util/UnmodifiableListIterator#hasPrevious:()Z" => (351, 1),
    "java/util/UnmodifiableListIterator#previous:()Ljava/lang/Object;" => (351, 2),
    "java/util/UnmodifiableMap#<init>:(Ljava/util/Map;)V" => (352, 0),
    "java/util/UnmodifiableMap#clear:()V" => (352, 1),
    "java/util/UnmodifiableMap#containsKey:(Ljava/lang/Object;)Z" => (352, 2),
    "java/util/UnmodifiableMap#containsValue:(Ljava/lang/Object;)Z" => (352, 3),
    "java/util/UnmodifiableMap#entrySet:()Ljava/util/Set;" => (352, 4),
    "java/util/UnmodifiableMap#get:(Ljava/lang/Object;)Ljava/lang/Object;" => (352, 5),
    "java/util/UnmodifiableMap#isEmpty:()Z" => (352, 6),
    "java/util/UnmodifiableMap#keySet:()Ljava/util/Set;" => (352, 7),
    "java/util/UnmodifiableMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" => (352, 8),
    "java/util/UnmodifiableMap#putAll:(Ljava/util/Map;)V" => (352, 9),
    "java/util/UnmodifiableMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;" => (352, 10),
    "java/util/UnmodifiableMap#size:()I" => (352, 11),
    "java/util/UnmodifiableMap#values:()Ljava/util/Collection;" => (352, 12),
    "java/util/UnmodifiableSet#<init>:(Ljava/util/Set;)V" => (353, 0),
};

pub static FIELDS_BY_KEY: phf::Map<&'static str, (usize, usize)> = phf_map! {
    "java/base/Addendum#pool:Ljava/base/Singleton;" => (0, 0),
    "java/base/Addendum#annotationTable:Ljava/lang/Object;" => (0, 1),
    "java/base/Addendum#signature:Ljava/lang/Object;" => (0, 2),
    "java/base/AnnotationInvocationHandler#data:[Ljava/lang/Object;" => (1, 0),
    "java/base/Assembler#ACC_PUBLIC:I" => (2, 0),
    "java/base/Assembler#ACC_STATIC:I" => (2, 1),
    "java/base/Assembler#aaload:I" => (2, 2),
    "java/base/Assembler#aastore:I" => (2, 3),
    "java/base/Assembler#aload:I" => (2, 4),
    "java/base/Assembler#aload_0:I" => (2, 5),
    "java/base/Assembler#aload_1:I" => (2, 6),
    "java/base/Assembler#astore_0:I" => (2, 7),
    "java/base/Assembler#anewarray:I" => (2, 8),
    "java/base/Assembler#areturn:I" => (2, 9),
    "java/base/Assembler#dload:I" => (2, 10),
    "java/base/Assembler#dreturn:I" => (2, 11),
    "java/base/Assembler#dup:I" => (2, 12),
    "java/base/Assembler#fload:I" => (2, 13),
    "java/base/Assembler#freturn:I" => (2, 14),
    "java/base/Assembler#getfield:I" => (2, 15),
    "java/base/Assembler#goto_:I" => (2, 16),
    "java/base/Assembler#iload:I" => (2, 17),
    "java/base/Assembler#invokeinterface:I" => (2, 18),
    "java/base/Assembler#invokespecial:I" => (2, 19),
    "java/base/Assembler#invokestatic:I" => (2, 20),
    "java/base/Assembler#invokevirtual:I" => (2, 21),
    "java/base/Assembler#ireturn:I" => (2, 22),
    "java/base/Assembler#jsr:I" => (2, 23),
    "java/base/Assembler#ldc_w:I" => (2, 24),
    "java/base/Assembler#lload:I" => (2, 25),
    "java/base/Assembler#lreturn:I" => (2, 26),
    "java/base/Assembler#new_:I" => (2, 27),
    "java/base/Assembler#pop:I" => (2, 28),
    "java/base/Assembler#putfield:I" => (2, 29),
    "java/base/Assembler#ret:I" => (2, 30),
    "java/base/Assembler#return_:I" => (2, 31),
    "java/base/Cell#value:Ljava/lang/Object;" => (6, 0),
    "java/base/Cell#next:Ljava/base/Cell;" => (6, 1),
    "java/base/ClassAddendum#interfaceTable:[Ljava/lang/Object;" => (7, 0),
    "java/base/ClassAddendum#innerClassTable:[Ljava/base/InnerClassReference;" => (7, 1),
    "java/base/ClassAddendum#declaredMethodCount:I" => (7, 2),
    "java/base/ClassAddendum#enclosingClass:[B" => (7, 3),
    "java/base/ClassAddendum#enclosingMethod:Ljava/base/Pair;" => (7, 4),
    "java/base/ClassPoolEntry#CONSTANT_Class:I" => (8, 0),
    "java/base/ClassPoolEntry#nameIndex:I" => (8, 1),
    "java/base/Classes#LinkFlag:I" => (9, 0),
    "java/base/DataEntrySet#map:Ljava/base/DataEntryMap;" => (14, 0),
    "java/base/DataKeyIterator#it:Ljava/util/Iterator;" => (15, 0),
    "java/base/DataKeySet#map:Ljava/base/DataEntryMap;" => (16, 0),
    "java/base/DataValueIterator#it:Ljava/util/Iterator;" => (17, 0),
    "java/base/DataValues#map:Ljava/base/DataEntryMap;" => (18, 0),
    "java/base/FieldData#flags:I" => (20, 0),
    "java/base/FieldData#nameIndex:I" => (20, 1),
    "java/base/FieldData#specIndex:I" => (20, 2),
    "java/base/FieldRefPoolEntry#CONSTANT_Fieldref:I" => (21, 0),
    "java/base/FieldRefPoolEntry#classIndex:I" => (21, 1),
    "java/base/FieldRefPoolEntry#nameAndTypeIndex:I" => (21, 2),
    "java/base/InnerClassReference#inner:[B" => (24, 0),
    "java/base/InnerClassReference#outer:[B" => (24, 1),
    "java/base/InnerClassReference#name:[B" => (24, 2),
    "java/base/InnerClassReference#flags:S" => (24, 3),
    "java/base/IntegerPoolEntry#CONSTANT_Integer:I" => (25, 0),
    "java/base/IntegerPoolEntry#value:I" => (25, 1),
    "java/base/InterfaceMethodRefPoolEntry#CONSTANT_InterfaceMethodref:I" => (26, 0),
    "java/base/InterfaceMethodRefPoolEntry#classIndex:I" => (26, 1),
    "java/base/InterfaceMethodRefPoolEntry#nameAndTypeIndex:I" => (26, 2),
    "java/base/MethodAddendum#exceptionTable:Ljava/lang/Object;" => (27, 0),
    "java/base/MethodAddendum#annotationDefault:Ljava/lang/Object;" => (27, 1),
    "java/base/MethodAddendum#parameterAnnotationTable:Ljava/lang/Object;" => (27, 2),
    "java/base/MethodData#flags:I" => (28, 0),
    "java/base/MethodData#nameIndex:I" => (28, 1),
    "java/base/MethodData#specIndex:I" => (28, 2),
    "java/base/MethodData#code:[B" => (28, 3),
    "java/base/MethodRefPoolEntry#CONSTANT_Methodref:I" => (29, 0),
    "java/base/MethodRefPoolEntry#classIndex:I" => (29, 1),
    "java/base/MethodRefPoolEntry#nameAndTypeIndex:I" => (29, 2),
    "java/base/NameAndTypePoolEntry#CONSTANT_NameAndType:I" => (30, 0),
    "java/base/NameAndTypePoolEntry#nameIndex:I" => (30, 1),
    "java/base/NameAndTypePoolEntry#typeIndex:I" => (30, 2),
    "java/base/StringPoolEntry#CONSTANT_String:I" => (35, 0),
    "java/base/StringPoolEntry#valueIndex:I" => (35, 1),
    "java/base/Utf8PoolEntry#CONSTANT_Utf8:I" => (38, 0),
    "java/base/Utf8PoolEntry#data:Ljava/lang/String;" => (38, 1),
    "java/base/VMClass#flags:S" => (39, 0),
    "java/base/VMClass#vmFlags:S" => (39, 1),
    "java/base/VMClass#fixedSize:S" => (39, 2),
    "java/base/VMClass#arrayElementSize:B" => (39, 3),
    "java/base/VMClass#arrayDimensions:B" => (39, 4),
    "java/base/VMClass#arrayElementClass:Ljava/base/VMClass;" => (39, 5),
    "java/base/VMClass#runtimeDataIndex:I" => (39, 6),
    "java/base/VMClass#objectMask:[I" => (39, 7),
    "java/base/VMClass#name:[B" => (39, 8),
    "java/base/VMClass#sourceFile:[B" => (39, 9),
    "java/base/VMClass#super_:Ljava/base/VMClass;" => (39, 10),
    "java/base/VMClass#interfaceTable:[Ljava/lang/Object;" => (39, 11),
    "java/base/VMClass#virtualTable:[Ljava/base/VMMethod;" => (39, 12),
    "java/base/VMClass#fieldTable:[Ljava/base/VMField;" => (39, 13),
    "java/base/VMClass#methodTable:[Ljava/base/VMMethod;" => (39, 14),
    "java/base/VMClass#addendum:Ljava/base/ClassAddendum;" => (39, 15),
    "java/base/VMClass#staticTable:Ljava/base/Singleton;" => (39, 16),
    "java/base/VMClass#loader:Ljava/lang/ClassLoader;" => (39, 17),
    "java/base/VMClass#source:[B" => (39, 18),
    "java/base/VMField#vmFlags:B" => (40, 0),
    "java/base/VMField#code:B" => (40, 1),
    "java/base/VMField#flags:S" => (40, 2),
    "java/base/VMField#offset:S" => (40, 3),
    "java/base/VMField#nativeID:I" => (40, 4),
    "java/base/VMField#name:[B" => (40, 5),
    "java/base/VMField#spec:[B" => (40, 6),
    "java/base/VMField#addendum:Ljava/base/FieldAddendum;" => (40, 7),
    "java/base/VMField#class_:Ljava/base/VMClass;" => (40, 8),
    "java/base/VMMethod#vmFlags:B" => (41, 0),
    "java/base/VMMethod#returnCode:B" => (41, 1),
    "java/base/VMMethod#parameterCount:B" => (41, 2),
    "java/base/VMMethod#parameterFootprint:B" => (41, 3),
    "java/base/VMMethod#flags:S" => (41, 4),
    "java/base/VMMethod#offset:S" => (41, 5),
    "java/base/VMMethod#nativeID:I" => (41, 6),
    "java/base/VMMethod#runtimeDataIndex:I" => (41, 7),
    "java/base/VMMethod#name:[B" => (41, 8),
    "java/base/VMMethod#spec:[B" => (41, 9),
    "java/base/VMMethod#addendum:Ljava/base/MethodAddendum;" => (41, 10),
    "java/base/VMMethod#class_:Ljava/base/VMClass;" => (41, 11),
    "java/base/VMMethod#code:Ljava/base/Code;" => (41, 12),
    "java/io/ByteArrayInputStream#array:[B" => (42, 0),
    "java/io/ByteArrayInputStream#position:I" => (42, 1),
    "java/io/ByteArrayInputStream#limit:I" => (42, 2),
    "java/io/ByteArrayOutputStream#BufferSize:I" => (43, 0),
    "java/io/ByteArrayOutputStream#firstCell:Ljava/io/ByteArrayOutputStreamCell;" => (43, 1),
    "java/io/ByteArrayOutputStream#curCell:Ljava/io/ByteArrayOutputStreamCell;" => (43, 2),
    "java/io/ByteArrayOutputStream#length:I" => (43, 3),
    "java/io/ByteArrayOutputStream#buffer:[B" => (43, 4),
    "java/io/ByteArrayOutputStream#position:I" => (43, 5),
    "java/io/ByteArrayOutputStreamCell#array:[B" => (44, 0),
    "java/io/ByteArrayOutputStreamCell#offset:I" => (44, 1),
    "java/io/ByteArrayOutputStreamCell#length:I" => (44, 2),
    "java/io/ByteArrayOutputStreamCell#next:Ljava/io/ByteArrayOutputStreamCell;" => (44, 3),
    "java/io/ObjectInputStream#HANDLE_OFFSET:I" => (51, 0),
    "java/io/ObjectInputStream#in:Ljava/io/InputStream;" => (51, 1),
    "java/io/ObjectInputStream#references:Ljava/util/ArrayList;" => (51, 2),
    "java/io/ObjectInputStream#remainingBlockData:I" => (51, 3),
    "java/io/ObjectInputStream#current:Ljava/lang/Object;" => (51, 4),
    "java/io/ObjectInputStream#currentFields:[Ljava/lang/reflect/Field;" => (51, 5),
    "java/io/ObjectInputStreamClassDesc#clazz:Ljava/lang/Class;" => (52, 0),
    "java/io/ObjectInputStreamClassDesc#flags:I" => (52, 1),
    "java/io/ObjectInputStreamClassDesc#fields:[Ljava/lang/reflect/Field;" => (52, 2),
    "java/io/ObjectInputStreamClassDesc#superClassDesc:Ljava/io/ObjectInputStreamClassDesc;" => (52, 3),
    "java/io/ObjectOutputStream#STREAM_MAGIC:S" => (53, 0),
    "java/io/ObjectOutputStream#STREAM_VERSION:S" => (53, 1),
    "java/io/ObjectOutputStream#TC_NULL:B" => (53, 2),
    "java/io/ObjectOutputStream#TC_REFERENCE:B" => (53, 3),
    "java/io/ObjectOutputStream#TC_CLASSDESC:B" => (53, 4),
    "java/io/ObjectOutputStream#TC_OBJECT:B" => (53, 5),
    "java/io/ObjectOutputStream#TC_STRING:B" => (53, 6),
    "java/io/ObjectOutputStream#TC_ARRAY:B" => (53, 7),
    "java/io/ObjectOutputStream#TC_CLASS:B" => (53, 8),
    "java/io/ObjectOutputStream#TC_BLOCKDATA:B" => (53, 9),
    "java/io/ObjectOutputStream#TC_ENDBLOCKDATA:B" => (53, 10),
    "java/io/ObjectOutputStream#TC_RESET:B" => (53, 11),
    "java/io/ObjectOutputStream#TC_BLOCKDATALONG:B" => (53, 12),
    "java/io/ObjectOutputStream#TC_EXCEPTION:B" => (53, 13),
    "java/io/ObjectOutputStream#TC_LONGSTRING:B" => (53, 14),
    "java/io/ObjectOutputStream#TC_PROXYCLASSDESC:B" => (53, 15),
    "java/io/ObjectOutputStream#TC_ENUM:B" => (53, 16),
    "java/io/ObjectOutputStream#SC_WRITE_METHOD:B" => (53, 17),
    "java/io/ObjectOutputStream#SC_BLOCK_DATA:B" => (53, 18),
    "java/io/ObjectOutputStream#SC_SERIALIZABLE:B" => (53, 19),
    "java/io/ObjectOutputStream#SC_EXTERNALIZABLE:B" => (53, 20),
    "java/io/ObjectOutputStream#SC_ENUM:B" => (53, 21),
    "java/io/ObjectOutputStream#out:Ljava/io/OutputStream;" => (53, 22),
    "java/io/ObjectOutputStream#classHandle:I" => (53, 23),
    "java/io/ObjectOutputStream#current:Ljava/lang/Object;" => (53, 24),
    "java/lang/Address#TYPE_NAME:Ljava/lang/String;" => (60, 0),
    "java/lang/Address#DEFAULT_LENGTH:I" => (60, 1),
    "java/lang/Address#DEFAULT:Ljava/lang/Address;" => (60, 2),
    "java/lang/Address#ZERO_ADDRESS:Ljava/lang/Address;" => (60, 3),
    "java/lang/Address#value:Ljava/lang/Uint160;" => (60, 4),
    "java/lang/Approval#indexed_owner:Ljava/lang/Address;" => (62, 0),
    "java/lang/Approval#indexed_spender:Ljava/lang/Address;" => (62, 1),
    "java/lang/Approval#value:Ljava/lang/Uint256;" => (62, 2),
    "java/lang/Bool#TYPE_NAME:Ljava/lang/String;" => (68, 0),
    "java/lang/Bool#DEFAULT:Ljava/lang/Bool;" => (68, 1),
    "java/lang/Bool#TRUE:Ljava/lang/Bool;" => (68, 2),
    "java/lang/Bool#FALSE:Ljava/lang/Bool;" => (68, 3),
    "java/lang/Bool#value:Z" => (68, 4),
    "java/lang/Boolean#TYPE:Ljava/lang/Class;" => (69, 0),
    "java/lang/Boolean#FALSE:Ljava/lang/Boolean;" => (69, 1),
    "java/lang/Boolean#TRUE:Ljava/lang/Boolean;" => (69, 2),
    "java/lang/Boolean#value:Z" => (69, 3),
    "java/lang/Byte#TYPE:Ljava/lang/Class;" => (70, 0),
    "java/lang/Byte#MIN_VALUE:B" => (70, 1),
    "java/lang/Byte#MAX_VALUE:B" => (70, 2),
    "java/lang/Byte#value:B" => (70, 3),
    "java/lang/Bytes#TYPE_NAME:Ljava/lang/String;" => (71, 0),
    "java/lang/Bytes1#DEFAULT:Ljava/lang/Bytes1;" => (72, 0),
    "java/lang/Bytes10#DEFAULT:Ljava/lang/Bytes10;" => (73, 0),
    "java/lang/Bytes11#DEFAULT:Ljava/lang/Bytes11;" => (74, 0),
    "java/lang/Bytes12#DEFAULT:Ljava/lang/Bytes12;" => (75, 0),
    "java/lang/Bytes13#DEFAULT:Ljava/lang/Bytes13;" => (76, 0),
    "java/lang/Bytes14#DEFAULT:Ljava/lang/Bytes14;" => (77, 0),
    "java/lang/Bytes15#DEFAULT:Ljava/lang/Bytes15;" => (78, 0),
    "java/lang/Bytes16#DEFAULT:Ljava/lang/Bytes16;" => (79, 0),
    "java/lang/Bytes17#DEFAULT:Ljava/lang/Bytes17;" => (80, 0),
    "java/lang/Bytes18#DEFAULT:Ljava/lang/Bytes18;" => (81, 0),
    "java/lang/Bytes19#DEFAULT:Ljava/lang/Bytes19;" => (82, 0),
    "java/lang/Bytes2#DEFAULT:Ljava/lang/Bytes2;" => (83, 0),
    "java/lang/Bytes20#DEFAULT:Ljava/lang/Bytes20;" => (84, 0),
    "java/lang/Bytes21#DEFAULT:Ljava/lang/Bytes21;" => (85, 0),
    "java/lang/Bytes22#DEFAULT:Ljava/lang/Bytes22;" => (86, 0),
    "java/lang/Bytes23#DEFAULT:Ljava/lang/Bytes23;" => (87, 0),
    "java/lang/Bytes24#DEFAULT:Ljava/lang/Bytes24;" => (88, 0),
    "java/lang/Bytes25#DEFAULT:Ljava/lang/Bytes25;" => (89, 0),
    "java/lang/Bytes26#DEFAULT:Ljava/lang/Bytes26;" => (90, 0),
    "java/lang/Bytes27#DEFAULT:Ljava/lang/Bytes27;" => (91, 0),
    "java/lang/Bytes28#DEFAULT:Ljava/lang/Bytes28;" => (92, 0),
    "java/lang/Bytes29#DEFAULT:Ljava/lang/Bytes29;" => (93, 0),
    "java/lang/Bytes3#DEFAULT:Ljava/lang/Bytes3;" => (94, 0),
    "java/lang/Bytes30#DEFAULT:Ljava/lang/Bytes30;" => (95, 0),
    "java/lang/Bytes31#DEFAULT:Ljava/lang/Bytes31;" => (96, 0),
    "java/lang/Bytes32#DEFAULT:Ljava/lang/Bytes32;" => (97, 0),
    "java/lang/Bytes4#DEFAULT:Ljava/lang/Bytes4;" => (98, 0),
    "java/lang/Bytes5#DEFAULT:Ljava/lang/Bytes5;" => (99, 0),
    "java/lang/Bytes6#DEFAULT:Ljava/lang/Bytes6;" => (100, 0),
    "java/lang/Bytes7#DEFAULT:Ljava/lang/Bytes7;" => (101, 0),
    "java/lang/Bytes8#DEFAULT:Ljava/lang/Bytes8;" => (102, 0),
    "java/lang/Bytes9#DEFAULT:Ljava/lang/Bytes9;" => (103, 0),
    "java/lang/BytesType#value:[B" => (104, 0),
    "java/lang/BytesType#type:Ljava/lang/String;" => (104, 1),
    "java/lang/Character#MIN_RADIX:I" => (107, 0),
    "java/lang/Character#MAX_RADIX:I" => (107, 1),
    "java/lang/Character#TYPE:Ljava/lang/Class;" => (107, 2),
    "java/lang/Character#value:C" => (107, 3),
    "java/lang/Class#PrimitiveFlag:I" => (108, 0),
    "java/lang/Class#EnumFlag:I" => (108, 1),
    "java/lang/Class#vmClass:Ljava/base/VMClass;" => (108, 2),
    "java/lang/ClassLoader#parent:Ljava/lang/ClassLoader;" => (110, 0),
    "java/lang/ClassLoader#packages:Ljava/util/Map;" => (110, 1),
    "java/lang/ClassNotFoundException#cause2:Ljava/lang/Throwable;" => (111, 0),
    "java/lang/ClassType#GLOBAL:Ljava/lang/ClassType;" => (112, 0),
    "java/lang/ClassType#MEMBER:Ljava/lang/ClassType;" => (112, 1),
    "java/lang/ClassType#LOCAL:Ljava/lang/ClassType;" => (112, 2),
    "java/lang/ClassType#ANONYMOUS:Ljava/lang/ClassType;" => (112, 3),
    "java/lang/ClassType#$VALUES:[Ljava/lang/ClassType;" => (112, 4),
    "java/lang/Context#sender:Ljava/lang/Address;" => (116, 0),
    "java/lang/Enum#name:Ljava/lang/String;" => (118, 0),
    "java/lang/Enum#ordinal:I" => (118, 1),
    "java/lang/EventLog#message:Ljava/lang/String;" => (120, 0),
    "java/lang/ExceptionInInitializerError#exception:Ljava/lang/Throwable;" => (122, 0),
    "java/lang/Int#TYPE_NAME:Ljava/lang/String;" => (132, 0),
    "java/lang/Int#DEFAULT:Ljava/lang/Int;" => (132, 1),
    "java/lang/Int104#DEFAULT:Ljava/lang/Int104;" => (133, 0),
    "java/lang/Int112#DEFAULT:Ljava/lang/Int112;" => (134, 0),
    "java/lang/Int120#DEFAULT:Ljava/lang/Int120;" => (135, 0),
    "java/lang/Int128#DEFAULT:Ljava/lang/Int128;" => (136, 0),
    "java/lang/Int136#DEFAULT:Ljava/lang/Int136;" => (137, 0),
    "java/lang/Int144#DEFAULT:Ljava/lang/Int144;" => (138, 0),
    "java/lang/Int152#DEFAULT:Ljava/lang/Int152;" => (139, 0),
    "java/lang/Int16#DEFAULT:Ljava/lang/Int16;" => (140, 0),
    "java/lang/Int160#DEFAULT:Ljava/lang/Int160;" => (141, 0),
    "java/lang/Int168#DEFAULT:Ljava/lang/Int168;" => (142, 0),
    "java/lang/Int176#DEFAULT:Ljava/lang/Int176;" => (143, 0),
    "java/lang/Int184#DEFAULT:Ljava/lang/Int184;" => (144, 0),
    "java/lang/Int192#DEFAULT:Ljava/lang/Int192;" => (145, 0),
    "java/lang/Int200#DEFAULT:Ljava/lang/Int200;" => (146, 0),
    "java/lang/Int208#DEFAULT:Ljava/lang/Int208;" => (147, 0),
    "java/lang/Int216#DEFAULT:Ljava/lang/Int216;" => (148, 0),
    "java/lang/Int224#DEFAULT:Ljava/lang/Int224;" => (149, 0),
    "java/lang/Int232#DEFAULT:Ljava/lang/Int232;" => (150, 0),
    "java/lang/Int24#DEFAULT:Ljava/lang/Int24;" => (151, 0),
    "java/lang/Int240#DEFAULT:Ljava/lang/Int240;" => (152, 0),
    "java/lang/Int248#DEFAULT:Ljava/lang/Int248;" => (153, 0),
    "java/lang/Int256#DEFAULT:Ljava/lang/Int256;" => (154, 0),
    "java/lang/Int32#DEFAULT:Ljava/lang/Int32;" => (155, 0),
    "java/lang/Int40#DEFAULT:Ljava/lang/Int40;" => (156, 0),
    "java/lang/Int48#DEFAULT:Ljava/lang/Int48;" => (157, 0),
    "java/lang/Int56#DEFAULT:Ljava/lang/Int56;" => (158, 0),
    "java/lang/Int64#DEFAULT:Ljava/lang/Int64;" => (159, 0),
    "java/lang/Int72#DEFAULT:Ljava/lang/Int72;" => (160, 0),
    "java/lang/Int8#DEFAULT:Ljava/lang/Int8;" => (161, 0),
    "java/lang/Int80#DEFAULT:Ljava/lang/Int80;" => (162, 0),
    "java/lang/Int88#DEFAULT:Ljava/lang/Int88;" => (163, 0),
    "java/lang/Int96#DEFAULT:Ljava/lang/Int96;" => (164, 0),
    "java/lang/IntType#bitSize:I" => (165, 0),
    "java/lang/Integer#TYPE:Ljava/lang/Class;" => (166, 0),
    "java/lang/Integer#MIN_VALUE:I" => (166, 1),
    "java/lang/Integer#MAX_VALUE:I" => (166, 2),
    "java/lang/Integer#value:I" => (166, 3),
    "java/lang/Long#MIN_VALUE:J" => (171, 0),
    "java/lang/Long#MAX_VALUE:J" => (171, 1),
    "java/lang/Long#TYPE:Ljava/lang/Class;" => (171, 2),
    "java/lang/Long#value:J" => (171, 3),
    "java/lang/Mapping#map:Ljava/util/HashMap;" => (172, 0),
    "java/lang/Mapping#defaultValue:Ljava/lang/Object;" => (172, 1),
    "java/lang/Message#sender:Ljava/lang/Address;" => (174, 0),
    "java/lang/Message#value:Ljava/lang/Uint256;" => (174, 1),
    "java/lang/Message#data:[B" => (174, 2),
    "java/lang/Message#asset:Ljava/lang/Uint64;" => (174, 3),
    "java/lang/Message#sig:[B" => (174, 4),
    "java/lang/Message#gas:Ljava/lang/Uint256;" => (174, 5),
    "java/lang/NumericArrays#LONG:J" => (184, 0),
    "java/lang/NumericArrays#MAX_CACHE:I" => (184, 1),
    "java/lang/NumericArrays#CACHE:[[I" => (184, 2),
    "java/lang/NumericArrays#ZERO:[I" => (184, 3),
    "java/lang/NumericArrays#ONE:[I" => (184, 4),
    "java/lang/NumericArrays#TWO:[I" => (184, 5),
    "java/lang/NumericArrays#BIG_INT:Ljava/math/BigInteger;" => (184, 6),
    "java/lang/NumericType#type:Ljava/lang/String;" => (185, 0),
    "java/lang/NumericType#value:Ljava/math/BigInteger;" => (185, 1),
    "java/lang/OwnershipTransferred#indexed_previousOwner:Ljava/lang/Address;" => (189, 0),
    "java/lang/OwnershipTransferred#indexed_newOwner:Ljava/lang/Address;" => (189, 1),
    "java/lang/Package#name:Ljava/lang/String;" => (190, 0),
    "java/lang/Package#implementationTitle:Ljava/lang/String;" => (190, 1),
    "java/lang/Package#implementationVendor:Ljava/lang/String;" => (190, 2),
    "java/lang/Package#implementationVersion:Ljava/lang/String;" => (190, 3),
    "java/lang/Package#specificationTitle:Ljava/lang/String;" => (190, 4),
    "java/lang/Package#specificationVendor:Ljava/lang/String;" => (190, 5),
    "java/lang/Package#specificationVersion:Ljava/lang/String;" => (190, 6),
    "java/lang/Package#sealed:Ljava/lang/Object;" => (190, 7),
    "java/lang/Package#loader:Ljava/lang/ClassLoader;" => (190, 8),
    "java/lang/Paused#indexed_account:Ljava/lang/Address;" => (191, 0),
    "java/lang/Runtime#instance:Ljava/lang/Runtime;" => (195, 0),
    "java/lang/Short#TYPE:Ljava/lang/Class;" => (199, 0),
    "java/lang/Short#MIN_VALUE:S" => (199, 1),
    "java/lang/Short#MAX_VALUE:S" => (199, 2),
    "java/lang/Short#value:S" => (199, 3),
    "java/lang/StackTraceElement#NativeLine:I" => (201, 0),
    "java/lang/StackTraceElement#class_:Ljava/lang/String;" => (201, 1),
    "java/lang/StackTraceElement#method:Ljava/lang/String;" => (201, 2),
    "java/lang/StackTraceElement#file:Ljava/lang/String;" => (201, 3),
    "java/lang/StackTraceElement#line:I" => (201, 4),
    "java/lang/String#data:[C" => (202, 0),
    "java/lang/String#offset:I" => (202, 1),
    "java/lang/String#length:I" => (202, 2),
    "java/lang/String#hashCode:I" => (202, 3),
    "java/lang/String#UTF_8_ENCODING:Ljava/lang/String;" => (202, 4),
    "java/lang/String#ISO_8859_1_ENCODING:Ljava/lang/String;" => (202, 5),
    "java/lang/String#LATIN_1_ENCODING:Ljava/lang/String;" => (202, 6),
    "java/lang/String#DEFAULT_ENCODING:Ljava/lang/String;" => (202, 7),
    "java/lang/String#CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;" => (202, 8),
    "java/lang/StringBuffer#sb:Ljava/lang/StringBuilder;" => (203, 0),
    "java/lang/StringBuilder#BufferSize:I" => (204, 0),
    "java/lang/StringBuilder#chain:Ljava/lang/StringBuilderCell;" => (204, 1),
    "java/lang/StringBuilder#length:I" => (204, 2),
    "java/lang/StringBuilder#buffer:[C" => (204, 3),
    "java/lang/StringBuilder#position:I" => (204, 4),
    "java/lang/StringBuilderCell#value:Ljava/lang/String;" => (205, 0),
    "java/lang/StringBuilderCell#next:Ljava/lang/StringBuilderCell;" => (205, 1),
    "java/lang/StringIndexOutOfBoundsException#serialVersionUID:J" => (207, 0),
    "java/lang/StringUtil#BITS_PER_DIGIT:[I" => (208, 0),
    "java/lang/StringUtil#DIGITS_PER_INT:[I" => (208, 1),
    "java/lang/StringUtil#RADIX_LENGTH_LONG:[I" => (208, 2),
    "java/lang/StringUtil#RADIX_INT:[I" => (208, 3),
    "java/lang/StringUtil#RADIX_LONG:[J" => (208, 4),
    "java/lang/StringUtil#ZEROES:Ljava/lang/String;" => (208, 5),
    "java/lang/System#out:Ljava/io/SystemPrintStream;" => (210, 0),
    "java/lang/System#err:Ljava/io/SystemPrintStream;" => (210, 1),
    "java/lang/System#in:Ljava/io/SystemPrintStream;" => (210, 2),
    "java/lang/SystemNanoTime#BaseInMillis:J" => (211, 0),
    "java/lang/Throwable#message:Ljava/lang/String;" => (213, 0),
    "java/lang/Throwable#trace:Ljava/lang/Object;" => (213, 1),
    "java/lang/Throwable#cause:Ljava/lang/Throwable;" => (213, 2),
    "java/lang/Transfer#indexed_from:Ljava/lang/Address;" => (214, 0),
    "java/lang/Transfer#indexed_to:Ljava/lang/Address;" => (214, 1),
    "java/lang/Transfer#value:Ljava/lang/Uint256;" => (214, 2),
    "java/lang/Uint#MAX_WIDTH:I" => (216, 0),
    "java/lang/Uint#MAX_VALUE:Ljava/lang/Uint;" => (216, 1),
    "java/lang/Uint#ZERO:Ljava/lang/Uint;" => (216, 2),
    "java/lang/Uint#ONE:Ljava/lang/Uint;" => (216, 3),
    "java/lang/Uint#TWO:Ljava/lang/Uint;" => (216, 4),
    "java/lang/Uint128#MAX_WIDTH:I" => (217, 0),
    "java/lang/Uint128#MAX_VALUE:Ljava/lang/Uint128;" => (217, 1),
    "java/lang/Uint128#ZERO:Ljava/lang/Uint128;" => (217, 2),
    "java/lang/Uint128#ONE:Ljava/lang/Uint128;" => (217, 3),
    "java/lang/Uint128#TWO:Ljava/lang/Uint128;" => (217, 4),
    "java/lang/Uint16#MAX_WIDTH:I" => (218, 0),
    "java/lang/Uint16#MAX_VALUE:Ljava/lang/Uint16;" => (218, 1),
    "java/lang/Uint16#ZERO:Ljava/lang/Uint16;" => (218, 2),
    "java/lang/Uint16#ONE:Ljava/lang/Uint16;" => (218, 3),
    "java/lang/Uint16#TWO:Ljava/lang/Uint16;" => (218, 4),
    "java/lang/Uint160#MAX_WIDTH:I" => (219, 0),
    "java/lang/Uint160#MAX_VALUE:Ljava/lang/Uint160;" => (219, 1),
    "java/lang/Uint160#ZERO:Ljava/lang/Uint160;" => (219, 2),
    "java/lang/Uint160#ONE:Ljava/lang/Uint160;" => (219, 3),
    "java/lang/Uint160#TWO:Ljava/lang/Uint160;" => (219, 4),
    "java/lang/Uint256#MAX_WIDTH:I" => (220, 0),
    "java/lang/Uint256#MAX_VALUE:Ljava/lang/Uint256;" => (220, 1),
    "java/lang/Uint256#ZERO:Ljava/lang/Uint256;" => (220, 2),
    "java/lang/Uint256#ONE:Ljava/lang/Uint256;" => (220, 3),
    "java/lang/Uint256#TWO:Ljava/lang/Uint256;" => (220, 4),
    "java/lang/Uint32#MAX_WIDTH:I" => (221, 0),
    "java/lang/Uint32#MAX_VALUE:Ljava/lang/Uint32;" => (221, 1),
    "java/lang/Uint32#ZERO:Ljava/lang/Uint32;" => (221, 2),
    "java/lang/Uint32#ONE:Ljava/lang/Uint32;" => (221, 3),
    "java/lang/Uint32#TWO:Ljava/lang/Uint32;" => (221, 4),
    "java/lang/Uint64#MAX_WIDTH:I" => (222, 0),
    "java/lang/Uint64#MAX_VALUE:Ljava/lang/Uint64;" => (222, 1),
    "java/lang/Uint64#ZERO:Ljava/lang/Uint64;" => (222, 2),
    "java/lang/Uint64#ONE:Ljava/lang/Uint64;" => (222, 3),
    "java/lang/Uint64#TWO:Ljava/lang/Uint64;" => (222, 4),
    "java/lang/Uint8#MAX_WIDTH:I" => (223, 0),
    "java/lang/Uint8#MAX_VALUE:Ljava/lang/Uint8;" => (223, 1),
    "java/lang/Uint8#ZERO:Ljava/lang/Uint8;" => (223, 2),
    "java/lang/Uint8#ONE:Ljava/lang/Uint8;" => (223, 3),
    "java/lang/Uint8#value:I" => (223, 4),
    "java/lang/UintType#ints:[I" => (224, 0),
    "java/lang/UintType#DEFAULT_RADIX:I" => (224, 1),
    "java/lang/Unpaused#indexed_account:Ljava/lang/Address;" => (225, 0),
    "java/lang/Void#TYPE:Ljava/lang/Class;" => (229, 0),
    "java/lang/annotation/ElementType#ANNOTATION_TYPE:Ljava/lang/annotation/ElementType;" => (232, 0),
    "java/lang/annotation/ElementType#CONSTRUCTOR:Ljava/lang/annotation/ElementType;" => (232, 1),
    "java/lang/annotation/ElementType#FIELD:Ljava/lang/annotation/ElementType;" => (232, 2),
    "java/lang/annotation/ElementType#LOCAL_VARIABLE:Ljava/lang/annotation/ElementType;" => (232, 3),
    "java/lang/annotation/ElementType#METHOD:Ljava/lang/annotation/ElementType;" => (232, 4),
    "java/lang/annotation/ElementType#PACKAGE:Ljava/lang/annotation/ElementType;" => (232, 5),
    "java/lang/annotation/ElementType#PARAMETER:Ljava/lang/annotation/ElementType;" => (232, 6),
    "java/lang/annotation/ElementType#TYPE:Ljava/lang/annotation/ElementType;" => (232, 7),
    "java/lang/annotation/ElementType#$VALUES:[Ljava/lang/annotation/ElementType;" => (232, 8),
    "java/lang/annotation/RetentionPolicy#CLASS:Ljava/lang/annotation/RetentionPolicy;" => (238, 0),
    "java/lang/annotation/RetentionPolicy#RUNTIME:Ljava/lang/annotation/RetentionPolicy;" => (238, 1),
    "java/lang/annotation/RetentionPolicy#SOURCE:Ljava/lang/annotation/RetentionPolicy;" => (238, 2),
    "java/lang/annotation/RetentionPolicy#$VALUES:[Ljava/lang/annotation/RetentionPolicy;" => (238, 3),
    "java/lang/bytes/Division#LONG:J" => (242, 0),
    "java/lang/bytes/Hex#HEX_PREFIX:Ljava/lang/String;" => (243, 0),
    "java/lang/bytes/Hex#HEX_CHAR_MAP:[C" => (243, 1),
    "java/lang/bytes/Type#MAX_BIT_LENGTH:I" => (244, 0),
    "java/lang/bytes/Type#MAX_BYTE_LENGTH:I" => (244, 1),
    "java/lang/contract/ERC20#balances:Ljava/lang/Mapping;" => (246, 0),
    "java/lang/contract/ERC20#allowances:Ljava/lang/Mapping;" => (246, 1),
    "java/lang/contract/ERC20#totalSupply:Ljava/lang/Uint256;" => (246, 2),
    "java/lang/contract/ERC20#name:Ljava/lang/String;" => (246, 3),
    "java/lang/contract/ERC20#symbol:Ljava/lang/String;" => (246, 4),
    "java/lang/contract/ERC20#paused:Ljava/lang/Bool;" => (246, 5),
    "java/lang/contract/ERC20#owner:Ljava/lang/Address;" => (246, 6),
    "java/lang/invoke/MethodHandle#REF_invokeVirtual:I" => (259, 0),
    "java/lang/invoke/MethodHandle#REF_invokeStatic:I" => (259, 1),
    "java/lang/invoke/MethodHandle#REF_invokeSpecial:I" => (259, 2),
    "java/lang/invoke/MethodHandle#REF_newInvokeSpecial:I" => (259, 3),
    "java/lang/invoke/MethodHandle#REF_invokeInterface:I" => (259, 4),
    "java/lang/invoke/MethodHandle#kind:I" => (259, 5),
    "java/lang/invoke/MethodHandle#loader:Ljava/lang/ClassLoader;" => (259, 6),
    "java/lang/invoke/MethodHandle#method:Ljava/base/VMMethod;" => (259, 7),
    "java/lang/invoke/MethodHandle#type:Ljava/lang/invoke/MethodType;" => (259, 8),
    "java/lang/invoke/MethodHandlesLookup#class_:Ljava/base/VMClass;" => (261, 0),
    "java/lang/invoke/MethodHandlesLookup#modes:I" => (261, 1),
    "java/lang/invoke/MethodType#Primitives:[C" => (262, 0),
    "java/lang/invoke/MethodType#loader:Ljava/lang/ClassLoader;" => (262, 1),
    "java/lang/invoke/MethodType#spec:[B" => (262, 2),
    "java/lang/invoke/MethodType#parameters:Ljava/util/List;" => (262, 3),
    "java/lang/invoke/MethodType#result:Ljava/lang/invoke/MethodTypeResult;" => (262, 4),
    "java/lang/invoke/MethodType#footprint:I" => (262, 5),
    "java/lang/invoke/MethodTypeParameter#index:I" => (263, 0),
    "java/lang/invoke/MethodTypeParameter#position:I" => (263, 1),
    "java/lang/invoke/MethodTypeParameter#spec:Ljava/lang/String;" => (263, 2),
    "java/lang/invoke/MethodTypeParameter#type:Ljava/lang/Class;" => (263, 3),
    "java/lang/invoke/MethodTypeParameter#load:I" => (263, 4),
    "java/lang/invoke/MethodTypeResult#spec:Ljava/lang/String;" => (264, 0),
    "java/lang/invoke/MethodTypeResult#type:Ljava/lang/Class;" => (264, 1),
    "java/lang/invoke/MethodTypeResult#return_:I" => (264, 2),
    "java/lang/invoke/MethodTypeType#ObjectType:Ljava/lang/invoke/MethodTypeType;" => (265, 0),
    "java/lang/invoke/MethodTypeType#IntegerType:Ljava/lang/invoke/MethodTypeType;" => (265, 1),
    "java/lang/invoke/MethodTypeType#FloatType:Ljava/lang/invoke/MethodTypeType;" => (265, 2),
    "java/lang/invoke/MethodTypeType#LongType:Ljava/lang/invoke/MethodTypeType;" => (265, 3),
    "java/lang/invoke/MethodTypeType#DoubleType:Ljava/lang/invoke/MethodTypeType;" => (265, 4),
    "java/lang/invoke/MethodTypeType#VoidType:Ljava/lang/invoke/MethodTypeType;" => (265, 5),
    "java/lang/invoke/MethodTypeType#load:I" => (265, 6),
    "java/lang/invoke/MethodTypeType#return_:I" => (265, 7),
    "java/lang/invoke/MethodTypeType#size:I" => (265, 8),
    "java/lang/invoke/MethodTypeType#$VALUES:[Ljava/lang/invoke/MethodTypeType;" => (265, 9),
    "java/lang/reflect/AccessibleObject#Accessible:I" => (267, 0),
    "java/lang/reflect/AccessibleObject#ACC_VARARGS:I" => (267, 1),
    "java/lang/reflect/AccessibleObject#ACC_SYNTHETIC:I" => (267, 2),
    "java/lang/reflect/Constructor#method:Ljava/lang/reflect/Method;" => (270, 0),
    "java/lang/reflect/Field#VoidField:I" => (271, 0),
    "java/lang/reflect/Field#ByteField:I" => (271, 1),
    "java/lang/reflect/Field#CharField:I" => (271, 2),
    "java/lang/reflect/Field#IntField:I" => (271, 3),
    "java/lang/reflect/Field#LongField:I" => (271, 4),
    "java/lang/reflect/Field#ShortField:I" => (271, 5),
    "java/lang/reflect/Field#BooleanField:I" => (271, 6),
    "java/lang/reflect/Field#ObjectField:I" => (271, 7),
    "java/lang/reflect/Field#vmField:Ljava/base/VMField;" => (271, 8),
    "java/lang/reflect/Field#accessible:Z" => (271, 9),
    "java/lang/reflect/InvocationTargetException#target:Ljava/lang/Throwable;" => (274, 0),
    "java/lang/reflect/Member#PUBLIC:I" => (275, 0),
    "java/lang/reflect/Member#DECLARED:I" => (275, 1),
    "java/lang/reflect/Method#vmMethod:Ljava/base/VMMethod;" => (276, 0),
    "java/lang/reflect/Method#accessible:Z" => (276, 1),
    "java/lang/reflect/Modifier#PUBLIC:I" => (277, 0),
    "java/lang/reflect/Modifier#PRIVATE:I" => (277, 1),
    "java/lang/reflect/Modifier#PROTECTED:I" => (277, 2),
    "java/lang/reflect/Modifier#STATIC:I" => (277, 3),
    "java/lang/reflect/Modifier#FINAL:I" => (277, 4),
    "java/lang/reflect/Modifier#SUPER:I" => (277, 5),
    "java/lang/reflect/Modifier#SYNCHRONIZED:I" => (277, 6),
    "java/lang/reflect/Modifier#VOLATILE:I" => (277, 7),
    "java/lang/reflect/Modifier#TRANSIENT:I" => (277, 8),
    "java/lang/reflect/Modifier#NATIVE:I" => (277, 9),
    "java/lang/reflect/Modifier#INTERFACE:I" => (277, 10),
    "java/lang/reflect/Modifier#ABSTRACT:I" => (277, 11),
    "java/lang/reflect/Modifier#STRICT:I" => (277, 12),
    "java/lang/reflect/Proxy#nextNumber:I" => (279, 0),
    "java/lang/reflect/Proxy#h:Ljava/lang/reflect/InvocationHandler;" => (279, 1),
    "java/lang/reflect/Proxy#methodRefsMap:Ljava/util/Map;" => (279, 2),
    "java/lang/reflect/Proxy#methodRefs:[Ljava/lang/reflect/Method;" => (279, 3),
    "java/lang/reflect/SignatureParser#loader:Ljava/lang/ClassLoader;" => (280, 0),
    "java/lang/reflect/SignatureParser#array:[C" => (280, 1),
    "java/lang/reflect/SignatureParser#signature:Ljava/lang/String;" => (280, 2),
    "java/lang/reflect/SignatureParser#offset:I" => (280, 3),
    "java/lang/reflect/SignatureParser#type:Ljava/lang/reflect/Type;" => (280, 4),
    "java/lang/reflect/SignatureParser#typeVariables:Ljava/util/Map;" => (280, 5),
    "java/lang/reflect/SignatureParserType#args:[Ljava/lang/reflect/Type;" => (281, 0),
    "java/lang/reflect/SignatureParserType#owner:Ljava/lang/reflect/Type;" => (281, 1),
    "java/lang/reflect/SignatureParserType#raw:Ljava/lang/reflect/Type;" => (281, 2),
    "java/lang/reflect/TypeVariableImpl#name:Ljava/lang/String;" => (284, 0),
    "java/lang/reflect/TypeVariableImpl#baseType:Ljava/lang/reflect/Type;" => (284, 1),
    "java/lang/reflect/TypeVariableImpl#vars:[Ljava/lang/reflect/TypeVariableImpl;" => (284, 2),
    "java/lang/reflect/TypeVariableImpl1#vars:[Ljava/lang/reflect/TypeVariableImpl;" => (285, 0),
    "java/math/BigInteger#sign:I" => (286, 0),
    "java/math/BigInteger#value:[I" => (286, 1),
    "java/math/BigInteger#ZERO:Ljava/math/BigInteger;" => (286, 2),
    "java/math/BigInteger#ONE:Ljava/math/BigInteger;" => (286, 3),
    "java/math/BigInteger#TEN:Ljava/math/BigInteger;" => (286, 4),
    "java/util/AbstractList#modCount:I" => (288, 0),
    "java/util/ArrayList#MinimumCapacity:I" => (292, 0),
    "java/util/ArrayList#array:[Ljava/lang/Object;" => (292, 1),
    "java/util/ArrayList#size:I" => (292, 2),
    "java/util/ArrayListIterator#list:Ljava/util/List;" => (293, 0),
    "java/util/ArrayListIterator#toRemove:I" => (293, 1),
    "java/util/ArrayListIterator#index:I" => (293, 2),
    "java/util/Arrays#SORT_SIZE_THRESHOLD:I" => (294, 0),
    "java/util/ArraysAbstractList#array:[Ljava/lang/Object;" => (295, 0),
    "java/util/ArraysListIterator#array:[Ljava/lang/Object;" => (297, 0),
    "java/util/ArraysListIterator#currentIndex:I" => (297, 1),
    "java/util/BitSet#BITS_PER_LONG:I" => (298, 0),
    "java/util/BitSet#BITS_PER_LONG_SHIFT:I" => (298, 1),
    "java/util/BitSet#MASK:J" => (298, 2),
    "java/util/BitSet#bits:[J" => (298, 3),
    "java/util/Collections#SORT_SIZE_THRESHOLD:I" => (300, 0),
    "java/util/Collections#EMPTY_LIST:Ljava/util/List;" => (300, 1),
    "java/util/Date#when:J" => (303, 0),
    "java/util/EnumSet#bitset:Ljava/util/BitSet;" => (306, 0),
    "java/util/EnumSet#elementType:Ljava/lang/Class;" => (306, 1),
    "java/util/EnumSetIterator#enumSet:Ljava/util/EnumSet;" => (307, 0),
    "java/util/EnumSetIterator#elementType:Ljava/lang/Class;" => (307, 1),
    "java/util/EnumSetIterator#bitset:Ljava/util/BitSet;" => (307, 2),
    "java/util/EnumSetIterator#currentIndex:I" => (307, 3),
    "java/util/EnumSetIterator#removeAllowed:Z" => (307, 4),
    "java/util/EventObject#source:Ljava/lang/Object;" => (310, 0),
    "java/util/HashMap#MinimumCapacity:I" => (311, 0),
    "java/util/HashMap#size:I" => (311, 1),
    "java/util/HashMap#array:[Ljava/util/HashMapCell;" => (311, 2),
    "java/util/HashMap#helper:Ljava/util/HashMapHelper;" => (311, 3),
    "java/util/HashMap#head:Ljava/util/HashMapCell;" => (311, 4),
    "java/util/HashMap#tail:Ljava/util/HashMapCell;" => (311, 5),
    "java/util/HashMapMyCell#key:Ljava/lang/Object;" => (314, 0),
    "java/util/HashMapMyCell#value:Ljava/lang/Object;" => (314, 1),
    "java/util/HashMapMyCell#next:Ljava/util/HashMapCell;" => (314, 2),
    "java/util/HashMapMyCell#hashCode:I" => (314, 3),
    "java/util/HashMapMyCell#before:Ljava/util/HashMapCell;" => (314, 4),
    "java/util/HashMapMyCell#after:Ljava/util/HashMapCell;" => (314, 5),
    "java/util/HashMapMyEntryMap#hashMap:Ljava/util/HashMap;" => (315, 0),
    "java/util/HashMapMyIterator#hashMap:Ljava/util/HashMap;" => (317, 0),
    "java/util/HashMapMyIterator#next:Ljava/util/HashMapCell;" => (317, 1),
    "java/util/HashSet#Value:Ljava/lang/Object;" => (318, 0),
    "java/util/HashSet#map:Ljava/util/HashMap;" => (318, 1),
    "java/util/HashSetMyIterator#it:Ljava/util/Iterator;" => (319, 0),
    "java/util/Hashtable#map:Ljava/util/HashMap;" => (320, 0),
    "java/util/IdentityHashMap#map:Ljava/util/HashMap;" => (321, 0),
    "java/util/IteratorEnumeration#it:Ljava/util/Iterator;" => (326, 0),
    "java/util/LinkedList#front:Ljava/util/LinkedListCell;" => (327, 0),
    "java/util/LinkedList#rear:Ljava/util/LinkedListCell;" => (327, 1),
    "java/util/LinkedList#size:I" => (327, 2),
    "java/util/LinkedListCell#value:Ljava/lang/Object;" => (328, 0),
    "java/util/LinkedListCell#prev:Ljava/util/LinkedListCell;" => (328, 1),
    "java/util/LinkedListCell#next:Ljava/util/LinkedListCell;" => (328, 2),
    "java/util/LinkedListDescendingIterator#listIterator:Ljava/util/ListIterator;" => (329, 0),
    "java/util/LinkedListMyIterator#linkedList:Ljava/util/LinkedList;" => (330, 0),
    "java/util/LinkedListMyIterator#toRemove:Ljava/util/LinkedListCell;" => (330, 1),
    "java/util/LinkedListMyIterator#current:Ljava/util/LinkedListCell;" => (330, 2),
    "java/util/MaskInfo#mask:J" => (334, 0),
    "java/util/MaskInfo#partitionIndex:I" => (334, 1),
    "java/util/MaskInfoIterator#basePartition:I" => (335, 0),
    "java/util/MaskInfoIterator#numPartitionsToTraverse:I" => (335, 1),
    "java/util/MaskInfoIterator#currentPartitionOffset:I" => (335, 2),
    "java/util/MaskInfoIterator#toIndex:I" => (335, 3),
    "java/util/MaskInfoIterator#currentFirstIndex:I" => (335, 4),
    "java/util/MaskInfoIterator#BITS_PER_LONG:I" => (335, 5),
    "java/util/MaskInfoIterator#BITS_PER_LONG_SHIFT:I" => (335, 6),
    "java/util/MaskInfoIterator#MASK:J" => (335, 7),
    "java/util/ReverseComparator#cmp:Ljava/util/Comparator;" => (341, 0),
    "java/util/SynchronizedCollection#lock:Ljava/lang/Object;" => (343, 0),
    "java/util/SynchronizedCollection#collection:Ljava/util/Collection;" => (343, 1),
    "java/util/SynchronizedIterator#lock:Ljava/lang/Object;" => (344, 0),
    "java/util/SynchronizedIterator#it:Ljava/util/Iterator;" => (344, 1),
    "java/util/SynchronizedList#list:Ljava/util/List;" => (345, 0),
    "java/util/SynchronizedMap#lock:Ljava/lang/Object;" => (346, 0),
    "java/util/SynchronizedMap#map:Ljava/util/Map;" => (346, 1),
    "java/util/UnmodifiableCollection#inner:Ljava/util/Collection;" => (348, 0),
    "java/util/UnmodifiableIterator#inner:Ljava/util/Iterator;" => (349, 0),
    "java/util/UnmodifiableList#inner:Ljava/util/List;" => (350, 0),
    "java/util/UnmodifiableListIterator#innerListIterator:Ljava/util/ListIterator;" => (351, 0),
    "java/util/UnmodifiableMap#inner:Ljava/util/Map;" => (352, 0),
};

// If you prefer FxHashMap at runtime, enable `fxhash` and use the builder below:
// use fxhash::FxHashMap;
// pub fn build_fx_maps() -> (FxHashMap<&'static str, usize>, FxHashMap<&'static str, (usize,usize)>, FxHashMap<&'static str, (usize,usize)>) {
//     let mut classes = FxHashMap::default();
//     classes.insert("java/base/Addendum", 0);
//     classes.insert("java/base/AnnotationInvocationHandler", 1);
//     classes.insert("java/base/Assembler", 2);
//     classes.insert("java/base/Atomic", 3);
//     classes.insert("java/base/Callable", 4);
//     classes.insert("java/base/Callback", 5);
//     classes.insert("java/base/Cell", 6);
//     classes.insert("java/base/ClassAddendum", 7);
//     classes.insert("java/base/ClassPoolEntry", 8);
//     classes.insert("java/base/Classes", 9);
//     classes.insert("java/base/Code", 10);
//     classes.insert("java/base/ConstantPool", 11);
//     classes.insert("java/base/Data", 12);
//     classes.insert("java/base/DataEntryMap", 13);
//     classes.insert("java/base/DataEntrySet", 14);
//     classes.insert("java/base/DataKeyIterator", 15);
//     classes.insert("java/base/DataKeySet", 16);
//     classes.insert("java/base/DataValueIterator", 17);
//     classes.insert("java/base/DataValues", 18);
//     classes.insert("java/base/FieldAddendum", 19);
//     classes.insert("java/base/FieldData", 20);
//     classes.insert("java/base/FieldRefPoolEntry", 21);
//     classes.insert("java/base/Function", 22);
//     classes.insert("java/base/IncompatibleContinuationException", 23);
//     classes.insert("java/base/InnerClassReference", 24);
//     classes.insert("java/base/IntegerPoolEntry", 25);
//     classes.insert("java/base/InterfaceMethodRefPoolEntry", 26);
//     classes.insert("java/base/MethodAddendum", 27);
//     classes.insert("java/base/MethodData", 28);
//     classes.insert("java/base/MethodRefPoolEntry", 29);
//     classes.insert("java/base/NameAndTypePoolEntry", 30);
//     classes.insert("java/base/Pair", 31);
//     classes.insert("java/base/PoolEntry", 32);
//     classes.insert("java/base/Singleton", 33);
//     classes.insert("java/base/Stream", 34);
//     classes.insert("java/base/StringPoolEntry", 35);
//     classes.insert("java/base/SystemClassLoader", 36);
//     classes.insert("java/base/Utf8", 37);
//     classes.insert("java/base/Utf8PoolEntry", 38);
//     classes.insert("java/base/VMClass", 39);
//     classes.insert("java/base/VMField", 40);
//     classes.insert("java/base/VMMethod", 41);
//     classes.insert("java/io/ByteArrayInputStream", 42);
//     classes.insert("java/io/ByteArrayOutputStream", 43);
//     classes.insert("java/io/ByteArrayOutputStreamCell", 44);
//     classes.insert("java/io/CharToPrimitiveType", 45);
//     classes.insert("java/io/Closeable", 46);
//     classes.insert("java/io/EOFException", 47);
//     classes.insert("java/io/Flushable", 48);
//     classes.insert("java/io/IOException", 49);
//     classes.insert("java/io/InputStream", 50);
//     classes.insert("java/io/ObjectInputStream", 51);
//     classes.insert("java/io/ObjectInputStreamClassDesc", 52);
//     classes.insert("java/io/ObjectOutputStream", 53);
//     classes.insert("java/io/OutputStream", 54);
//     classes.insert("java/io/PrintStream", 55);
//     classes.insert("java/io/Serializable", 56);
//     classes.insert("java/io/SystemPrintStream", 57);
//     classes.insert("java/io/UnsupportedEncodingException", 58);
//     classes.insert("java/lang/AbstractMethodError", 59);
//     classes.insert("java/lang/Address", 60);
//     classes.insert("java/lang/Appendable", 61);
//     classes.insert("java/lang/Approval", 62);
//     classes.insert("java/lang/ArithmeticException", 63);
//     classes.insert("java/lang/ArrayIndexOutOfBoundsException", 64);
//     classes.insert("java/lang/ArrayStoreException", 65);
//     classes.insert("java/lang/AssertionError", 66);
//     classes.insert("java/lang/AutoCloseable", 67);
//     classes.insert("java/lang/Bool", 68);
//     classes.insert("java/lang/Boolean", 69);
//     classes.insert("java/lang/Byte", 70);
//     classes.insert("java/lang/Bytes", 71);
//     classes.insert("java/lang/Bytes1", 72);
//     classes.insert("java/lang/Bytes10", 73);
//     classes.insert("java/lang/Bytes11", 74);
//     classes.insert("java/lang/Bytes12", 75);
//     classes.insert("java/lang/Bytes13", 76);
//     classes.insert("java/lang/Bytes14", 77);
//     classes.insert("java/lang/Bytes15", 78);
//     classes.insert("java/lang/Bytes16", 79);
//     classes.insert("java/lang/Bytes17", 80);
//     classes.insert("java/lang/Bytes18", 81);
//     classes.insert("java/lang/Bytes19", 82);
//     classes.insert("java/lang/Bytes2", 83);
//     classes.insert("java/lang/Bytes20", 84);
//     classes.insert("java/lang/Bytes21", 85);
//     classes.insert("java/lang/Bytes22", 86);
//     classes.insert("java/lang/Bytes23", 87);
//     classes.insert("java/lang/Bytes24", 88);
//     classes.insert("java/lang/Bytes25", 89);
//     classes.insert("java/lang/Bytes26", 90);
//     classes.insert("java/lang/Bytes27", 91);
//     classes.insert("java/lang/Bytes28", 92);
//     classes.insert("java/lang/Bytes29", 93);
//     classes.insert("java/lang/Bytes3", 94);
//     classes.insert("java/lang/Bytes30", 95);
//     classes.insert("java/lang/Bytes31", 96);
//     classes.insert("java/lang/Bytes32", 97);
//     classes.insert("java/lang/Bytes4", 98);
//     classes.insert("java/lang/Bytes5", 99);
//     classes.insert("java/lang/Bytes6", 100);
//     classes.insert("java/lang/Bytes7", 101);
//     classes.insert("java/lang/Bytes8", 102);
//     classes.insert("java/lang/Bytes9", 103);
//     classes.insert("java/lang/BytesType", 104);
//     classes.insert("java/lang/Callable", 105);
//     classes.insert("java/lang/CharSequence", 106);
//     classes.insert("java/lang/Character", 107);
//     classes.insert("java/lang/Class", 108);
//     classes.insert("java/lang/ClassCastException", 109);
//     classes.insert("java/lang/ClassLoader", 110);
//     classes.insert("java/lang/ClassNotFoundException", 111);
//     classes.insert("java/lang/ClassType", 112);
//     classes.insert("java/lang/CloneNotSupportedException", 113);
//     classes.insert("java/lang/Cloneable", 114);
//     classes.insert("java/lang/Comparable", 115);
//     classes.insert("java/lang/Context", 116);
//     classes.insert("java/lang/Deprecated", 117);
//     classes.insert("java/lang/Enum", 118);
//     classes.insert("java/lang/Error", 119);
//     classes.insert("java/lang/EventLog", 120);
//     classes.insert("java/lang/Exception", 121);
//     classes.insert("java/lang/ExceptionInInitializerError", 122);
//     classes.insert("java/lang/IllegalAccessError", 123);
//     classes.insert("java/lang/IllegalAccessException", 124);
//     classes.insert("java/lang/IllegalArgumentException", 125);
//     classes.insert("java/lang/IllegalMonitorStateException", 126);
//     classes.insert("java/lang/IllegalStateException", 127);
//     classes.insert("java/lang/IncompatibleClassChangeError", 128);
//     classes.insert("java/lang/IndexOutOfBoundsException", 129);
//     classes.insert("java/lang/InstantiationError", 130);
//     classes.insert("java/lang/InstantiationException", 131);
//     classes.insert("java/lang/Int", 132);
//     classes.insert("java/lang/Int104", 133);
//     classes.insert("java/lang/Int112", 134);
//     classes.insert("java/lang/Int120", 135);
//     classes.insert("java/lang/Int128", 136);
//     classes.insert("java/lang/Int136", 137);
//     classes.insert("java/lang/Int144", 138);
//     classes.insert("java/lang/Int152", 139);
//     classes.insert("java/lang/Int16", 140);
//     classes.insert("java/lang/Int160", 141);
//     classes.insert("java/lang/Int168", 142);
//     classes.insert("java/lang/Int176", 143);
//     classes.insert("java/lang/Int184", 144);
//     classes.insert("java/lang/Int192", 145);
//     classes.insert("java/lang/Int200", 146);
//     classes.insert("java/lang/Int208", 147);
//     classes.insert("java/lang/Int216", 148);
//     classes.insert("java/lang/Int224", 149);
//     classes.insert("java/lang/Int232", 150);
//     classes.insert("java/lang/Int24", 151);
//     classes.insert("java/lang/Int240", 152);
//     classes.insert("java/lang/Int248", 153);
//     classes.insert("java/lang/Int256", 154);
//     classes.insert("java/lang/Int32", 155);
//     classes.insert("java/lang/Int40", 156);
//     classes.insert("java/lang/Int48", 157);
//     classes.insert("java/lang/Int56", 158);
//     classes.insert("java/lang/Int64", 159);
//     classes.insert("java/lang/Int72", 160);
//     classes.insert("java/lang/Int8", 161);
//     classes.insert("java/lang/Int80", 162);
//     classes.insert("java/lang/Int88", 163);
//     classes.insert("java/lang/Int96", 164);
//     classes.insert("java/lang/IntType", 165);
//     classes.insert("java/lang/Integer", 166);
//     classes.insert("java/lang/InternalError", 167);
//     classes.insert("java/lang/InterruptedException", 168);
//     classes.insert("java/lang/Iterable", 169);
//     classes.insert("java/lang/LinkageError", 170);
//     classes.insert("java/lang/Long", 171);
//     classes.insert("java/lang/Mapping", 172);
//     classes.insert("java/lang/Math", 173);
//     classes.insert("java/lang/Message", 174);
//     classes.insert("java/lang/NegativeArraySizeException", 175);
//     classes.insert("java/lang/NoClassDefFoundError", 176);
//     classes.insert("java/lang/NoSuchFieldError", 177);
//     classes.insert("java/lang/NoSuchFieldException", 178);
//     classes.insert("java/lang/NoSuchMethodError", 179);
//     classes.insert("java/lang/NoSuchMethodException", 180);
//     classes.insert("java/lang/NullPointerException", 181);
//     classes.insert("java/lang/Number", 182);
//     classes.insert("java/lang/NumberFormatException", 183);
//     classes.insert("java/lang/NumericArrays", 184);
//     classes.insert("java/lang/NumericType", 185);
//     classes.insert("java/lang/Object", 186);
//     classes.insert("java/lang/OutOfMemoryError", 187);
//     classes.insert("java/lang/Override", 188);
//     classes.insert("java/lang/OwnershipTransferred", 189);
//     classes.insert("java/lang/Package", 190);
//     classes.insert("java/lang/Paused", 191);
//     classes.insert("java/lang/Readable", 192);
//     classes.insert("java/lang/ReflectiveOperationException", 193);
//     classes.insert("java/lang/RevertException", 194);
//     classes.insert("java/lang/Runtime", 195);
//     classes.insert("java/lang/RuntimeException", 196);
//     classes.insert("java/lang/SecurityException", 197);
//     classes.insert("java/lang/SecurityManager", 198);
//     classes.insert("java/lang/Short", 199);
//     classes.insert("java/lang/StackOverflowError", 200);
//     classes.insert("java/lang/StackTraceElement", 201);
//     classes.insert("java/lang/String", 202);
//     classes.insert("java/lang/StringBuffer", 203);
//     classes.insert("java/lang/StringBuilder", 204);
//     classes.insert("java/lang/StringBuilderCell", 205);
//     classes.insert("java/lang/StringComparator", 206);
//     classes.insert("java/lang/StringIndexOutOfBoundsException", 207);
//     classes.insert("java/lang/StringUtil", 208);
//     classes.insert("java/lang/SuppressWarnings", 209);
//     classes.insert("java/lang/System", 210);
//     classes.insert("java/lang/SystemNanoTime", 211);
//     classes.insert("java/lang/ThreadDeath", 212);
//     classes.insert("java/lang/Throwable", 213);
//     classes.insert("java/lang/Transfer", 214);
//     classes.insert("java/lang/TypeNotPresentException", 215);
//     classes.insert("java/lang/Uint", 216);
//     classes.insert("java/lang/Uint128", 217);
//     classes.insert("java/lang/Uint16", 218);
//     classes.insert("java/lang/Uint160", 219);
//     classes.insert("java/lang/Uint256", 220);
//     classes.insert("java/lang/Uint32", 221);
//     classes.insert("java/lang/Uint64", 222);
//     classes.insert("java/lang/Uint8", 223);
//     classes.insert("java/lang/UintType", 224);
//     classes.insert("java/lang/Unpaused", 225);
//     classes.insert("java/lang/UnsatisfiedLinkError", 226);
//     classes.insert("java/lang/UnsupportedOperationException", 227);
//     classes.insert("java/lang/VirtualMachineError", 228);
//     classes.insert("java/lang/Void", 229);
//     classes.insert("java/lang/annotation/Annotation", 230);
//     classes.insert("java/lang/annotation/Constant", 231);
//     classes.insert("java/lang/annotation/ElementType", 232);
//     classes.insert("java/lang/annotation/External", 233);
//     classes.insert("java/lang/annotation/Internal", 234);
//     classes.insert("java/lang/annotation/Payable", 235);
//     classes.insert("java/lang/annotation/Pure", 236);
//     classes.insert("java/lang/annotation/Retention", 237);
//     classes.insert("java/lang/annotation/RetentionPolicy", 238);
//     classes.insert("java/lang/annotation/Target", 239);
//     classes.insert("java/lang/annotation/View", 240);
//     classes.insert("java/lang/annotation/Virtual", 241);
//     classes.insert("java/lang/bytes/Division", 242);
//     classes.insert("java/lang/bytes/Hex", 243);
//     classes.insert("java/lang/bytes/Type", 244);
//     classes.insert("java/lang/contract/Contract", 245);
//     classes.insert("java/lang/contract/ERC20", 246);
//     classes.insert("java/lang/contract/ERC20InsufficientAllowance", 247);
//     classes.insert("java/lang/contract/ERC20InsufficientBalance", 248);
//     classes.insert("java/lang/contract/ERC20InvalidAmount", 249);
//     classes.insert("java/lang/contract/ERC20InvalidApprover", 250);
//     classes.insert("java/lang/contract/ERC20InvalidReceiver", 251);
//     classes.insert("java/lang/contract/ERC20InvalidSender", 252);
//     classes.insert("java/lang/contract/ERC20InvalidSpender", 253);
//     classes.insert("java/lang/contract/ERC20TokenPaused", 254);
//     classes.insert("java/lang/contract/IERC20", 255);
//     classes.insert("java/lang/contract/IERC20Errors", 256);
//     classes.insert("java/lang/contract/IERC20Metadata", 257);
//     classes.insert("java/lang/contract/OnlyOwner", 258);
//     classes.insert("java/lang/invoke/MethodHandle", 259);
//     classes.insert("java/lang/invoke/MethodHandles", 260);
//     classes.insert("java/lang/invoke/MethodHandlesLookup", 261);
//     classes.insert("java/lang/invoke/MethodType", 262);
//     classes.insert("java/lang/invoke/MethodTypeParameter", 263);
//     classes.insert("java/lang/invoke/MethodTypeResult", 264);
//     classes.insert("java/lang/invoke/MethodTypeType", 265);
//     classes.insert("java/lang/invoke/MethodTypeTypeSpec", 266);
//     classes.insert("java/lang/reflect/AccessibleObject", 267);
//     classes.insert("java/lang/reflect/AnnotatedElement", 268);
//     classes.insert("java/lang/reflect/Array", 269);
//     classes.insert("java/lang/reflect/Constructor", 270);
//     classes.insert("java/lang/reflect/Field", 271);
//     classes.insert("java/lang/reflect/GenericDeclaration", 272);
//     classes.insert("java/lang/reflect/InvocationHandler", 273);
//     classes.insert("java/lang/reflect/InvocationTargetException", 274);
//     classes.insert("java/lang/reflect/Member", 275);
//     classes.insert("java/lang/reflect/Method", 276);
//     classes.insert("java/lang/reflect/Modifier", 277);
//     classes.insert("java/lang/reflect/ParameterizedType", 278);
//     classes.insert("java/lang/reflect/Proxy", 279);
//     classes.insert("java/lang/reflect/SignatureParser", 280);
//     classes.insert("java/lang/reflect/SignatureParserType", 281);
//     classes.insert("java/lang/reflect/Type", 282);
//     classes.insert("java/lang/reflect/TypeVariable", 283);
//     classes.insert("java/lang/reflect/TypeVariableImpl", 284);
//     classes.insert("java/lang/reflect/TypeVariableImpl1", 285);
//     classes.insert("java/math/BigInteger", 286);
//     classes.insert("java/util/AbstractCollection", 287);
//     classes.insert("java/util/AbstractList", 288);
//     classes.insert("java/util/AbstractMap", 289);
//     classes.insert("java/util/AbstractSequentialList", 290);
//     classes.insert("java/util/AbstractSet", 291);
//     classes.insert("java/util/ArrayList", 292);
//     classes.insert("java/util/ArrayListIterator", 293);
//     classes.insert("java/util/Arrays", 294);
//     classes.insert("java/util/ArraysAbstractList", 295);
//     classes.insert("java/util/ArraysComparator", 296);
//     classes.insert("java/util/ArraysListIterator", 297);
//     classes.insert("java/util/BitSet", 298);
//     classes.insert("java/util/Collection", 299);
//     classes.insert("java/util/Collections", 300);
//     classes.insert("java/util/CollectionsComparator", 301);
//     classes.insert("java/util/Comparator", 302);
//     classes.insert("java/util/Date", 303);
//     classes.insert("java/util/Deque", 304);
//     classes.insert("java/util/Entry", 305);
//     classes.insert("java/util/EnumSet", 306);
//     classes.insert("java/util/EnumSetIterator", 307);
//     classes.insert("java/util/Enumeration", 308);
//     classes.insert("java/util/EventListener", 309);
//     classes.insert("java/util/EventObject", 310);
//     classes.insert("java/util/HashMap", 311);
//     classes.insert("java/util/HashMapCell", 312);
//     classes.insert("java/util/HashMapHelper", 313);
//     classes.insert("java/util/HashMapMyCell", 314);
//     classes.insert("java/util/HashMapMyEntryMap", 315);
//     classes.insert("java/util/HashMapMyHelper", 316);
//     classes.insert("java/util/HashMapMyIterator", 317);
//     classes.insert("java/util/HashSet", 318);
//     classes.insert("java/util/HashSetMyIterator", 319);
//     classes.insert("java/util/Hashtable", 320);
//     classes.insert("java/util/IdentityHashMap", 321);
//     classes.insert("java/util/IdentityHashMapMyHelper", 322);
//     classes.insert("java/util/IllegalFormatException", 323);
//     classes.insert("java/util/IterationModificationException", 324);
//     classes.insert("java/util/Iterator", 325);
//     classes.insert("java/util/IteratorEnumeration", 326);
//     classes.insert("java/util/LinkedList", 327);
//     classes.insert("java/util/LinkedListCell", 328);
//     classes.insert("java/util/LinkedListDescendingIterator", 329);
//     classes.insert("java/util/LinkedListMyIterator", 330);
//     classes.insert("java/util/List", 331);
//     classes.insert("java/util/ListIterator", 332);
//     classes.insert("java/util/Map", 333);
//     classes.insert("java/util/MaskInfo", 334);
//     classes.insert("java/util/MaskInfoIterator", 335);
//     classes.insert("java/util/NoSuchElementException", 336);
//     classes.insert("java/util/Objects", 337);
//     classes.insert("java/util/Queue", 338);
//     classes.insert("java/util/RandomAccess", 339);
//     classes.insert("java/util/RandomAccessSynchronizedList", 340);
//     classes.insert("java/util/ReverseComparator", 341);
//     classes.insert("java/util/Set", 342);
//     classes.insert("java/util/SynchronizedCollection", 343);
//     classes.insert("java/util/SynchronizedIterator", 344);
//     classes.insert("java/util/SynchronizedList", 345);
//     classes.insert("java/util/SynchronizedMap", 346);
//     classes.insert("java/util/SynchronizedSet", 347);
//     classes.insert("java/util/UnmodifiableCollection", 348);
//     classes.insert("java/util/UnmodifiableIterator", 349);
//     classes.insert("java/util/UnmodifiableList", 350);
//     classes.insert("java/util/UnmodifiableListIterator", 351);
//     classes.insert("java/util/UnmodifiableMap", 352);
//     classes.insert("java/util/UnmodifiableSet", 353);
//     let mut methods = FxHashMap::default();
//     methods.insert("java/base/Addendum#<init>:()V", (0, 0));
//     methods.insert("java/base/AnnotationInvocationHandler#<init>:([Ljava/lang/Object;)V", (1, 0));
//     methods.insert("java/base/AnnotationInvocationHandler#invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;", (1, 1));
//     methods.insert("java/base/Assembler#<init>:()V", (2, 0));
//     methods.insert("java/base/Assembler#writeClass:(Ljava/io/OutputStream;Ljava/util/List;II[I[Ljava/base/FieldData;[Ljava/base/MethodData;)V", (2, 1));
//     methods.insert("java/base/Atomic#<init>:()V", (3, 0));
//     methods.insert("java/base/Atomic#getOffset:(Ljava/lang/reflect/Field;)J", (3, 1));
//     methods.insert("java/base/Atomic#compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z", (3, 2));
//     methods.insert("java/base/Callable#call:()Ljava/lang/Object;", (4, 0));
//     methods.insert("java/base/Callback#handleResult:(Ljava/lang/Object;)V", (5, 0));
//     methods.insert("java/base/Callback#handleException:(Ljava/lang/Throwable;)V", (5, 1));
//     methods.insert("java/base/Cell#<init>:(Ljava/lang/Object;Ljava/base/Cell;)V", (6, 0));
//     methods.insert("java/base/Cell#toString:()Ljava/lang/String;", (6, 1));
//     methods.insert("java/base/Cell#cons:(Ljava/lang/Object;Ljava/base/Cell;)Ljava/base/Cell;", (6, 2));
//     methods.insert("java/base/Cell#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (6, 3));
//     methods.insert("java/base/Cell#equal:(Ljava/base/Cell;Ljava/base/Cell;)Z", (6, 4));
//     methods.insert("java/base/ClassAddendum#<init>:()V", (7, 0));
//     methods.insert("java/base/ClassPoolEntry#<init>:(I)V", (8, 0));
//     methods.insert("java/base/ClassPoolEntry#writeTo:(Ljava/io/OutputStream;)V", (8, 1));
//     methods.insert("java/base/ClassPoolEntry#equals:(Ljava/lang/Object;)Z", (8, 2));
//     methods.insert("java/base/Classes#<init>:()V", (9, 0));
//     methods.insert("java/base/Classes#defineVMClass:(Ljava/lang/ClassLoader;[BII)Ljava/base/VMClass;", (9, 1));
//     methods.insert("java/base/Classes#primitiveClass:(C)Ljava/base/VMClass;", (9, 2));
//     methods.insert("java/base/Classes#initialize:(Ljava/base/VMClass;)V", (9, 3));
//     methods.insert("java/base/Classes#isAssignableFrom:(Ljava/base/VMClass;Ljava/base/VMClass;)Z", (9, 4));
//     methods.insert("java/base/Classes#toVMClass:(Ljava/lang/Class;)Ljava/base/VMClass;", (9, 5));
//     methods.insert("java/base/Classes#toVMMethod:(Ljava/lang/reflect/Method;)Ljava/base/VMMethod;", (9, 6));
//     methods.insert("java/base/Classes#resolveVMClass:(Ljava/lang/ClassLoader;[B)Ljava/base/VMClass;", (9, 7));
//     methods.insert("java/base/Classes#loadVMClass:(Ljava/lang/ClassLoader;[BII)Ljava/base/VMClass;", (9, 8));
//     methods.insert("java/base/Classes#parseAnnotationValue:(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)Ljava/lang/Object;", (9, 9));
//     methods.insert("java/base/Classes#parseAnnotation:(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)[Ljava/lang/Object;", (9, 10));
//     methods.insert("java/base/Classes#parseAnnotationTable:(Ljava/lang/ClassLoader;Ljava/lang/Object;Ljava/io/InputStream;)[Ljava/lang/Object;", (9, 11));
//     methods.insert("java/base/Classes#parseAnnotationTable:(Ljava/lang/ClassLoader;Ljava/base/Addendum;)V", (9, 12));
//     methods.insert("java/base/Classes#resolveSpec:(Ljava/lang/ClassLoader;[BI)I", (9, 13));
//     methods.insert("java/base/Classes#declaredMethodCount:(Ljava/base/VMClass;)I", (9, 14));
//     methods.insert("java/base/Classes#link:(Ljava/base/VMClass;Ljava/lang/ClassLoader;)V", (9, 15));
//     methods.insert("java/base/Classes#link:(Ljava/base/VMClass;)V", (9, 16));
//     methods.insert("java/base/Classes#forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", (9, 17));
//     methods.insert("java/base/Classes#forCanonicalName:(Ljava/lang/String;)Ljava/lang/Class;", (9, 18));
//     methods.insert("java/base/Classes#forCanonicalName:(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/Class;", (9, 19));
//     methods.insert("java/base/Classes#next:(CLjava/lang/String;I)I", (9, 20));
//     methods.insert("java/base/Classes#getParameterTypes:(Ljava/base/VMMethod;)[Ljava/lang/Class;", (9, 21));
//     methods.insert("java/base/Classes#findField:(Ljava/base/VMClass;Ljava/lang/String;)I", (9, 22));
//     methods.insert("java/base/Classes#toString:([B)Ljava/lang/String;", (9, 23));
//     methods.insert("java/base/Classes#match:(Ljava/base/VMClass;Ljava/base/VMClass;)Z", (9, 24));
//     methods.insert("java/base/Classes#match:([Ljava/lang/Class;[Ljava/lang/Class;)Z", (9, 25));
//     methods.insert("java/base/Classes#findMethod:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/base/VMMethod;", (9, 26));
//     methods.insert("java/base/Classes#findMethod:(Ljava/base/VMClass;Ljava/lang/String;[Ljava/lang/Class;)I", (9, 27));
//     methods.insert("java/base/Classes#countMethods:(Ljava/base/VMClass;Z)I", (9, 28));
//     methods.insert("java/base/Classes#getMethods:(Ljava/base/VMClass;Z)[Ljava/lang/reflect/Method;", (9, 29));
//     methods.insert("java/base/Classes#countFields:(Ljava/base/VMClass;Z)I", (9, 30));
//     methods.insert("java/base/Classes#getFields:(Ljava/base/VMClass;Z)[Ljava/lang/reflect/Field;", (9, 31));
//     methods.insert("java/base/Classes#getAnnotation:(Ljava/lang/ClassLoader;[Ljava/lang/Object;)Ljava/lang/annotation/Annotation;", (9, 32));
//     methods.insert("java/base/Classes#getAnnotationDefaultValue:(Ljava/lang/ClassLoader;Ljava/base/MethodAddendum;)Ljava/lang/Object;", (9, 33));
//     methods.insert("java/base/Classes#index:(Ljava/base/VMMethod;)I", (9, 34));
//     methods.insert("java/base/Classes#makeMethod:(Ljava/base/VMMethod;)Ljava/lang/reflect/Method;", (9, 35));
//     methods.insert("java/base/Classes#makeMethod:(Ljava/lang/Class;I)Ljava/lang/reflect/Method;", (9, 36));
//     methods.insert("java/base/Classes#makeField:(Ljava/lang/Class;I)Ljava/lang/reflect/Field;", (9, 37));
//     methods.insert("java/base/Classes#acquireClassLock:()V", (9, 38));
//     methods.insert("java/base/Classes#releaseClassLock:()V", (9, 39));
//     methods.insert("java/base/Classes#makeString:([BII)Ljava/lang/String;", (9, 40));
//     methods.insert("java/base/Code#<init>:()V", (10, 0));
//     methods.insert("java/base/ConstantPool#<init>:()V", (11, 0));
//     methods.insert("java/base/ConstantPool#add:(Ljava/util/List;Ljava/base/PoolEntry;)I", (11, 1));
//     methods.insert("java/base/ConstantPool#addInteger:(Ljava/util/List;I)I", (11, 2));
//     methods.insert("java/base/ConstantPool#addUtf8:(Ljava/util/List;Ljava/lang/String;)I", (11, 3));
//     methods.insert("java/base/ConstantPool#addString:(Ljava/util/List;Ljava/lang/String;)I", (11, 4));
//     methods.insert("java/base/ConstantPool#addClass:(Ljava/util/List;Ljava/lang/String;)I", (11, 5));
//     methods.insert("java/base/ConstantPool#addNameAndType:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)I", (11, 6));
//     methods.insert("java/base/ConstantPool#addFieldRef:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", (11, 7));
//     methods.insert("java/base/ConstantPool#addMethodRef:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", (11, 8));
//     methods.insert("java/base/ConstantPool#addInterfaceMethodRef:(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", (11, 9));
//     methods.insert("java/base/Data#<init>:()V", (12, 0));
//     methods.insert("java/base/Data#nextPowerOfTwo:(I)I", (12, 1));
//     methods.insert("java/base/Data#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (12, 2));
//     methods.insert("java/base/Data#toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;", (12, 3));
//     methods.insert("java/base/Data#toString:(Ljava/util/Collection;)Ljava/lang/String;", (12, 4));
//     methods.insert("java/base/Data#toString:(Ljava/util/Map;)Ljava/lang/String;", (12, 5));
//     methods.insert("java/base/DataEntryMap#size:()I", (13, 0));
//     methods.insert("java/base/DataEntryMap#find:(Ljava/lang/Object;)Ljava/util/Entry;", (13, 1));
//     methods.insert("java/base/DataEntryMap#remove:(Ljava/lang/Object;)Ljava/util/Entry;", (13, 2));
//     methods.insert("java/base/DataEntryMap#clear:()V", (13, 3));
//     methods.insert("java/base/DataEntryMap#iterator:()Ljava/util/Iterator;", (13, 4));
//     methods.insert("java/base/DataEntrySet#<init>:(Ljava/base/DataEntryMap;)V", (14, 0));
//     methods.insert("java/base/DataEntrySet#size:()I", (14, 1));
//     methods.insert("java/base/DataEntrySet#isEmpty:()Z", (14, 2));
//     methods.insert("java/base/DataEntrySet#contains:(Ljava/lang/Object;)Z", (14, 3));
//     methods.insert("java/base/DataEntrySet#add:(Ljava/util/Entry;)Z", (14, 4));
//     methods.insert("java/base/DataEntrySet#remove:(Ljava/lang/Object;)Z", (14, 5));
//     methods.insert("java/base/DataEntrySet#remove:(Ljava/util/Entry;)Z", (14, 6));
//     methods.insert("java/base/DataEntrySet#toArray:()[Ljava/lang/Object;", (14, 7));
//     methods.insert("java/base/DataEntrySet#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (14, 8));
//     methods.insert("java/base/DataEntrySet#clear:()V", (14, 9));
//     methods.insert("java/base/DataEntrySet#iterator:()Ljava/util/Iterator;", (14, 10));
//     methods.insert("java/base/DataEntrySet#add:(Ljava/lang/Object;)Z", (14, 11));
//     methods.insert("java/base/DataKeyIterator#<init>:(Ljava/util/Iterator;)V", (15, 0));
//     methods.insert("java/base/DataKeyIterator#next:()Ljava/lang/Object;", (15, 1));
//     methods.insert("java/base/DataKeyIterator#hasNext:()Z", (15, 2));
//     methods.insert("java/base/DataKeyIterator#remove:()V", (15, 3));
//     methods.insert("java/base/DataKeySet#<init>:(Ljava/base/DataEntryMap;)V", (16, 0));
//     methods.insert("java/base/DataKeySet#size:()I", (16, 1));
//     methods.insert("java/base/DataKeySet#isEmpty:()Z", (16, 2));
//     methods.insert("java/base/DataKeySet#contains:(Ljava/lang/Object;)Z", (16, 3));
//     methods.insert("java/base/DataKeySet#add:(Ljava/lang/Object;)Z", (16, 4));
//     methods.insert("java/base/DataKeySet#remove:(Ljava/lang/Object;)Z", (16, 5));
//     methods.insert("java/base/DataKeySet#toArray:()[Ljava/lang/Object;", (16, 6));
//     methods.insert("java/base/DataKeySet#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (16, 7));
//     methods.insert("java/base/DataKeySet#clear:()V", (16, 8));
//     methods.insert("java/base/DataKeySet#iterator:()Ljava/util/Iterator;", (16, 9));
//     methods.insert("java/base/DataValueIterator#<init>:(Ljava/util/Iterator;)V", (17, 0));
//     methods.insert("java/base/DataValueIterator#next:()Ljava/lang/Object;", (17, 1));
//     methods.insert("java/base/DataValueIterator#hasNext:()Z", (17, 2));
//     methods.insert("java/base/DataValueIterator#remove:()V", (17, 3));
//     methods.insert("java/base/DataValues#<init>:(Ljava/base/DataEntryMap;)V", (18, 0));
//     methods.insert("java/base/DataValues#size:()I", (18, 1));
//     methods.insert("java/base/DataValues#isEmpty:()Z", (18, 2));
//     methods.insert("java/base/DataValues#contains:(Ljava/lang/Object;)Z", (18, 3));
//     methods.insert("java/base/DataValues#containsAll:(Ljava/util/Collection;)Z", (18, 4));
//     methods.insert("java/base/DataValues#add:(Ljava/lang/Object;)Z", (18, 5));
//     methods.insert("java/base/DataValues#addAll:(Ljava/util/Collection;)Z", (18, 6));
//     methods.insert("java/base/DataValues#remove:(Ljava/lang/Object;)Z", (18, 7));
//     methods.insert("java/base/DataValues#removeAll:(Ljava/util/Collection;)Z", (18, 8));
//     methods.insert("java/base/DataValues#retainAll:(Ljava/util/Collection;)Z", (18, 9));
//     methods.insert("java/base/DataValues#toArray:()[Ljava/lang/Object;", (18, 10));
//     methods.insert("java/base/DataValues#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (18, 11));
//     methods.insert("java/base/DataValues#clear:()V", (18, 12));
//     methods.insert("java/base/DataValues#iterator:()Ljava/util/Iterator;", (18, 13));
//     methods.insert("java/base/FieldAddendum#<init>:()V", (19, 0));
//     methods.insert("java/base/FieldData#<init>:(III)V", (20, 0));
//     methods.insert("java/base/FieldRefPoolEntry#<init>:(II)V", (21, 0));
//     methods.insert("java/base/FieldRefPoolEntry#writeTo:(Ljava/io/OutputStream;)V", (21, 1));
//     methods.insert("java/base/FieldRefPoolEntry#equals:(Ljava/lang/Object;)Z", (21, 2));
//     methods.insert("java/base/Function#call:(Ljava/lang/Object;)Ljava/lang/Object;", (22, 0));
//     methods.insert("java/base/IncompatibleContinuationException#<init>:(Ljava/lang/String;)V", (23, 0));
//     methods.insert("java/base/IncompatibleContinuationException#<init>:()V", (23, 1));
//     methods.insert("java/base/InnerClassReference#<init>:()V", (24, 0));
//     methods.insert("java/base/IntegerPoolEntry#<init>:(I)V", (25, 0));
//     methods.insert("java/base/IntegerPoolEntry#writeTo:(Ljava/io/OutputStream;)V", (25, 1));
//     methods.insert("java/base/IntegerPoolEntry#equals:(Ljava/lang/Object;)Z", (25, 2));
//     methods.insert("java/base/InterfaceMethodRefPoolEntry#<init>:(II)V", (26, 0));
//     methods.insert("java/base/InterfaceMethodRefPoolEntry#writeTo:(Ljava/io/OutputStream;)V", (26, 1));
//     methods.insert("java/base/InterfaceMethodRefPoolEntry#equals:(Ljava/lang/Object;)Z", (26, 2));
//     methods.insert("java/base/MethodAddendum#<init>:()V", (27, 0));
//     methods.insert("java/base/MethodData#<init>:(III[B)V", (28, 0));
//     methods.insert("java/base/MethodRefPoolEntry#<init>:(II)V", (29, 0));
//     methods.insert("java/base/MethodRefPoolEntry#writeTo:(Ljava/io/OutputStream;)V", (29, 1));
//     methods.insert("java/base/MethodRefPoolEntry#equals:(Ljava/lang/Object;)Z", (29, 2));
//     methods.insert("java/base/NameAndTypePoolEntry#<init>:(II)V", (30, 0));
//     methods.insert("java/base/NameAndTypePoolEntry#writeTo:(Ljava/io/OutputStream;)V", (30, 1));
//     methods.insert("java/base/NameAndTypePoolEntry#equals:(Ljava/lang/Object;)Z", (30, 2));
//     methods.insert("java/base/Pair#<init>:()V", (31, 0));
//     methods.insert("java/base/PoolEntry#writeTo:(Ljava/io/OutputStream;)V", (32, 0));
//     methods.insert("java/base/Singleton#<init>:()V", (33, 0));
//     methods.insert("java/base/Singleton#getInt:(Ljava/lang/Object;I)I", (33, 1));
//     methods.insert("java/base/Singleton#getLong:(Ljava/lang/Object;I)J", (33, 2));
//     methods.insert("java/base/Singleton#getObject:(Ljava/lang/Object;I)Ljava/lang/Object;", (33, 3));
//     methods.insert("java/base/Stream#<init>:()V", (34, 0));
//     methods.insert("java/base/Stream#write1:(Ljava/io/OutputStream;I)V", (34, 1));
//     methods.insert("java/base/Stream#read1:(Ljava/io/InputStream;)I", (34, 2));
//     methods.insert("java/base/Stream#write2:(Ljava/io/OutputStream;I)V", (34, 3));
//     methods.insert("java/base/Stream#read2:(Ljava/io/InputStream;)I", (34, 4));
//     methods.insert("java/base/Stream#write4:(Ljava/io/OutputStream;I)V", (34, 5));
//     methods.insert("java/base/Stream#read4:(Ljava/io/InputStream;)I", (34, 6));
//     methods.insert("java/base/Stream#write8:(Ljava/io/OutputStream;J)V", (34, 7));
//     methods.insert("java/base/Stream#read8:(Ljava/io/InputStream;)J", (34, 8));
//     methods.insert("java/base/Stream#set4:([BII)V", (34, 9));
//     methods.insert("java/base/StringPoolEntry#<init>:(I)V", (35, 0));
//     methods.insert("java/base/StringPoolEntry#writeTo:(Ljava/io/OutputStream;)V", (35, 1));
//     methods.insert("java/base/StringPoolEntry#equals:(Ljava/lang/Object;)Z", (35, 2));
//     methods.insert("java/base/SystemClassLoader#<init>:()V", (36, 0));
//     methods.insert("java/base/SystemClassLoader#appLoader:()Ljava/lang/ClassLoader;", (36, 1));
//     methods.insert("java/base/SystemClassLoader#findVMClass:(Ljava/lang/String;)Ljava/base/VMClass;", (36, 2));
//     methods.insert("java/base/SystemClassLoader#findClass:(Ljava/lang/String;)Ljava/lang/Class;", (36, 3));
//     methods.insert("java/base/SystemClassLoader#getClass:(Ljava/base/VMClass;)Ljava/lang/Class;", (36, 4));
//     methods.insert("java/base/SystemClassLoader#vmClass:(Ljava/lang/Class;)Ljava/base/VMClass;", (36, 5));
//     methods.insert("java/base/SystemClassLoader#findLoadedVMClass:(Ljava/lang/String;)Ljava/base/VMClass;", (36, 6));
//     methods.insert("java/base/SystemClassLoader#reallyFindLoadedClass:(Ljava/lang/String;)Ljava/lang/Class;", (36, 7));
//     methods.insert("java/base/SystemClassLoader#loadClass:(Ljava/lang/String;Z)Ljava/lang/Class;", (36, 8));
//     methods.insert("java/base/SystemClassLoader#resourceURLPrefix:(Ljava/lang/String;)Ljava/lang/String;", (36, 9));
//     methods.insert("java/base/SystemClassLoader#findResource:(Ljava/lang/String;)Ljava/lang/Object;", (36, 10));
//     methods.insert("java/base/SystemClassLoader#getPackageSource:(Ljava/lang/String;)Ljava/lang/String;", (36, 11));
//     methods.insert("java/base/SystemClassLoader#getResource:(Ljava/lang/String;)Ljava/lang/Object;", (36, 12));
//     methods.insert("java/base/SystemClassLoader#getResources:(Ljava/lang/String;)Ljava/util/Enumeration;", (36, 13));
//     methods.insert("java/base/SystemClassLoader#findResources:(Ljava/lang/String;)Ljava/util/Enumeration;", (36, 14));
//     methods.insert("java/base/SystemClassLoader#getSystemClassLoader:()Ljava/lang/ClassLoader;", (36, 15));
//     methods.insert("java/base/Utf8#<init>:()V", (37, 0));
//     methods.insert("java/base/Utf8#test:(Ljava/lang/Object;)Z", (37, 1));
//     methods.insert("java/base/Utf8#encode:([CII)[B", (37, 2));
//     methods.insert("java/base/Utf8#decode:([BII)Ljava/lang/Object;", (37, 3));
//     methods.insert("java/base/Utf8#decode16:([BII)[C", (37, 4));
//     methods.insert("java/base/Utf8#cram:(Ljava/lang/Object;II)V", (37, 5));
//     methods.insert("java/base/Utf8#widen:(Ljava/lang/Object;II)Ljava/lang/Object;", (37, 6));
//     methods.insert("java/base/Utf8#trim:(Ljava/lang/Object;I)Ljava/lang/Object;", (37, 7));
//     methods.insert("java/base/Utf8PoolEntry#<init>:(Ljava/lang/String;)V", (38, 0));
//     methods.insert("java/base/Utf8PoolEntry#writeTo:(Ljava/io/OutputStream;)V", (38, 1));
//     methods.insert("java/base/Utf8PoolEntry#equals:(Ljava/lang/Object;)Z", (38, 2));
//     methods.insert("java/base/VMClass#<init>:()V", (39, 0));
//     methods.insert("java/base/VMField#<init>:()V", (40, 0));
//     methods.insert("java/base/VMMethod#<init>:()V", (41, 0));
//     methods.insert("java/base/VMMethod#hasAnnotations:()Z", (41, 1));
//     methods.insert("java/io/ByteArrayInputStream#<init>:([BII)V", (42, 0));
//     methods.insert("java/io/ByteArrayInputStream#<init>:([B)V", (42, 1));
//     methods.insert("java/io/ByteArrayInputStream#read:()I", (42, 2));
//     methods.insert("java/io/ByteArrayInputStream#read:([BII)I", (42, 3));
//     methods.insert("java/io/ByteArrayInputStream#available:()I", (42, 4));
//     methods.insert("java/io/ByteArrayOutputStream#<init>:(I)V", (43, 0));
//     methods.insert("java/io/ByteArrayOutputStream#<init>:()V", (43, 1));
//     methods.insert("java/io/ByteArrayOutputStream#reset:()V", (43, 2));
//     methods.insert("java/io/ByteArrayOutputStream#size:()I", (43, 3));
//     methods.insert("java/io/ByteArrayOutputStream#write:(I)V", (43, 4));
//     methods.insert("java/io/ByteArrayOutputStream#copy:([BII)[B", (43, 5));
//     methods.insert("java/io/ByteArrayOutputStream#write:([BII)V", (43, 6));
//     methods.insert("java/io/ByteArrayOutputStream#chainCell:(Ljava/io/ByteArrayOutputStreamCell;)V", (43, 7));
//     methods.insert("java/io/ByteArrayOutputStream#flushBuffer:()V", (43, 8));
//     methods.insert("java/io/ByteArrayOutputStream#toByteArray:()[B", (43, 9));
//     methods.insert("java/io/ByteArrayOutputStream#writeTo:(Ljava/io/OutputStream;)V", (43, 10));
//     methods.insert("java/io/ByteArrayOutputStream#toString:()Ljava/lang/String;", (43, 11));
//     methods.insert("java/io/ByteArrayOutputStream#toString:(Ljava/lang/String;)Ljava/lang/String;", (43, 12));
//     methods.insert("java/io/ByteArrayOutputStreamCell#<init>:([BII)V", (44, 0));
//     methods.insert("java/io/CharToPrimitiveType#<init>:()V", (45, 0));
//     methods.insert("java/io/CharToPrimitiveType#charToPrimitiveType:(I)Ljava/lang/Class;", (45, 1));
//     methods.insert("java/io/Closeable#close:()V", (46, 0));
//     methods.insert("java/io/EOFException#<init>:(Ljava/lang/String;)V", (47, 0));
//     methods.insert("java/io/EOFException#<init>:()V", (47, 1));
//     methods.insert("java/io/Flushable#flush:()V", (48, 0));
//     methods.insert("java/io/IOException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (49, 0));
//     methods.insert("java/io/IOException#<init>:(Ljava/lang/String;)V", (49, 1));
//     methods.insert("java/io/IOException#<init>:(Ljava/lang/Throwable;)V", (49, 2));
//     methods.insert("java/io/IOException#<init>:()V", (49, 3));
//     methods.insert("java/io/InputStream#<init>:()V", (50, 0));
//     methods.insert("java/io/InputStream#read:()I", (50, 1));
//     methods.insert("java/io/InputStream#read:([B)I", (50, 2));
//     methods.insert("java/io/InputStream#read:([BII)I", (50, 3));
//     methods.insert("java/io/InputStream#skip:(J)J", (50, 4));
//     methods.insert("java/io/InputStream#available:()I", (50, 5));
//     methods.insert("java/io/InputStream#mark:(I)V", (50, 6));
//     methods.insert("java/io/InputStream#reset:()V", (50, 7));
//     methods.insert("java/io/InputStream#markSupported:()Z", (50, 8));
//     methods.insert("java/io/InputStream#close:()V", (50, 9));
//     methods.insert("java/io/ObjectInputStream#<init>:(Ljava/io/InputStream;)V", (51, 0));
//     methods.insert("java/io/ObjectInputStream#read:()I", (51, 1));
//     methods.insert("java/io/ObjectInputStream#rawByte:()I", (51, 2));
//     methods.insert("java/io/ObjectInputStream#rawShort:()I", (51, 3));
//     methods.insert("java/io/ObjectInputStream#rawInt:()I", (51, 4));
//     methods.insert("java/io/ObjectInputStream#rawLong:()J", (51, 5));
//     methods.insert("java/io/ObjectInputStream#rawString:()Ljava/lang/String;", (51, 6));
//     methods.insert("java/io/ObjectInputStream#read:([BII)I", (51, 7));
//     methods.insert("java/io/ObjectInputStream#readFully:([B)V", (51, 8));
//     methods.insert("java/io/ObjectInputStream#readFully:([BII)V", (51, 9));
//     methods.insert("java/io/ObjectInputStream#readLine:()Ljava/lang/String;", (51, 10));
//     methods.insert("java/io/ObjectInputStream#close:()V", (51, 11));
//     methods.insert("java/io/ObjectInputStream#rawBlockDataByte:()I", (51, 12));
//     methods.insert("java/io/ObjectInputStream#rawBlockDataShort:()I", (51, 13));
//     methods.insert("java/io/ObjectInputStream#rawBlockDataInt:()I", (51, 14));
//     methods.insert("java/io/ObjectInputStream#rawBlockDataLong:()J", (51, 15));
//     methods.insert("java/io/ObjectInputStream#readBoolean:()Z", (51, 16));
//     methods.insert("java/io/ObjectInputStream#readByte:()B", (51, 17));
//     methods.insert("java/io/ObjectInputStream#readChar:()C", (51, 18));
//     methods.insert("java/io/ObjectInputStream#readShort:()S", (51, 19));
//     methods.insert("java/io/ObjectInputStream#readInt:()I", (51, 20));
//     methods.insert("java/io/ObjectInputStream#readLong:()J", (51, 21));
//     methods.insert("java/io/ObjectInputStream#readUnsignedByte:()I", (51, 22));
//     methods.insert("java/io/ObjectInputStream#readUnsignedShort:()I", (51, 23));
//     methods.insert("java/io/ObjectInputStream#readUTF:()Ljava/lang/String;", (51, 24));
//     methods.insert("java/io/ObjectInputStream#skipBytes:(I)I", (51, 25));
//     methods.insert("java/io/ObjectInputStream#expectToken:(I)V", (51, 26));
//     methods.insert("java/io/ObjectInputStream#field:(Ljava/lang/reflect/Field;Ljava/lang/Object;)V", (51, 27));
//     methods.insert("java/io/ObjectInputStream#readObject:()Ljava/lang/Object;", (51, 28));
//     methods.insert("java/io/ObjectInputStream#classDesc:()Ljava/io/ObjectInputStreamClassDesc;", (51, 29));
//     methods.insert("java/io/ObjectInputStream#defaultReadObject:()V", (51, 30));
//     methods.insert("java/io/ObjectInputStream#defaultReadObject:(Ljava/lang/Object;[Ljava/lang/reflect/Field;)V", (51, 31));
//     methods.insert("java/io/ObjectInputStream#makeInstance:(Ljava/base/VMClass;)Ljava/lang/Object;", (51, 32));
//     methods.insert("java/io/ObjectInputStreamClassDesc#<init>:()V", (52, 0));
//     methods.insert("java/io/ObjectOutputStream#<init>:(Ljava/io/OutputStream;)V", (53, 0));
//     methods.insert("java/io/ObjectOutputStream#write:(I)V", (53, 1));
//     methods.insert("java/io/ObjectOutputStream#write:([BII)V", (53, 2));
//     methods.insert("java/io/ObjectOutputStream#flush:()V", (53, 3));
//     methods.insert("java/io/ObjectOutputStream#close:()V", (53, 4));
//     methods.insert("java/io/ObjectOutputStream#rawByte:(I)V", (53, 5));
//     methods.insert("java/io/ObjectOutputStream#rawShort:(I)V", (53, 6));
//     methods.insert("java/io/ObjectOutputStream#rawInt:(I)V", (53, 7));
//     methods.insert("java/io/ObjectOutputStream#rawLong:(J)V", (53, 8));
//     methods.insert("java/io/ObjectOutputStream#blockData:([I)V", (53, 9));
//     methods.insert("java/io/ObjectOutputStream#blockData:([I[B[C)V", (53, 10));
//     methods.insert("java/io/ObjectOutputStream#writeBoolean:(Z)V", (53, 11));
//     methods.insert("java/io/ObjectOutputStream#writeByte:(I)V", (53, 12));
//     methods.insert("java/io/ObjectOutputStream#writeShort:(I)V", (53, 13));
//     methods.insert("java/io/ObjectOutputStream#writeChar:(I)V", (53, 14));
//     methods.insert("java/io/ObjectOutputStream#writeInt:(I)V", (53, 15));
//     methods.insert("java/io/ObjectOutputStream#writeLong:(J)V", (53, 16));
//     methods.insert("java/io/ObjectOutputStream#writeBytes:(Ljava/lang/String;)V", (53, 17));
//     methods.insert("java/io/ObjectOutputStream#writeChars:(Ljava/lang/String;)V", (53, 18));
//     methods.insert("java/io/ObjectOutputStream#writeUTF:(Ljava/lang/String;)V", (53, 19));
//     methods.insert("java/io/ObjectOutputStream#string:(Ljava/lang/String;)V", (53, 20));
//     methods.insert("java/io/ObjectOutputStream#primitiveTypeChar:(Ljava/lang/Class;)C", (53, 21));
//     methods.insert("java/io/ObjectOutputStream#classDesc:(Ljava/lang/Class;I)V", (53, 22));
//     methods.insert("java/io/ObjectOutputStream#field:(Ljava/lang/Object;Ljava/lang/reflect/Field;)V", (53, 23));
//     methods.insert("java/io/ObjectOutputStream#getFields:(Ljava/lang/Class;)[Ljava/lang/reflect/Field;", (53, 24));
//     methods.insert("java/io/ObjectOutputStream#writeObject:(Ljava/lang/Object;)V", (53, 25));
//     methods.insert("java/io/ObjectOutputStream#getReadOrWriteMethod:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/reflect/Method;", (53, 26));
//     methods.insert("java/io/ObjectOutputStream#defaultWriteObject:()V", (53, 27));
//     methods.insert("java/io/ObjectOutputStream#defaultWriteObject:(Ljava/lang/Object;)V", (53, 28));
//     methods.insert("java/io/OutputStream#<init>:()V", (54, 0));
//     methods.insert("java/io/OutputStream#write:(I)V", (54, 1));
//     methods.insert("java/io/OutputStream#write:([B)V", (54, 2));
//     methods.insert("java/io/OutputStream#write:([BII)V", (54, 3));
//     methods.insert("java/io/OutputStream#flush:()V", (54, 4));
//     methods.insert("java/io/OutputStream#close:()V", (54, 5));
//     methods.insert("java/io/PrintStream#print:(Ljava/lang/String;)V", (55, 0));
//     methods.insert("java/io/PrintStream#print:(Ljava/lang/Object;)V", (55, 1));
//     methods.insert("java/io/PrintStream#print:(Z)V", (55, 2));
//     methods.insert("java/io/PrintStream#print:(C)V", (55, 3));
//     methods.insert("java/io/PrintStream#print:(I)V", (55, 4));
//     methods.insert("java/io/PrintStream#print:(J)V", (55, 5));
//     methods.insert("java/io/PrintStream#print:([C)V", (55, 6));
//     methods.insert("java/io/PrintStream#println:()V", (55, 7));
//     methods.insert("java/io/PrintStream#println:(Ljava/lang/String;)V", (55, 8));
//     methods.insert("java/io/PrintStream#println:(Ljava/lang/Object;)V", (55, 9));
//     methods.insert("java/io/PrintStream#println:(Z)V", (55, 10));
//     methods.insert("java/io/PrintStream#println:(C)V", (55, 11));
//     methods.insert("java/io/PrintStream#println:(I)V", (55, 12));
//     methods.insert("java/io/PrintStream#println:(J)V", (55, 13));
//     methods.insert("java/io/PrintStream#println:([C)V", (55, 14));
//     methods.insert("java/io/PrintStream#flush:()V", (55, 15));
//     methods.insert("java/io/SystemPrintStream#<init>:()V", (57, 0));
//     methods.insert("java/io/SystemPrintStream#print:(Z)V", (57, 1));
//     methods.insert("java/io/SystemPrintStream#print:(C)V", (57, 2));
//     methods.insert("java/io/SystemPrintStream#print:(I)V", (57, 3));
//     methods.insert("java/io/SystemPrintStream#print:(J)V", (57, 4));
//     methods.insert("java/io/SystemPrintStream#print:([C)V", (57, 5));
//     methods.insert("java/io/SystemPrintStream#print:(Ljava/lang/String;)V", (57, 6));
//     methods.insert("java/io/SystemPrintStream#print:(Ljava/lang/Object;)V", (57, 7));
//     methods.insert("java/io/SystemPrintStream#println:()V", (57, 8));
//     methods.insert("java/io/SystemPrintStream#println:(Z)V", (57, 9));
//     methods.insert("java/io/SystemPrintStream#println:(C)V", (57, 10));
//     methods.insert("java/io/SystemPrintStream#println:(I)V", (57, 11));
//     methods.insert("java/io/SystemPrintStream#println:(J)V", (57, 12));
//     methods.insert("java/io/SystemPrintStream#println:([C)V", (57, 13));
//     methods.insert("java/io/SystemPrintStream#println:(Ljava/lang/String;)V", (57, 14));
//     methods.insert("java/io/SystemPrintStream#println:(Ljava/lang/Object;)V", (57, 15));
//     methods.insert("java/io/SystemPrintStream#flush:()V", (57, 16));
//     methods.insert("java/io/SystemPrintStream#nativePrint:(J)V", (57, 17));
//     methods.insert("java/io/SystemPrintStream#nativePrint:([C)V", (57, 18));
//     methods.insert("java/io/SystemPrintStream#nativePrint:(Ljava/lang/Object;)V", (57, 19));
//     methods.insert("java/io/SystemPrintStream#nativePrint:(Z)V", (57, 20));
//     methods.insert("java/io/SystemPrintStream#nativePrint:(I)V", (57, 21));
//     methods.insert("java/io/SystemPrintStream#nativePrint:(Ljava/lang/String;)V", (57, 22));
//     methods.insert("java/io/UnsupportedEncodingException#<init>:(Ljava/lang/String;)V", (58, 0));
//     methods.insert("java/io/UnsupportedEncodingException#<init>:()V", (58, 1));
//     methods.insert("java/lang/AbstractMethodError#<init>:()V", (59, 0));
//     methods.insert("java/lang/AbstractMethodError#<init>:(Ljava/lang/String;)V", (59, 1));
//     methods.insert("java/lang/Address#<init>:(Ljava/lang/Uint160;)V", (60, 0));
//     methods.insert("java/lang/Address#<init>:(Ljava/math/BigInteger;)V", (60, 1));
//     methods.insert("java/lang/Address#<init>:(ILjava/math/BigInteger;)V", (60, 2));
//     methods.insert("java/lang/Address#<init>:(Ljava/lang/String;)V", (60, 3));
//     methods.insert("java/lang/Address#<init>:(ILjava/lang/String;)V", (60, 4));
//     methods.insert("java/lang/Address#toUint:()Ljava/lang/Uint160;", (60, 5));
//     methods.insert("java/lang/Address#isZeroAddress:()Z", (60, 6));
//     methods.insert("java/lang/Address#getTypeAsString:()Ljava/lang/String;", (60, 7));
//     methods.insert("java/lang/Address#toString:()Ljava/lang/String;", (60, 8));
//     methods.insert("java/lang/Address#getValue:()Ljava/lang/String;", (60, 9));
//     methods.insert("java/lang/Address#equals:(Ljava/lang/Object;)Z", (60, 10));
//     methods.insert("java/lang/Address#hashCode:()I", (60, 11));
//     methods.insert("java/lang/Address#getValue:()Ljava/lang/Object;", (60, 12));
//     methods.insert("java/lang/Address#<clinit>:()V", (60, 13));
//     methods.insert("java/lang/Appendable#append:(C)Ljava/lang/Appendable;", (61, 0));
//     methods.insert("java/lang/Appendable#append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;", (61, 1));
//     methods.insert("java/lang/Appendable#append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;", (61, 2));
//     methods.insert("java/lang/Approval#<init>:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", (62, 0));
//     methods.insert("java/lang/ArithmeticException#<init>:(Ljava/lang/String;)V", (63, 0));
//     methods.insert("java/lang/ArithmeticException#<init>:()V", (63, 1));
//     methods.insert("java/lang/ArrayIndexOutOfBoundsException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (64, 0));
//     methods.insert("java/lang/ArrayIndexOutOfBoundsException#<init>:(Ljava/lang/String;)V", (64, 1));
//     methods.insert("java/lang/ArrayIndexOutOfBoundsException#<init>:(Ljava/lang/Throwable;)V", (64, 2));
//     methods.insert("java/lang/ArrayIndexOutOfBoundsException#<init>:(I)V", (64, 3));
//     methods.insert("java/lang/ArrayIndexOutOfBoundsException#<init>:()V", (64, 4));
//     methods.insert("java/lang/ArrayStoreException#<init>:(Ljava/lang/String;)V", (65, 0));
//     methods.insert("java/lang/ArrayStoreException#<init>:()V", (65, 1));
//     methods.insert("java/lang/AssertionError#<init>:()V", (66, 0));
//     methods.insert("java/lang/AssertionError#<init>:(Z)V", (66, 1));
//     methods.insert("java/lang/AssertionError#<init>:(C)V", (66, 2));
//     methods.insert("java/lang/AssertionError#<init>:(D)V", (66, 3));
//     methods.insert("java/lang/AssertionError#<init>:(F)V", (66, 4));
//     methods.insert("java/lang/AssertionError#<init>:(I)V", (66, 5));
//     methods.insert("java/lang/AssertionError#<init>:(J)V", (66, 6));
//     methods.insert("java/lang/AssertionError#<init>:(Ljava/lang/Object;)V", (66, 7));
//     methods.insert("java/lang/AutoCloseable#close:()V", (67, 0));
//     methods.insert("java/lang/Bool#<init>:(Z)V", (68, 0));
//     methods.insert("java/lang/Bool#<init>:(Ljava/lang/Boolean;)V", (68, 1));
//     methods.insert("java/lang/Bool#getTypeAsString:()Ljava/lang/String;", (68, 2));
//     methods.insert("java/lang/Bool#getValue:()Ljava/lang/Boolean;", (68, 3));
//     methods.insert("java/lang/Bool#equals:(Ljava/lang/Object;)Z", (68, 4));
//     methods.insert("java/lang/Bool#hashCode:()I", (68, 5));
//     methods.insert("java/lang/Bool#booleanValue:()Z", (68, 6));
//     methods.insert("java/lang/Bool#toString:()Ljava/lang/String;", (68, 7));
//     methods.insert("java/lang/Bool#getValue:()Ljava/lang/Object;", (68, 8));
//     methods.insert("java/lang/Bool#<clinit>:()V", (68, 9));
//     methods.insert("java/lang/Boolean#<init>:(Z)V", (69, 0));
//     methods.insert("java/lang/Boolean#<init>:(Ljava/lang/String;)V", (69, 1));
//     methods.insert("java/lang/Boolean#valueOf:(Z)Ljava/lang/Boolean;", (69, 2));
//     methods.insert("java/lang/Boolean#valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;", (69, 3));
//     methods.insert("java/lang/Boolean#compareTo:(Ljava/lang/Boolean;)I", (69, 4));
//     methods.insert("java/lang/Boolean#equals:(Ljava/lang/Object;)Z", (69, 5));
//     methods.insert("java/lang/Boolean#hashCode:()I", (69, 6));
//     methods.insert("java/lang/Boolean#toString:()Ljava/lang/String;", (69, 7));
//     methods.insert("java/lang/Boolean#toString:(Z)Ljava/lang/String;", (69, 8));
//     methods.insert("java/lang/Boolean#booleanValue:()Z", (69, 9));
//     methods.insert("java/lang/Boolean#getBoolean:(Ljava/lang/String;)Z", (69, 10));
//     methods.insert("java/lang/Boolean#parseBoolean:(Ljava/lang/String;)Z", (69, 11));
//     methods.insert("java/lang/Boolean#compareTo:(Ljava/lang/Object;)I", (69, 12));
//     methods.insert("java/lang/Boolean#<clinit>:()V", (69, 13));
//     methods.insert("java/lang/Byte#<init>:(B)V", (70, 0));
//     methods.insert("java/lang/Byte#valueOf:(B)Ljava/lang/Byte;", (70, 1));
//     methods.insert("java/lang/Byte#equals:(Ljava/lang/Object;)Z", (70, 2));
//     methods.insert("java/lang/Byte#hashCode:()I", (70, 3));
//     methods.insert("java/lang/Byte#toString:()Ljava/lang/String;", (70, 4));
//     methods.insert("java/lang/Byte#compareTo:(Ljava/lang/Byte;)I", (70, 5));
//     methods.insert("java/lang/Byte#toString:(BI)Ljava/lang/String;", (70, 6));
//     methods.insert("java/lang/Byte#toString:(B)Ljava/lang/String;", (70, 7));
//     methods.insert("java/lang/Byte#parseByte:(Ljava/lang/String;)B", (70, 8));
//     methods.insert("java/lang/Byte#byteValue:()B", (70, 9));
//     methods.insert("java/lang/Byte#shortValue:()S", (70, 10));
//     methods.insert("java/lang/Byte#intValue:()I", (70, 11));
//     methods.insert("java/lang/Byte#longValue:()J", (70, 12));
//     methods.insert("java/lang/Byte#floatValue:()F", (70, 13));
//     methods.insert("java/lang/Byte#doubleValue:()D", (70, 14));
//     methods.insert("java/lang/Byte#compareTo:(Ljava/lang/Object;)I", (70, 15));
//     methods.insert("java/lang/Byte#<clinit>:()V", (70, 16));
//     methods.insert("java/lang/Bytes#<init>:(I[B)V", (71, 0));
//     methods.insert("java/lang/Bytes#isValid:(I)Z", (71, 1));
//     methods.insert("java/lang/Bytes1#<init>:([B)V", (72, 0));
//     methods.insert("java/lang/Bytes1#<clinit>:()V", (72, 1));
//     methods.insert("java/lang/Bytes10#<init>:([B)V", (73, 0));
//     methods.insert("java/lang/Bytes10#<clinit>:()V", (73, 1));
//     methods.insert("java/lang/Bytes11#<init>:([B)V", (74, 0));
//     methods.insert("java/lang/Bytes11#<clinit>:()V", (74, 1));
//     methods.insert("java/lang/Bytes12#<init>:([B)V", (75, 0));
//     methods.insert("java/lang/Bytes12#<clinit>:()V", (75, 1));
//     methods.insert("java/lang/Bytes13#<init>:([B)V", (76, 0));
//     methods.insert("java/lang/Bytes13#<clinit>:()V", (76, 1));
//     methods.insert("java/lang/Bytes14#<init>:([B)V", (77, 0));
//     methods.insert("java/lang/Bytes14#<clinit>:()V", (77, 1));
//     methods.insert("java/lang/Bytes15#<init>:([B)V", (78, 0));
//     methods.insert("java/lang/Bytes15#<clinit>:()V", (78, 1));
//     methods.insert("java/lang/Bytes16#<init>:([B)V", (79, 0));
//     methods.insert("java/lang/Bytes16#<clinit>:()V", (79, 1));
//     methods.insert("java/lang/Bytes17#<init>:([B)V", (80, 0));
//     methods.insert("java/lang/Bytes17#<clinit>:()V", (80, 1));
//     methods.insert("java/lang/Bytes18#<init>:([B)V", (81, 0));
//     methods.insert("java/lang/Bytes18#<clinit>:()V", (81, 1));
//     methods.insert("java/lang/Bytes19#<init>:([B)V", (82, 0));
//     methods.insert("java/lang/Bytes19#<clinit>:()V", (82, 1));
//     methods.insert("java/lang/Bytes2#<init>:([B)V", (83, 0));
//     methods.insert("java/lang/Bytes2#<clinit>:()V", (83, 1));
//     methods.insert("java/lang/Bytes20#<init>:([B)V", (84, 0));
//     methods.insert("java/lang/Bytes20#<clinit>:()V", (84, 1));
//     methods.insert("java/lang/Bytes21#<init>:([B)V", (85, 0));
//     methods.insert("java/lang/Bytes21#<clinit>:()V", (85, 1));
//     methods.insert("java/lang/Bytes22#<init>:([B)V", (86, 0));
//     methods.insert("java/lang/Bytes22#<clinit>:()V", (86, 1));
//     methods.insert("java/lang/Bytes23#<init>:([B)V", (87, 0));
//     methods.insert("java/lang/Bytes23#<clinit>:()V", (87, 1));
//     methods.insert("java/lang/Bytes24#<init>:([B)V", (88, 0));
//     methods.insert("java/lang/Bytes24#<clinit>:()V", (88, 1));
//     methods.insert("java/lang/Bytes25#<init>:([B)V", (89, 0));
//     methods.insert("java/lang/Bytes25#<clinit>:()V", (89, 1));
//     methods.insert("java/lang/Bytes26#<init>:([B)V", (90, 0));
//     methods.insert("java/lang/Bytes26#<clinit>:()V", (90, 1));
//     methods.insert("java/lang/Bytes27#<init>:([B)V", (91, 0));
//     methods.insert("java/lang/Bytes27#<clinit>:()V", (91, 1));
//     methods.insert("java/lang/Bytes28#<init>:([B)V", (92, 0));
//     methods.insert("java/lang/Bytes28#<clinit>:()V", (92, 1));
//     methods.insert("java/lang/Bytes29#<init>:([B)V", (93, 0));
//     methods.insert("java/lang/Bytes29#<clinit>:()V", (93, 1));
//     methods.insert("java/lang/Bytes3#<init>:([B)V", (94, 0));
//     methods.insert("java/lang/Bytes3#<clinit>:()V", (94, 1));
//     methods.insert("java/lang/Bytes30#<init>:([B)V", (95, 0));
//     methods.insert("java/lang/Bytes30#<clinit>:()V", (95, 1));
//     methods.insert("java/lang/Bytes31#<init>:([B)V", (96, 0));
//     methods.insert("java/lang/Bytes31#<clinit>:()V", (96, 1));
//     methods.insert("java/lang/Bytes32#<init>:([B)V", (97, 0));
//     methods.insert("java/lang/Bytes32#<clinit>:()V", (97, 1));
//     methods.insert("java/lang/Bytes4#<init>:([B)V", (98, 0));
//     methods.insert("java/lang/Bytes4#<clinit>:()V", (98, 1));
//     methods.insert("java/lang/Bytes5#<init>:([B)V", (99, 0));
//     methods.insert("java/lang/Bytes5#<clinit>:()V", (99, 1));
//     methods.insert("java/lang/Bytes6#<init>:([B)V", (100, 0));
//     methods.insert("java/lang/Bytes6#<clinit>:()V", (100, 1));
//     methods.insert("java/lang/Bytes7#<init>:([B)V", (101, 0));
//     methods.insert("java/lang/Bytes7#<clinit>:()V", (101, 1));
//     methods.insert("java/lang/Bytes8#<init>:([B)V", (102, 0));
//     methods.insert("java/lang/Bytes8#<clinit>:()V", (102, 1));
//     methods.insert("java/lang/Bytes9#<init>:([B)V", (103, 0));
//     methods.insert("java/lang/Bytes9#<clinit>:()V", (103, 1));
//     methods.insert("java/lang/BytesType#<init>:([BLjava/lang/String;)V", (104, 0));
//     methods.insert("java/lang/BytesType#bytes32PaddedLength:()I", (104, 1));
//     methods.insert("java/lang/BytesType#getValue:()[B", (104, 2));
//     methods.insert("java/lang/BytesType#getTypeAsString:()Ljava/lang/String;", (104, 3));
//     methods.insert("java/lang/BytesType#equals:(Ljava/lang/Object;)Z", (104, 4));
//     methods.insert("java/lang/BytesType#hashCode:()I", (104, 5));
//     methods.insert("java/lang/BytesType#getValue:()Ljava/lang/Object;", (104, 6));
//     methods.insert("java/lang/Callable#call:()Ljava/lang/Object;", (105, 0));
//     methods.insert("java/lang/CharSequence#charAt:(I)C", (106, 0));
//     methods.insert("java/lang/CharSequence#length:()I", (106, 1));
//     methods.insert("java/lang/CharSequence#subSequence:(II)Ljava/lang/CharSequence;", (106, 2));
//     methods.insert("java/lang/CharSequence#toString:()Ljava/lang/String;", (106, 3));
//     methods.insert("java/lang/Character#<init>:(C)V", (107, 0));
//     methods.insert("java/lang/Character#valueOf:(C)Ljava/lang/Character;", (107, 1));
//     methods.insert("java/lang/Character#compareTo:(Ljava/lang/Character;)I", (107, 2));
//     methods.insert("java/lang/Character#equals:(Ljava/lang/Object;)Z", (107, 3));
//     methods.insert("java/lang/Character#hashCode:()I", (107, 4));
//     methods.insert("java/lang/Character#toString:()Ljava/lang/String;", (107, 5));
//     methods.insert("java/lang/Character#toString:(C)Ljava/lang/String;", (107, 6));
//     methods.insert("java/lang/Character#charValue:()C", (107, 7));
//     methods.insert("java/lang/Character#toLowerCase:(C)C", (107, 8));
//     methods.insert("java/lang/Character#toLowerCase:(I)I", (107, 9));
//     methods.insert("java/lang/Character#toUpperCase:(C)C", (107, 10));
//     methods.insert("java/lang/Character#toUpperCase:(I)I", (107, 11));
//     methods.insert("java/lang/Character#isDigit:(C)Z", (107, 12));
//     methods.insert("java/lang/Character#isDigit:(I)Z", (107, 13));
//     methods.insert("java/lang/Character#digit:(CI)I", (107, 14));
//     methods.insert("java/lang/Character#forDigit:(II)C", (107, 15));
//     methods.insert("java/lang/Character#isLetter:(I)Z", (107, 16));
//     methods.insert("java/lang/Character#isLetter:(C)Z", (107, 17));
//     methods.insert("java/lang/Character#isLetterOrDigit:(C)Z", (107, 18));
//     methods.insert("java/lang/Character#isLetterOrDigit:(I)Z", (107, 19));
//     methods.insert("java/lang/Character#isLowerCase:(I)Z", (107, 20));
//     methods.insert("java/lang/Character#isLowerCase:(C)Z", (107, 21));
//     methods.insert("java/lang/Character#isUpperCase:(C)Z", (107, 22));
//     methods.insert("java/lang/Character#isUpperCase:(I)Z", (107, 23));
//     methods.insert("java/lang/Character#isWhitespace:(I)Z", (107, 24));
//     methods.insert("java/lang/Character#isWhitespace:(C)Z", (107, 25));
//     methods.insert("java/lang/Character#isSpaceChar:(C)Z", (107, 26));
//     methods.insert("java/lang/Character#isHighSurrogate:(C)Z", (107, 27));
//     methods.insert("java/lang/Character#isLowSurrogate:(C)Z", (107, 28));
//     methods.insert("java/lang/Character#isISOControl:(C)Z", (107, 29));
//     methods.insert("java/lang/Character#isJavaIdentifierStart:(C)Z", (107, 30));
//     methods.insert("java/lang/Character#isJavaIdentifierStart:(I)Z", (107, 31));
//     methods.insert("java/lang/Character#isJavaIdentifierPart:(C)Z", (107, 32));
//     methods.insert("java/lang/Character#isJavaIdentifierPart:(I)Z", (107, 33));
//     methods.insert("java/lang/Character#toCodePoint:(CC)I", (107, 34));
//     methods.insert("java/lang/Character#isSupplementaryCodePoint:(I)Z", (107, 35));
//     methods.insert("java/lang/Character#canCastToChar:(I)Z", (107, 36));
//     methods.insert("java/lang/Character#toChars:(I)[C", (107, 37));
//     methods.insert("java/lang/Character#isSurrogatePair:(CC)Z", (107, 38));
//     methods.insert("java/lang/Character#codePointAt:(Ljava/lang/CharSequence;I)I", (107, 39));
//     methods.insert("java/lang/Character#codePointCount:(Ljava/lang/CharSequence;II)I", (107, 40));
//     methods.insert("java/lang/Character#compareTo:(Ljava/lang/Object;)I", (107, 41));
//     methods.insert("java/lang/Character#<clinit>:()V", (107, 42));
//     methods.insert("java/lang/Class#<init>:(Ljava/base/VMClass;)V", (108, 0));
//     methods.insert("java/lang/Class#toString:()Ljava/lang/String;", (108, 1));
//     methods.insert("java/lang/Class#replace:(II[BII)[B", (108, 2));
//     methods.insert("java/lang/Class#getName:()Ljava/lang/String;", (108, 3));
//     methods.insert("java/lang/Class#getName:(Ljava/base/VMClass;)Ljava/lang/String;", (108, 4));
//     methods.insert("java/lang/Class#getCanonicalName:()Ljava/lang/String;", (108, 5));
//     methods.insert("java/lang/Class#getSimpleName:()Ljava/lang/String;", (108, 6));
//     methods.insert("java/lang/Class#newInstance:()Ljava/lang/Object;", (108, 7));
//     methods.insert("java/lang/Class#forName:(Ljava/lang/String;)Ljava/lang/Class;", (108, 8));
//     methods.insert("java/lang/Class#forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", (108, 9));
//     methods.insert("java/lang/Class#getComponentType:()Ljava/lang/Class;", (108, 10));
//     methods.insert("java/lang/Class#isAssignableFrom:(Ljava/lang/Class;)Z", (108, 11));
//     methods.insert("java/lang/Class#getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;", (108, 12));
//     methods.insert("java/lang/Class#getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;", (108, 13));
//     methods.insert("java/lang/Class#getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", (108, 14));
//     methods.insert("java/lang/Class#getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", (108, 15));
//     methods.insert("java/lang/Class#getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", (108, 16));
//     methods.insert("java/lang/Class#getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", (108, 17));
//     methods.insert("java/lang/Class#countConstructors:(Z)I", (108, 18));
//     methods.insert("java/lang/Class#getDeclaredConstructors:()[Ljava/lang/reflect/Constructor;", (108, 19));
//     methods.insert("java/lang/Class#getConstructors:()[Ljava/lang/reflect/Constructor;", (108, 20));
//     methods.insert("java/lang/Class#getDeclaredFields:()[Ljava/lang/reflect/Field;", (108, 21));
//     methods.insert("java/lang/Class#countPublicFields:()I", (108, 22));
//     methods.insert("java/lang/Class#getFields:()[Ljava/lang/reflect/Field;", (108, 23));
//     methods.insert("java/lang/Class#getAllFields:(Ljava/base/VMClass;Ljava/util/ArrayList;)V", (108, 24));
//     methods.insert("java/lang/Class#getAllFields:()[Ljava/lang/reflect/Field;", (108, 25));
//     methods.insert("java/lang/Class#getDeclaredMethods:()[Ljava/lang/reflect/Method;", (108, 26));
//     methods.insert("java/lang/Class#getMethods:()[Ljava/lang/reflect/Method;", (108, 27));
//     methods.insert("java/lang/Class#getInterfaces:()[Ljava/lang/Class;", (108, 28));
//     methods.insert("java/lang/Class#getEnclosingClass:()Ljava/lang/Class;", (108, 29));
//     methods.insert("java/lang/Class#getEnclosingMethod:()Ljava/lang/reflect/Method;", (108, 30));
//     methods.insert("java/lang/Class#getEnclosingConstructor:()Ljava/lang/reflect/Constructor;", (108, 31));
//     methods.insert("java/lang/Class#getEnumConstants:()[Ljava/lang/Object;", (108, 32));
//     methods.insert("java/lang/Class#getDeclaredClasses:()[Ljava/lang/Class;", (108, 33));
//     methods.insert("java/lang/Class#getDeclaringClass:()Ljava/lang/Class;", (108, 34));
//     methods.insert("java/lang/Class#getClassLoader:()Ljava/lang/ClassLoader;", (108, 35));
//     methods.insert("java/lang/Class#getModifiers:()I", (108, 36));
//     methods.insert("java/lang/Class#isInterface:()Z", (108, 37));
//     methods.insert("java/lang/Class#isAnnotation:()Z", (108, 38));
//     methods.insert("java/lang/Class#getSuperclass:()Ljava/lang/Class;", (108, 39));
//     methods.insert("java/lang/Class#getClassType:()Ljava/lang/ClassType;", (108, 40));
//     methods.insert("java/lang/Class#isAnonymousClass:()Z", (108, 41));
//     methods.insert("java/lang/Class#isLocalClass:()Z", (108, 42));
//     methods.insert("java/lang/Class#isMemberClass:()Z", (108, 43));
//     methods.insert("java/lang/Class#isArray:()Z", (108, 44));
//     methods.insert("java/lang/Class#isInstance:(Ljava/base/VMClass;Ljava/lang/Object;)Z", (108, 45));
//     methods.insert("java/lang/Class#isInstance:(Ljava/lang/Object;)Z", (108, 46));
//     methods.insert("java/lang/Class#isPrimitive:()Z", (108, 47));
//     methods.insert("java/lang/Class#isEnum:()Z", (108, 48));
//     methods.insert("java/lang/Class#getResource:(Ljava/lang/String;)Ljava/lang/Object;", (108, 49));
//     methods.insert("java/lang/Class#getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;", (108, 50));
//     methods.insert("java/lang/Class#desiredAssertionStatus:()Z", (108, 51));
//     methods.insert("java/lang/Class#asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;", (108, 52));
//     methods.insert("java/lang/Class#cast:(Ljava/lang/Object;)Ljava/lang/Object;", (108, 53));
//     methods.insert("java/lang/Class#getPackage:()Ljava/lang/Package;", (108, 54));
//     methods.insert("java/lang/Class#isAnnotationPresent:(Ljava/lang/Class;)Z", (108, 55));
//     methods.insert("java/lang/Class#getAnnotation:(Ljava/base/VMClass;[Ljava/lang/Object;)Ljava/lang/annotation/Annotation;", (108, 56));
//     methods.insert("java/lang/Class#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", (108, 57));
//     methods.insert("java/lang/Class#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;", (108, 58));
//     methods.insert("java/lang/Class#countAnnotations:()I", (108, 59));
//     methods.insert("java/lang/Class#getAnnotations:()[Ljava/lang/annotation/Annotation;", (108, 60));
//     methods.insert("java/lang/Class#getTypeParameters:()[Ljava/lang/reflect/TypeVariable;", (108, 61));
//     methods.insert("java/lang/Class#getGenericTypeSignatures:()[Ljava/lang/String;", (108, 62));
//     methods.insert("java/lang/Class#getGenericInterfaces:()[Ljava/lang/reflect/Type;", (108, 63));
//     methods.insert("java/lang/Class#getGenericSuperclass:()Ljava/lang/reflect/Type;", (108, 64));
//     methods.insert("java/lang/ClassCastException#<init>:(Ljava/lang/String;)V", (109, 0));
//     methods.insert("java/lang/ClassCastException#<init>:()V", (109, 1));
//     methods.insert("java/lang/ClassLoader#<init>:(Ljava/lang/ClassLoader;)V", (110, 0));
//     methods.insert("java/lang/ClassLoader#<init>:()V", (110, 1));
//     methods.insert("java/lang/ClassLoader#packages:()Ljava/util/Map;", (110, 2));
//     methods.insert("java/lang/ClassLoader#getPackage:(Ljava/lang/String;)Ljava/lang/Package;", (110, 3));
//     methods.insert("java/lang/ClassLoader#getPackages:()[Ljava/lang/Package;", (110, 4));
//     methods.insert("java/lang/ClassLoader#definePackage:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Package;", (110, 5));
//     methods.insert("java/lang/ClassLoader#getSystemClassLoader:()Ljava/lang/ClassLoader;", (110, 6));
//     methods.insert("java/lang/ClassLoader#defineClass:(Ljava/lang/String;[BII)Ljava/lang/Class;", (110, 7));
//     methods.insert("java/lang/ClassLoader#findClass:(Ljava/lang/String;)Ljava/lang/Class;", (110, 8));
//     methods.insert("java/lang/ClassLoader#reallyFindLoadedClass:(Ljava/lang/String;)Ljava/lang/Class;", (110, 9));
//     methods.insert("java/lang/ClassLoader#findLoadedClass:(Ljava/lang/String;)Ljava/lang/Class;", (110, 10));
//     methods.insert("java/lang/ClassLoader#loadClass:(Ljava/lang/String;)Ljava/lang/Class;", (110, 11));
//     methods.insert("java/lang/ClassLoader#loadClass:(Ljava/lang/String;Z)Ljava/lang/Class;", (110, 12));
//     methods.insert("java/lang/ClassLoader#resolveClass:(Ljava/lang/Class;)V", (110, 13));
//     methods.insert("java/lang/ClassLoader#getParent:()Ljava/lang/ClassLoader;", (110, 14));
//     methods.insert("java/lang/ClassLoader#findResource:(Ljava/lang/String;)Ljava/lang/Object;", (110, 15));
//     methods.insert("java/lang/ClassLoader#findResources:(Ljava/lang/String;)Ljava/util/Enumeration;", (110, 16));
//     methods.insert("java/lang/ClassLoader#getResource:(Ljava/lang/String;)Ljava/lang/Object;", (110, 17));
//     methods.insert("java/lang/ClassLoader#getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;", (110, 18));
//     methods.insert("java/lang/ClassLoader#getSystemResource:(Ljava/lang/String;)Ljava/lang/Object;", (110, 19));
//     methods.insert("java/lang/ClassLoader#getSystemResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;", (110, 20));
//     methods.insert("java/lang/ClassLoader#getSystemResources:(Ljava/lang/String;)Ljava/util/Enumeration;", (110, 21));
//     methods.insert("java/lang/ClassLoader#getResources:(Ljava/lang/String;)Ljava/util/Enumeration;", (110, 22));
//     methods.insert("java/lang/ClassLoader#collectResources:(Ljava/lang/String;)Ljava/util/Collection;", (110, 23));
//     methods.insert("java/lang/ClassLoader#findLibrary:(Ljava/lang/String;)Ljava/lang/String;", (110, 24));
//     methods.insert("java/lang/ClassLoader#getCaller:()Ljava/lang/Class;", (110, 25));
//     methods.insert("java/lang/ClassLoader#load:(Ljava/lang/String;Ljava/lang/Class;Z)V", (110, 26));
//     methods.insert("java/lang/ClassNotFoundException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (111, 0));
//     methods.insert("java/lang/ClassNotFoundException#<init>:(Ljava/lang/String;)V", (111, 1));
//     methods.insert("java/lang/ClassNotFoundException#<init>:()V", (111, 2));
//     methods.insert("java/lang/ClassNotFoundException#getException:()Ljava/lang/Throwable;", (111, 3));
//     methods.insert("java/lang/ClassType#values:()[Ljava/lang/ClassType;", (112, 0));
//     methods.insert("java/lang/ClassType#valueOf:(Ljava/lang/String;)Ljava/lang/ClassType;", (112, 1));
//     methods.insert("java/lang/ClassType#<init>:(Ljava/lang/String;I)V", (112, 2));
//     methods.insert("java/lang/ClassType#<clinit>:()V", (112, 3));
//     methods.insert("java/lang/CloneNotSupportedException#<init>:(Ljava/lang/String;)V", (113, 0));
//     methods.insert("java/lang/CloneNotSupportedException#<init>:()V", (113, 1));
//     methods.insert("java/lang/Comparable#compareTo:(Ljava/lang/Object;)I", (115, 0));
//     methods.insert("java/lang/Context#<init>:()V", (116, 0));
//     methods.insert("java/lang/Context#_msgSender:()Ljava/lang/Address;", (116, 1));
//     methods.insert("java/lang/Context#revert:(Ljava/lang/RuntimeException;)V", (116, 2));
//     methods.insert("java/lang/Context#emit:(Ljava/lang/EventLog;)V", (116, 3));
//     methods.insert("java/lang/Enum#<init>:(Ljava/lang/String;I)V", (118, 0));
//     methods.insert("java/lang/Enum#compareTo:(Ljava/lang/Enum;)I", (118, 1));
//     methods.insert("java/lang/Enum#valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", (118, 2));
//     methods.insert("java/lang/Enum#ordinal:()I", (118, 3));
//     methods.insert("java/lang/Enum#name:()Ljava/lang/String;", (118, 4));
//     methods.insert("java/lang/Enum#toString:()Ljava/lang/String;", (118, 5));
//     methods.insert("java/lang/Enum#getDeclaringClass:()Ljava/lang/Class;", (118, 6));
//     methods.insert("java/lang/Enum#compareTo:(Ljava/lang/Object;)I", (118, 7));
//     methods.insert("java/lang/Error#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (119, 0));
//     methods.insert("java/lang/Error#<init>:(Ljava/lang/String;)V", (119, 1));
//     methods.insert("java/lang/Error#<init>:(Ljava/lang/Throwable;)V", (119, 2));
//     methods.insert("java/lang/Error#<init>:()V", (119, 3));
//     methods.insert("java/lang/EventLog#<init>:(Ljava/lang/String;)V", (120, 0));
//     methods.insert("java/lang/EventLog#getMessage:()Ljava/lang/String;", (120, 1));
//     methods.insert("java/lang/Exception#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (121, 0));
//     methods.insert("java/lang/Exception#<init>:(Ljava/lang/String;)V", (121, 1));
//     methods.insert("java/lang/Exception#<init>:(Ljava/lang/Throwable;)V", (121, 2));
//     methods.insert("java/lang/Exception#<init>:()V", (121, 3));
//     methods.insert("java/lang/ExceptionInInitializerError#<init>:(Ljava/lang/String;)V", (122, 0));
//     methods.insert("java/lang/ExceptionInInitializerError#<init>:()V", (122, 1));
//     methods.insert("java/lang/IllegalAccessError#<init>:(Ljava/lang/String;)V", (123, 0));
//     methods.insert("java/lang/IllegalAccessError#<init>:()V", (123, 1));
//     methods.insert("java/lang/IllegalAccessException#<init>:(Ljava/lang/String;)V", (124, 0));
//     methods.insert("java/lang/IllegalAccessException#<init>:()V", (124, 1));
//     methods.insert("java/lang/IllegalArgumentException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (125, 0));
//     methods.insert("java/lang/IllegalArgumentException#<init>:(Ljava/lang/String;)V", (125, 1));
//     methods.insert("java/lang/IllegalArgumentException#<init>:(Ljava/lang/Throwable;)V", (125, 2));
//     methods.insert("java/lang/IllegalArgumentException#<init>:()V", (125, 3));
//     methods.insert("java/lang/IllegalMonitorStateException#<init>:(Ljava/lang/String;)V", (126, 0));
//     methods.insert("java/lang/IllegalMonitorStateException#<init>:()V", (126, 1));
//     methods.insert("java/lang/IllegalStateException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (127, 0));
//     methods.insert("java/lang/IllegalStateException#<init>:(Ljava/lang/String;)V", (127, 1));
//     methods.insert("java/lang/IllegalStateException#<init>:(Ljava/lang/Throwable;)V", (127, 2));
//     methods.insert("java/lang/IllegalStateException#<init>:()V", (127, 3));
//     methods.insert("java/lang/IncompatibleClassChangeError#<init>:(Ljava/lang/String;)V", (128, 0));
//     methods.insert("java/lang/IncompatibleClassChangeError#<init>:()V", (128, 1));
//     methods.insert("java/lang/IndexOutOfBoundsException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (129, 0));
//     methods.insert("java/lang/IndexOutOfBoundsException#<init>:(Ljava/lang/String;)V", (129, 1));
//     methods.insert("java/lang/IndexOutOfBoundsException#<init>:(Ljava/lang/Throwable;)V", (129, 2));
//     methods.insert("java/lang/IndexOutOfBoundsException#<init>:()V", (129, 3));
//     methods.insert("java/lang/InstantiationError#<init>:(Ljava/lang/String;)V", (130, 0));
//     methods.insert("java/lang/InstantiationError#<init>:()V", (130, 1));
//     methods.insert("java/lang/InstantiationException#<init>:(Ljava/lang/String;)V", (131, 0));
//     methods.insert("java/lang/InstantiationException#<init>:()V", (131, 1));
//     methods.insert("java/lang/Int#<init>:(Ljava/math/BigInteger;)V", (132, 0));
//     methods.insert("java/lang/Int#<init>:(ILjava/math/BigInteger;)V", (132, 1));
//     methods.insert("java/lang/Int#<clinit>:()V", (132, 2));
//     methods.insert("java/lang/Int104#<init>:(Ljava/math/BigInteger;)V", (133, 0));
//     methods.insert("java/lang/Int104#<init>:(J)V", (133, 1));
//     methods.insert("java/lang/Int104#<clinit>:()V", (133, 2));
//     methods.insert("java/lang/Int112#<init>:(Ljava/math/BigInteger;)V", (134, 0));
//     methods.insert("java/lang/Int112#<init>:(J)V", (134, 1));
//     methods.insert("java/lang/Int112#<clinit>:()V", (134, 2));
//     methods.insert("java/lang/Int120#<init>:(Ljava/math/BigInteger;)V", (135, 0));
//     methods.insert("java/lang/Int120#<init>:(J)V", (135, 1));
//     methods.insert("java/lang/Int120#<clinit>:()V", (135, 2));
//     methods.insert("java/lang/Int128#<init>:(Ljava/math/BigInteger;)V", (136, 0));
//     methods.insert("java/lang/Int128#<init>:(J)V", (136, 1));
//     methods.insert("java/lang/Int128#<clinit>:()V", (136, 2));
//     methods.insert("java/lang/Int136#<init>:(Ljava/math/BigInteger;)V", (137, 0));
//     methods.insert("java/lang/Int136#<init>:(J)V", (137, 1));
//     methods.insert("java/lang/Int136#<clinit>:()V", (137, 2));
//     methods.insert("java/lang/Int144#<init>:(Ljava/math/BigInteger;)V", (138, 0));
//     methods.insert("java/lang/Int144#<init>:(J)V", (138, 1));
//     methods.insert("java/lang/Int144#<clinit>:()V", (138, 2));
//     methods.insert("java/lang/Int152#<init>:(Ljava/math/BigInteger;)V", (139, 0));
//     methods.insert("java/lang/Int152#<init>:(J)V", (139, 1));
//     methods.insert("java/lang/Int152#<clinit>:()V", (139, 2));
//     methods.insert("java/lang/Int16#<init>:(Ljava/math/BigInteger;)V", (140, 0));
//     methods.insert("java/lang/Int16#<init>:(J)V", (140, 1));
//     methods.insert("java/lang/Int16#<clinit>:()V", (140, 2));
//     methods.insert("java/lang/Int160#<init>:(Ljava/math/BigInteger;)V", (141, 0));
//     methods.insert("java/lang/Int160#<init>:(J)V", (141, 1));
//     methods.insert("java/lang/Int160#<clinit>:()V", (141, 2));
//     methods.insert("java/lang/Int168#<init>:(Ljava/math/BigInteger;)V", (142, 0));
//     methods.insert("java/lang/Int168#<init>:(J)V", (142, 1));
//     methods.insert("java/lang/Int168#<clinit>:()V", (142, 2));
//     methods.insert("java/lang/Int176#<init>:(Ljava/math/BigInteger;)V", (143, 0));
//     methods.insert("java/lang/Int176#<init>:(J)V", (143, 1));
//     methods.insert("java/lang/Int176#<clinit>:()V", (143, 2));
//     methods.insert("java/lang/Int184#<init>:(Ljava/math/BigInteger;)V", (144, 0));
//     methods.insert("java/lang/Int184#<init>:(J)V", (144, 1));
//     methods.insert("java/lang/Int184#<clinit>:()V", (144, 2));
//     methods.insert("java/lang/Int192#<init>:(Ljava/math/BigInteger;)V", (145, 0));
//     methods.insert("java/lang/Int192#<init>:(J)V", (145, 1));
//     methods.insert("java/lang/Int192#<clinit>:()V", (145, 2));
//     methods.insert("java/lang/Int200#<init>:(Ljava/math/BigInteger;)V", (146, 0));
//     methods.insert("java/lang/Int200#<init>:(J)V", (146, 1));
//     methods.insert("java/lang/Int200#<clinit>:()V", (146, 2));
//     methods.insert("java/lang/Int208#<init>:(Ljava/math/BigInteger;)V", (147, 0));
//     methods.insert("java/lang/Int208#<init>:(J)V", (147, 1));
//     methods.insert("java/lang/Int208#<clinit>:()V", (147, 2));
//     methods.insert("java/lang/Int216#<init>:(Ljava/math/BigInteger;)V", (148, 0));
//     methods.insert("java/lang/Int216#<init>:(J)V", (148, 1));
//     methods.insert("java/lang/Int216#<clinit>:()V", (148, 2));
//     methods.insert("java/lang/Int224#<init>:(Ljava/math/BigInteger;)V", (149, 0));
//     methods.insert("java/lang/Int224#<init>:(J)V", (149, 1));
//     methods.insert("java/lang/Int224#<clinit>:()V", (149, 2));
//     methods.insert("java/lang/Int232#<init>:(Ljava/math/BigInteger;)V", (150, 0));
//     methods.insert("java/lang/Int232#<init>:(J)V", (150, 1));
//     methods.insert("java/lang/Int232#<clinit>:()V", (150, 2));
//     methods.insert("java/lang/Int24#<init>:(Ljava/math/BigInteger;)V", (151, 0));
//     methods.insert("java/lang/Int24#<init>:(J)V", (151, 1));
//     methods.insert("java/lang/Int24#<clinit>:()V", (151, 2));
//     methods.insert("java/lang/Int240#<init>:(Ljava/math/BigInteger;)V", (152, 0));
//     methods.insert("java/lang/Int240#<init>:(J)V", (152, 1));
//     methods.insert("java/lang/Int240#<clinit>:()V", (152, 2));
//     methods.insert("java/lang/Int248#<init>:(Ljava/math/BigInteger;)V", (153, 0));
//     methods.insert("java/lang/Int248#<init>:(J)V", (153, 1));
//     methods.insert("java/lang/Int248#<clinit>:()V", (153, 2));
//     methods.insert("java/lang/Int256#<init>:(Ljava/math/BigInteger;)V", (154, 0));
//     methods.insert("java/lang/Int256#<init>:(J)V", (154, 1));
//     methods.insert("java/lang/Int256#<clinit>:()V", (154, 2));
//     methods.insert("java/lang/Int32#<init>:(Ljava/math/BigInteger;)V", (155, 0));
//     methods.insert("java/lang/Int32#<init>:(J)V", (155, 1));
//     methods.insert("java/lang/Int32#<clinit>:()V", (155, 2));
//     methods.insert("java/lang/Int40#<init>:(Ljava/math/BigInteger;)V", (156, 0));
//     methods.insert("java/lang/Int40#<init>:(J)V", (156, 1));
//     methods.insert("java/lang/Int40#<clinit>:()V", (156, 2));
//     methods.insert("java/lang/Int48#<init>:(Ljava/math/BigInteger;)V", (157, 0));
//     methods.insert("java/lang/Int48#<init>:(J)V", (157, 1));
//     methods.insert("java/lang/Int48#<clinit>:()V", (157, 2));
//     methods.insert("java/lang/Int56#<init>:(Ljava/math/BigInteger;)V", (158, 0));
//     methods.insert("java/lang/Int56#<init>:(J)V", (158, 1));
//     methods.insert("java/lang/Int56#<clinit>:()V", (158, 2));
//     methods.insert("java/lang/Int64#<init>:(Ljava/math/BigInteger;)V", (159, 0));
//     methods.insert("java/lang/Int64#<init>:(J)V", (159, 1));
//     methods.insert("java/lang/Int64#<clinit>:()V", (159, 2));
//     methods.insert("java/lang/Int72#<init>:(Ljava/math/BigInteger;)V", (160, 0));
//     methods.insert("java/lang/Int72#<init>:(J)V", (160, 1));
//     methods.insert("java/lang/Int72#<clinit>:()V", (160, 2));
//     methods.insert("java/lang/Int8#<init>:(Ljava/math/BigInteger;)V", (161, 0));
//     methods.insert("java/lang/Int8#<init>:(J)V", (161, 1));
//     methods.insert("java/lang/Int8#<clinit>:()V", (161, 2));
//     methods.insert("java/lang/Int80#<init>:(Ljava/math/BigInteger;)V", (162, 0));
//     methods.insert("java/lang/Int80#<init>:(J)V", (162, 1));
//     methods.insert("java/lang/Int80#<clinit>:()V", (162, 2));
//     methods.insert("java/lang/Int88#<init>:(Ljava/math/BigInteger;)V", (163, 0));
//     methods.insert("java/lang/Int88#<init>:(J)V", (163, 1));
//     methods.insert("java/lang/Int88#<clinit>:()V", (163, 2));
//     methods.insert("java/lang/Int96#<init>:(Ljava/math/BigInteger;)V", (164, 0));
//     methods.insert("java/lang/Int96#<init>:(J)V", (164, 1));
//     methods.insert("java/lang/Int96#<clinit>:()V", (164, 2));
//     methods.insert("java/lang/IntType#<init>:(Ljava/lang/String;ILjava/math/BigInteger;)V", (165, 0));
//     methods.insert("java/lang/IntType#getBitSize:()I", (165, 1));
//     methods.insert("java/lang/IntType#valid:()Z", (165, 2));
//     methods.insert("java/lang/IntType#isValidBitSize:(I)Z", (165, 3));
//     methods.insert("java/lang/IntType#isValidBitCount:(ILjava/math/BigInteger;)Z", (165, 4));
//     methods.insert("java/lang/Integer#<init>:(I)V", (166, 0));
//     methods.insert("java/lang/Integer#<init>:(Ljava/lang/String;)V", (166, 1));
//     methods.insert("java/lang/Integer#valueOf:(I)Ljava/lang/Integer;", (166, 2));
//     methods.insert("java/lang/Integer#valueOf:(Ljava/lang/String;)Ljava/lang/Integer;", (166, 3));
//     methods.insert("java/lang/Integer#equals:(Ljava/lang/Object;)Z", (166, 4));
//     methods.insert("java/lang/Integer#hashCode:()I", (166, 5));
//     methods.insert("java/lang/Integer#compareTo:(Ljava/lang/Integer;)I", (166, 6));
//     methods.insert("java/lang/Integer#toString:()Ljava/lang/String;", (166, 7));
//     methods.insert("java/lang/Integer#toString:(II)Ljava/lang/String;", (166, 8));
//     methods.insert("java/lang/Integer#toString:(I)Ljava/lang/String;", (166, 9));
//     methods.insert("java/lang/Integer#toHexString:(I)Ljava/lang/String;", (166, 10));
//     methods.insert("java/lang/Integer#toOctalString:(I)Ljava/lang/String;", (166, 11));
//     methods.insert("java/lang/Integer#toBinaryString:(I)Ljava/lang/String;", (166, 12));
//     methods.insert("java/lang/Integer#byteValue:()B", (166, 13));
//     methods.insert("java/lang/Integer#shortValue:()S", (166, 14));
//     methods.insert("java/lang/Integer#intValue:()I", (166, 15));
//     methods.insert("java/lang/Integer#longValue:()J", (166, 16));
//     methods.insert("java/lang/Integer#floatValue:()F", (166, 17));
//     methods.insert("java/lang/Integer#doubleValue:()D", (166, 18));
//     methods.insert("java/lang/Integer#signum:(I)I", (166, 19));
//     methods.insert("java/lang/Integer#bitCount:(I)I", (166, 20));
//     methods.insert("java/lang/Integer#reverseBytes:(I)I", (166, 21));
//     methods.insert("java/lang/Integer#parseInt:(Ljava/lang/String;)I", (166, 22));
//     methods.insert("java/lang/Integer#parseInt:(Ljava/lang/String;I)I", (166, 23));
//     methods.insert("java/lang/Integer#decode:(Ljava/lang/String;)Ljava/lang/Integer;", (166, 24));
//     methods.insert("java/lang/Integer#numberOfLeadingZeros:(I)I", (166, 25));
//     methods.insert("java/lang/Integer#numberOfTrailingZeros:(I)I", (166, 26));
//     methods.insert("java/lang/Integer#toUnsignedString:(II)Ljava/lang/String;", (166, 27));
//     methods.insert("java/lang/Integer#toUnsignedString:(I)Ljava/lang/String;", (166, 28));
//     methods.insert("java/lang/Integer#compareUnsigned:(II)I", (166, 29));
//     methods.insert("java/lang/Integer#compare:(II)I", (166, 30));
//     methods.insert("java/lang/Integer#compareTo:(Ljava/lang/Object;)I", (166, 31));
//     methods.insert("java/lang/Integer#<clinit>:()V", (166, 32));
//     methods.insert("java/lang/InternalError#<init>:(Ljava/lang/String;)V", (167, 0));
//     methods.insert("java/lang/InternalError#<init>:()V", (167, 1));
//     methods.insert("java/lang/InterruptedException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (168, 0));
//     methods.insert("java/lang/InterruptedException#<init>:(Ljava/lang/String;)V", (168, 1));
//     methods.insert("java/lang/InterruptedException#<init>:(Ljava/lang/Throwable;)V", (168, 2));
//     methods.insert("java/lang/InterruptedException#<init>:()V", (168, 3));
//     methods.insert("java/lang/Iterable#iterator:()Ljava/util/Iterator;", (169, 0));
//     methods.insert("java/lang/LinkageError#<init>:(Ljava/lang/String;)V", (170, 0));
//     methods.insert("java/lang/LinkageError#<init>:()V", (170, 1));
//     methods.insert("java/lang/Long#<init>:(J)V", (171, 0));
//     methods.insert("java/lang/Long#<init>:(Ljava/lang/String;)V", (171, 1));
//     methods.insert("java/lang/Long#valueOf:(Ljava/lang/String;)Ljava/lang/Long;", (171, 2));
//     methods.insert("java/lang/Long#valueOf:(J)Ljava/lang/Long;", (171, 3));
//     methods.insert("java/lang/Long#compareTo:(Ljava/lang/Long;)I", (171, 4));
//     methods.insert("java/lang/Long#equals:(Ljava/lang/Object;)Z", (171, 5));
//     methods.insert("java/lang/Long#hashCode:()I", (171, 6));
//     methods.insert("java/lang/Long#toString:()Ljava/lang/String;", (171, 7));
//     methods.insert("java/lang/Long#toString:(JI)Ljava/lang/String;", (171, 8));
//     methods.insert("java/lang/Long#toString:(J)Ljava/lang/String;", (171, 9));
//     methods.insert("java/lang/Long#toHexString:(J)Ljava/lang/String;", (171, 10));
//     methods.insert("java/lang/Long#toOctalString:(J)Ljava/lang/String;", (171, 11));
//     methods.insert("java/lang/Long#toBinaryString:(J)Ljava/lang/String;", (171, 12));
//     methods.insert("java/lang/Long#byteValue:()B", (171, 13));
//     methods.insert("java/lang/Long#shortValue:()S", (171, 14));
//     methods.insert("java/lang/Long#intValue:()I", (171, 15));
//     methods.insert("java/lang/Long#longValue:()J", (171, 16));
//     methods.insert("java/lang/Long#floatValue:()F", (171, 17));
//     methods.insert("java/lang/Long#doubleValue:()D", (171, 18));
//     methods.insert("java/lang/Long#signum:(J)I", (171, 19));
//     methods.insert("java/lang/Long#pow:(JJ)J", (171, 20));
//     methods.insert("java/lang/Long#parseLong:(Ljava/lang/String;)J", (171, 21));
//     methods.insert("java/lang/Long#parseLong:(Ljava/lang/String;I)J", (171, 22));
//     methods.insert("java/lang/Long#numberOfLeadingZeros:(J)I", (171, 23));
//     methods.insert("java/lang/Long#toUnsignedString:(JI)Ljava/lang/String;", (171, 24));
//     methods.insert("java/lang/Long#toUnsignedString:(J)Ljava/lang/String;", (171, 25));
//     methods.insert("java/lang/Long#compareUnsigned:(JJ)I", (171, 26));
//     methods.insert("java/lang/Long#compare:(JJ)I", (171, 27));
//     methods.insert("java/lang/Long#compareTo:(Ljava/lang/Object;)I", (171, 28));
//     methods.insert("java/lang/Long#<clinit>:()V", (171, 29));
//     methods.insert("java/lang/Mapping#<init>:()V", (172, 0));
//     methods.insert("java/lang/Mapping#<init>:(Ljava/lang/Object;)V", (172, 1));
//     methods.insert("java/lang/Mapping#get:(Ljava/lang/Object;)Ljava/lang/Object;", (172, 2));
//     methods.insert("java/lang/Mapping#set:(Ljava/lang/Object;Ljava/lang/Object;)V", (172, 3));
//     methods.insert("java/lang/Mapping#containsKey:(Ljava/lang/Object;)Z", (172, 4));
//     methods.insert("java/lang/Mapping#remove:(Ljava/lang/Object;)V", (172, 5));
//     methods.insert("java/lang/Mapping#clear:()V", (172, 6));
//     methods.insert("java/lang/Mapping#getDefaultValue:()Ljava/lang/Object;", (172, 7));
//     methods.insert("java/lang/Mapping#hasDefaultValue:()Z", (172, 8));
//     methods.insert("java/lang/Math#<init>:()V", (173, 0));
//     methods.insert("java/lang/Math#max:(JJ)J", (173, 1));
//     methods.insert("java/lang/Math#min:(JJ)J", (173, 2));
//     methods.insert("java/lang/Math#max:(II)I", (173, 3));
//     methods.insert("java/lang/Math#min:(II)I", (173, 4));
//     methods.insert("java/lang/Math#abs:(I)I", (173, 5));
//     methods.insert("java/lang/Math#abs:(J)J", (173, 6));
//     methods.insert("java/lang/Math#randomInt:()I", (173, 7));
//     methods.insert("java/lang/Math#random:()I", (173, 8));
//     methods.insert("java/lang/Message#<init>:()V", (174, 0));
//     methods.insert("java/lang/Message#getSender:()Ljava/lang/Address;", (174, 1));
//     methods.insert("java/lang/Message#getValue:()Ljava/lang/Uint256;", (174, 2));
//     methods.insert("java/lang/Message#getData:()[B", (174, 3));
//     methods.insert("java/lang/Message#getAsset:()Ljava/lang/Uint64;", (174, 4));
//     methods.insert("java/lang/Message#getSig:()[B", (174, 5));
//     methods.insert("java/lang/Message#getGas:()Ljava/lang/Uint256;", (174, 6));
//     methods.insert("java/lang/Message#toString:()Ljava/lang/String;", (174, 7));
//     methods.insert("java/lang/Message#<clinit>:()V", (174, 8));
//     methods.insert("java/lang/NegativeArraySizeException#<init>:(Ljava/lang/String;)V", (175, 0));
//     methods.insert("java/lang/NegativeArraySizeException#<init>:()V", (175, 1));
//     methods.insert("java/lang/NoClassDefFoundError#<init>:(Ljava/lang/String;)V", (176, 0));
//     methods.insert("java/lang/NoClassDefFoundError#<init>:()V", (176, 1));
//     methods.insert("java/lang/NoSuchFieldError#<init>:(Ljava/lang/String;)V", (177, 0));
//     methods.insert("java/lang/NoSuchFieldError#<init>:()V", (177, 1));
//     methods.insert("java/lang/NoSuchFieldException#<init>:(Ljava/lang/String;)V", (178, 0));
//     methods.insert("java/lang/NoSuchFieldException#<init>:()V", (178, 1));
//     methods.insert("java/lang/NoSuchMethodError#<init>:(Ljava/lang/String;)V", (179, 0));
//     methods.insert("java/lang/NoSuchMethodError#<init>:()V", (179, 1));
//     methods.insert("java/lang/NoSuchMethodException#<init>:(Ljava/lang/String;)V", (180, 0));
//     methods.insert("java/lang/NoSuchMethodException#<init>:()V", (180, 1));
//     methods.insert("java/lang/NullPointerException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (181, 0));
//     methods.insert("java/lang/NullPointerException#<init>:(Ljava/lang/String;)V", (181, 1));
//     methods.insert("java/lang/NullPointerException#<init>:(Ljava/lang/Throwable;)V", (181, 2));
//     methods.insert("java/lang/NullPointerException#<init>:()V", (181, 3));
//     methods.insert("java/lang/Number#<init>:()V", (182, 0));
//     methods.insert("java/lang/Number#byteValue:()B", (182, 1));
//     methods.insert("java/lang/Number#shortValue:()S", (182, 2));
//     methods.insert("java/lang/Number#intValue:()I", (182, 3));
//     methods.insert("java/lang/Number#longValue:()J", (182, 4));
//     methods.insert("java/lang/NumberFormatException#<init>:(Ljava/lang/String;)V", (183, 0));
//     methods.insert("java/lang/NumberFormatException#<init>:()V", (183, 1));
//     methods.insert("java/lang/NumericArrays#<init>:()V", (184, 0));
//     methods.insert("java/lang/NumericArrays#valueOf:(J)[I", (184, 1));
//     methods.insert("java/lang/NumericArrays#compare:([I[I)I", (184, 2));
//     methods.insert("java/lang/NumericArrays#compare:([ILjava/math/BigInteger;I)I", (184, 3));
//     methods.insert("java/lang/NumericArrays#stripLeadingZeroes:([II)[I", (184, 4));
//     methods.insert("java/lang/NumericArrays#stripLeadingZeroes:([I)[I", (184, 5));
//     methods.insert("java/lang/NumericArrays#stripLeadingZeroes:([B)[B", (184, 6));
//     methods.insert("java/lang/NumericArrays#not:([I[I)[I", (184, 7));
//     methods.insert("java/lang/NumericArrays#and:([I[I)[I", (184, 8));
//     methods.insert("java/lang/NumericArrays#or:([I[I)[I", (184, 9));
//     methods.insert("java/lang/NumericArrays#xor:([I[I)[I", (184, 10));
//     methods.insert("java/lang/NumericArrays#setBit:([II)[I", (184, 11));
//     methods.insert("java/lang/NumericArrays#clearBit:([II)[I", (184, 12));
//     methods.insert("java/lang/NumericArrays#flipBit:([II)[I", (184, 13));
//     methods.insert("java/lang/NumericArrays#lshift:([III)[I", (184, 14));
//     methods.insert("java/lang/NumericArrays#rshift:([III)[I", (184, 15));
//     methods.insert("java/lang/NumericArrays#inc:([II)[I", (184, 16));
//     methods.insert("java/lang/NumericArrays#inc:([IZI)[I", (184, 17));
//     methods.insert("java/lang/NumericArrays#dec:([I)[I", (184, 18));
//     methods.insert("java/lang/NumericArrays#add:([I[II)[I", (184, 19));
//     methods.insert("java/lang/NumericArrays#subgt:([I[I[I)[I", (184, 20));
//     methods.insert("java/lang/NumericArrays#sub:([I[I)[I", (184, 21));
//     methods.insert("java/lang/NumericArrays#mulmod:([I[I[I)[I", (184, 22));
//     methods.insert("java/lang/NumericArrays#addmod:([I[I[I)[I", (184, 23));
//     methods.insert("java/lang/NumericArrays#multiply:([I[II)[I", (184, 24));
//     methods.insert("java/lang/NumericArrays#mul:([IIII)[I", (184, 25));
//     methods.insert("java/lang/NumericArrays#mul:([IIIII)[I", (184, 26));
//     methods.insert("java/lang/NumericArrays#mul:([II[II)[I", (184, 27));
//     methods.insert("java/lang/NumericArrays#mul:([II[IIII)[I", (184, 28));
//     methods.insert("java/lang/NumericArrays#bitLength:([I)I", (184, 29));
//     methods.insert("java/lang/NumericArrays#square:([II)[I", (184, 30));
//     methods.insert("java/lang/NumericArrays#pow:([IIII)[I", (184, 31));
//     methods.insert("java/lang/NumericArrays#divide:([I[I)[I", (184, 32));
//     methods.insert("java/lang/NumericArrays#mod:([I[I)[I", (184, 33));
//     methods.insert("java/lang/NumericArrays#divmod:([IJ)[[I", (184, 34));
//     methods.insert("java/lang/NumericArrays#divmod:([I[I)[[I", (184, 35));
//     methods.insert("java/lang/NumericArrays#from:(Ljava/math/BigInteger;I)[I", (184, 36));
//     methods.insert("java/lang/NumericArrays#from:([B[I)[I", (184, 37));
//     methods.insert("java/lang/NumericArrays#maxValue:(I)[I", (184, 38));
//     methods.insert("java/lang/NumericArrays#<clinit>:()V", (184, 39));
//     methods.insert("java/lang/NumericType#<init>:(Ljava/lang/String;Ljava/math/BigInteger;)V", (185, 0));
//     methods.insert("java/lang/NumericType#getTypeAsString:()Ljava/lang/String;", (185, 1));
//     methods.insert("java/lang/NumericType#getValue:()Ljava/math/BigInteger;", (185, 2));
//     methods.insert("java/lang/NumericType#getBitSize:()I", (185, 3));
//     methods.insert("java/lang/NumericType#equals:(Ljava/lang/Object;)Z", (185, 4));
//     methods.insert("java/lang/NumericType#hashCode:()I", (185, 5));
//     methods.insert("java/lang/NumericType#getValue:()Ljava/lang/Object;", (185, 6));
//     methods.insert("java/lang/Object#<init>:()V", (186, 0));
//     methods.insert("java/lang/Object#clone:()Ljava/lang/Object;", (186, 1));
//     methods.insert("java/lang/Object#clone:(Ljava/lang/Object;)Ljava/lang/Object;", (186, 2));
//     methods.insert("java/lang/Object#equals:(Ljava/lang/Object;)Z", (186, 3));
//     methods.insert("java/lang/Object#finalize:()V", (186, 4));
//     methods.insert("java/lang/Object#getClass:()Ljava/lang/Class;", (186, 5));
//     methods.insert("java/lang/Object#getVMClass:()Ljava/base/VMClass;", (186, 6));
//     methods.insert("java/lang/Object#hashCode:()I", (186, 7));
//     methods.insert("java/lang/Object#notify:()V", (186, 8));
//     methods.insert("java/lang/Object#notifyAll:()V", (186, 9));
//     methods.insert("java/lang/Object#toString:()Ljava/lang/String;", (186, 10));
//     methods.insert("java/lang/Object#wait:()V", (186, 11));
//     methods.insert("java/lang/Object#wait:(J)V", (186, 12));
//     methods.insert("java/lang/Object#wait:(JI)V", (186, 13));
//     methods.insert("java/lang/OutOfMemoryError#<init>:(Ljava/lang/String;)V", (187, 0));
//     methods.insert("java/lang/OutOfMemoryError#<init>:()V", (187, 1));
//     methods.insert("java/lang/OwnershipTransferred#<init>:(Ljava/lang/Address;Ljava/lang/Address;)V", (189, 0));
//     methods.insert("java/lang/Package#<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/ClassLoader;)V", (190, 0));
//     methods.insert("java/lang/Package#getName:()Ljava/lang/String;", (190, 1));
//     methods.insert("java/lang/Package#getImplementationTitle:()Ljava/lang/String;", (190, 2));
//     methods.insert("java/lang/Package#getImplementationVendor:()Ljava/lang/String;", (190, 3));
//     methods.insert("java/lang/Package#getImplementationVersion:()Ljava/lang/String;", (190, 4));
//     methods.insert("java/lang/Package#getSpecificationTitle:()Ljava/lang/String;", (190, 5));
//     methods.insert("java/lang/Package#getSpecificationVendor:()Ljava/lang/String;", (190, 6));
//     methods.insert("java/lang/Package#getSpecificationVersion:()Ljava/lang/String;", (190, 7));
//     methods.insert("java/lang/Package#isSealed:()Z", (190, 8));
//     methods.insert("java/lang/Package#isSealed:(Ljava/lang/Object;)Z", (190, 9));
//     methods.insert("java/lang/Paused#<init>:(Ljava/lang/Address;)V", (191, 0));
//     methods.insert("java/lang/Readable#read:(Ljava/lang/Object;)I", (192, 0));
//     methods.insert("java/lang/ReflectiveOperationException#<init>:()V", (193, 0));
//     methods.insert("java/lang/RevertException#<init>:(Ljava/lang/String;)V", (194, 0));
//     methods.insert("java/lang/Runtime#<init>:()V", (195, 0));
//     methods.insert("java/lang/Runtime#getRuntime:()Ljava/lang/Runtime;", (195, 1));
//     methods.insert("java/lang/Runtime#<clinit>:()V", (195, 2));
//     methods.insert("java/lang/RuntimeException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (196, 0));
//     methods.insert("java/lang/RuntimeException#<init>:(Ljava/lang/String;)V", (196, 1));
//     methods.insert("java/lang/RuntimeException#<init>:(Ljava/lang/Throwable;)V", (196, 2));
//     methods.insert("java/lang/RuntimeException#<init>:()V", (196, 3));
//     methods.insert("java/lang/SecurityException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (197, 0));
//     methods.insert("java/lang/SecurityException#<init>:(Ljava/lang/String;)V", (197, 1));
//     methods.insert("java/lang/SecurityException#<init>:(Ljava/lang/Throwable;)V", (197, 2));
//     methods.insert("java/lang/SecurityException#<init>:()V", (197, 3));
//     methods.insert("java/lang/SecurityManager#<init>:()V", (198, 0));
//     methods.insert("java/lang/SecurityManager#checkSecurityAccess:(Ljava/lang/String;)V", (198, 1));
//     methods.insert("java/lang/Short#<init>:(S)V", (199, 0));
//     methods.insert("java/lang/Short#valueOf:(S)Ljava/lang/Short;", (199, 1));
//     methods.insert("java/lang/Short#compareTo:(Ljava/lang/Short;)I", (199, 2));
//     methods.insert("java/lang/Short#equals:(Ljava/lang/Object;)Z", (199, 3));
//     methods.insert("java/lang/Short#hashCode:()I", (199, 4));
//     methods.insert("java/lang/Short#toString:()Ljava/lang/String;", (199, 5));
//     methods.insert("java/lang/Short#toString:(SI)Ljava/lang/String;", (199, 6));
//     methods.insert("java/lang/Short#toString:(S)Ljava/lang/String;", (199, 7));
//     methods.insert("java/lang/Short#byteValue:()B", (199, 8));
//     methods.insert("java/lang/Short#shortValue:()S", (199, 9));
//     methods.insert("java/lang/Short#intValue:()I", (199, 10));
//     methods.insert("java/lang/Short#longValue:()J", (199, 11));
//     methods.insert("java/lang/Short#floatValue:()F", (199, 12));
//     methods.insert("java/lang/Short#doubleValue:()D", (199, 13));
//     methods.insert("java/lang/Short#compareTo:(Ljava/lang/Object;)I", (199, 14));
//     methods.insert("java/lang/Short#<clinit>:()V", (199, 15));
//     methods.insert("java/lang/StackOverflowError#<init>:(Ljava/lang/String;)V", (200, 0));
//     methods.insert("java/lang/StackOverflowError#<init>:()V", (200, 1));
//     methods.insert("java/lang/StackTraceElement#<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (201, 0));
//     methods.insert("java/lang/StackTraceElement#hashCode:()I", (201, 1));
//     methods.insert("java/lang/StackTraceElement#equals:(Ljava/lang/Object;)Z", (201, 2));
//     methods.insert("java/lang/StackTraceElement#toString:()Ljava/lang/String;", (201, 3));
//     methods.insert("java/lang/StackTraceElement#getClassName:()Ljava/lang/String;", (201, 4));
//     methods.insert("java/lang/StackTraceElement#getMethodName:()Ljava/lang/String;", (201, 5));
//     methods.insert("java/lang/StackTraceElement#getFileName:()Ljava/lang/String;", (201, 6));
//     methods.insert("java/lang/StackTraceElement#getLineNumber:()I", (201, 7));
//     methods.insert("java/lang/StackTraceElement#isNativeMethod:()Z", (201, 8));
//     methods.insert("java/lang/StackTraceElement#<clinit>:()V", (201, 9));
//     methods.insert("java/lang/String#<init>:()V", (202, 0));
//     methods.insert("java/lang/String#<init>:([CIIZ)V", (202, 1));
//     methods.insert("java/lang/String#<init>:([CII)V", (202, 2));
//     methods.insert("java/lang/String#<init>:([C)V", (202, 3));
//     methods.insert("java/lang/String#<init>:([BIILjava/lang/String;)V", (202, 4));
//     methods.insert("java/lang/String#<init>:([BIIZ)V", (202, 5));
//     methods.insert("java/lang/String#<init>:([BII)V", (202, 6));
//     methods.insert("java/lang/String#<init>:([B)V", (202, 7));
//     methods.insert("java/lang/String#<init>:(Ljava/lang/String;)V", (202, 8));
//     methods.insert("java/lang/String#<init>:([BLjava/lang/String;)V", (202, 9));
//     methods.insert("java/lang/String#<init>:([BIII)V", (202, 10));
//     methods.insert("java/lang/String#<init>:(Ljava/lang/Object;IIZ)V", (202, 11));
//     methods.insert("java/lang/String#toString:()Ljava/lang/String;", (202, 12));
//     methods.insert("java/lang/String#length:()I", (202, 13));
//     methods.insert("java/lang/String#hashCode:()I", (202, 14));
//     methods.insert("java/lang/String#equals:(Ljava/lang/Object;)Z", (202, 15));
//     methods.insert("java/lang/String#equalsIgnoreCase:(Ljava/lang/String;)Z", (202, 16));
//     methods.insert("java/lang/String#compareTo:(Ljava/lang/String;)I", (202, 17));
//     methods.insert("java/lang/String#compareToIgnoreCase:(Ljava/lang/String;)I", (202, 18));
//     methods.insert("java/lang/String#trim:()Ljava/lang/String;", (202, 19));
//     methods.insert("java/lang/String#toLowerCase:()Ljava/lang/String;", (202, 20));
//     methods.insert("java/lang/String#toUpperCase:()Ljava/lang/String;", (202, 21));
//     methods.insert("java/lang/String#indexOf:(I)I", (202, 22));
//     methods.insert("java/lang/String#indexOf:(II)I", (202, 23));
//     methods.insert("java/lang/String#lastIndexOf:(I)I", (202, 24));
//     methods.insert("java/lang/String#indexOf:(Ljava/lang/String;)I", (202, 25));
//     methods.insert("java/lang/String#indexOf:(Ljava/lang/String;I)I", (202, 26));
//     methods.insert("java/lang/String#lastIndexOf:(Ljava/lang/String;)I", (202, 27));
//     methods.insert("java/lang/String#lastIndexOf:(Ljava/lang/String;I)I", (202, 28));
//     methods.insert("java/lang/String#replace:(CC)Ljava/lang/String;", (202, 29));
//     methods.insert("java/lang/String#substring:(I)Ljava/lang/String;", (202, 30));
//     methods.insert("java/lang/String#substring:(II)Ljava/lang/String;", (202, 31));
//     methods.insert("java/lang/String#startsWith:(Ljava/lang/String;)Z", (202, 32));
//     methods.insert("java/lang/String#startsWith:(Ljava/lang/String;I)Z", (202, 33));
//     methods.insert("java/lang/String#endsWith:(Ljava/lang/String;)Z", (202, 34));
//     methods.insert("java/lang/String#concat:(Ljava/lang/String;)Ljava/lang/String;", (202, 35));
//     methods.insert("java/lang/String#getBytes:(II[BI)V", (202, 36));
//     methods.insert("java/lang/String#getBytes:()[B", (202, 37));
//     methods.insert("java/lang/String#getBytes:(Ljava/lang/String;)[B", (202, 38));
//     methods.insert("java/lang/String#getChars:(II[CI)V", (202, 39));
//     methods.insert("java/lang/String#toCharArray:()[C", (202, 40));
//     methods.insert("java/lang/String#charAt:(I)C", (202, 41));
//     methods.insert("java/lang/String#subSequence:(II)Ljava/lang/CharSequence;", (202, 42));
//     methods.insert("java/lang/String#replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;", (202, 43));
//     methods.insert("java/lang/String#infuse:(Ljava/lang/String;)Ljava/lang/String;", (202, 44));
//     methods.insert("java/lang/String#intern:()Ljava/lang/String;", (202, 45));
//     methods.insert("java/lang/String#valueOf:(Ljava/lang/Object;)Ljava/lang/String;", (202, 46));
//     methods.insert("java/lang/String#valueOf:(Z)Ljava/lang/String;", (202, 47));
//     methods.insert("java/lang/String#valueOf:(B)Ljava/lang/String;", (202, 48));
//     methods.insert("java/lang/String#valueOf:(S)Ljava/lang/String;", (202, 49));
//     methods.insert("java/lang/String#valueOf:(C)Ljava/lang/String;", (202, 50));
//     methods.insert("java/lang/String#valueOf:(I)Ljava/lang/String;", (202, 51));
//     methods.insert("java/lang/String#valueOf:(J)Ljava/lang/String;", (202, 52));
//     methods.insert("java/lang/String#valueOf:([CII)Ljava/lang/String;", (202, 53));
//     methods.insert("java/lang/String#valueOf:([C)Ljava/lang/String;", (202, 54));
//     methods.insert("java/lang/String#lastIndexOf:(II)I", (202, 55));
//     methods.insert("java/lang/String#regionMatches:(ILjava/lang/String;II)Z", (202, 56));
//     methods.insert("java/lang/String#regionMatches:(ZILjava/lang/String;II)Z", (202, 57));
//     methods.insert("java/lang/String#isEmpty:()Z", (202, 58));
//     methods.insert("java/lang/String#contains:(Ljava/lang/CharSequence;)Z", (202, 59));
//     methods.insert("java/lang/String#codePointAt:(I)I", (202, 60));
//     methods.insert("java/lang/String#codePointCount:(II)I", (202, 61));
//     methods.insert("java/lang/String#compareTo:(Ljava/lang/Object;)I", (202, 62));
//     methods.insert("java/lang/String#<clinit>:()V", (202, 63));
//     methods.insert("java/lang/StringBuffer#<init>:(Ljava/lang/String;)V", (203, 0));
//     methods.insert("java/lang/StringBuffer#<init>:(I)V", (203, 1));
//     methods.insert("java/lang/StringBuffer#<init>:()V", (203, 2));
//     methods.insert("java/lang/StringBuffer#append:(Ljava/lang/String;)Ljava/lang/StringBuffer;", (203, 3));
//     methods.insert("java/lang/StringBuffer#append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;", (203, 4));
//     methods.insert("java/lang/StringBuffer#append:(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;", (203, 5));
//     methods.insert("java/lang/StringBuffer#append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;", (203, 6));
//     methods.insert("java/lang/StringBuffer#append:(C)Ljava/lang/StringBuffer;", (203, 7));
//     methods.insert("java/lang/StringBuffer#append:(Z)Ljava/lang/StringBuffer;", (203, 8));
//     methods.insert("java/lang/StringBuffer#append:(I)Ljava/lang/StringBuffer;", (203, 9));
//     methods.insert("java/lang/StringBuffer#append:(J)Ljava/lang/StringBuffer;", (203, 10));
//     methods.insert("java/lang/StringBuffer#append:(F)Ljava/lang/StringBuffer;", (203, 11));
//     methods.insert("java/lang/StringBuffer#append:(D)Ljava/lang/StringBuffer;", (203, 12));
//     methods.insert("java/lang/StringBuffer#append:([CII)Ljava/lang/StringBuffer;", (203, 13));
//     methods.insert("java/lang/StringBuffer#append:([C)Ljava/lang/StringBuffer;", (203, 14));
//     methods.insert("java/lang/StringBuffer#indexOf:(Ljava/lang/String;)I", (203, 15));
//     methods.insert("java/lang/StringBuffer#indexOf:(Ljava/lang/String;I)I", (203, 16));
//     methods.insert("java/lang/StringBuffer#insert:(ILjava/lang/String;)Ljava/lang/StringBuffer;", (203, 17));
//     methods.insert("java/lang/StringBuffer#insert:(IC)Ljava/lang/StringBuffer;", (203, 18));
//     methods.insert("java/lang/StringBuffer#insert:(II)Ljava/lang/StringBuffer;", (203, 19));
//     methods.insert("java/lang/StringBuffer#delete:(II)Ljava/lang/StringBuffer;", (203, 20));
//     methods.insert("java/lang/StringBuffer#deleteCharAt:(I)Ljava/lang/StringBuffer;", (203, 21));
//     methods.insert("java/lang/StringBuffer#charAt:(I)C", (203, 22));
//     methods.insert("java/lang/StringBuffer#length:()I", (203, 23));
//     methods.insert("java/lang/StringBuffer#replace:(IILjava/lang/String;)Ljava/lang/StringBuffer;", (203, 24));
//     methods.insert("java/lang/StringBuffer#setLength:(I)V", (203, 25));
//     methods.insert("java/lang/StringBuffer#setCharAt:(IC)V", (203, 26));
//     methods.insert("java/lang/StringBuffer#getChars:(II[CI)V", (203, 27));
//     methods.insert("java/lang/StringBuffer#toString:()Ljava/lang/String;", (203, 28));
//     methods.insert("java/lang/StringBuffer#substring:(II)Ljava/lang/String;", (203, 29));
//     methods.insert("java/lang/StringBuffer#subSequence:(II)Ljava/lang/CharSequence;", (203, 30));
//     methods.insert("java/lang/StringBuilder#<init>:(Ljava/lang/String;)V", (204, 0));
//     methods.insert("java/lang/StringBuilder#<init>:(I)V", (204, 1));
//     methods.insert("java/lang/StringBuilder#<init>:()V", (204, 2));
//     methods.insert("java/lang/StringBuilder#flush:()V", (204, 3));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/String;)Ljava/lang/StringBuilder;", (204, 4));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;", (204, 5));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;", (204, 6));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;", (204, 7));
//     methods.insert("java/lang/StringBuilder#append:([CII)Ljava/lang/StringBuilder;", (204, 8));
//     methods.insert("java/lang/StringBuilder#append:([C)Ljava/lang/StringBuilder;", (204, 9));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;", (204, 10));
//     methods.insert("java/lang/StringBuilder#append:(C)Ljava/lang/StringBuilder;", (204, 11));
//     methods.insert("java/lang/StringBuilder#append:(Z)Ljava/lang/StringBuilder;", (204, 12));
//     methods.insert("java/lang/StringBuilder#append:(I)Ljava/lang/StringBuilder;", (204, 13));
//     methods.insert("java/lang/StringBuilder#append:(J)Ljava/lang/StringBuilder;", (204, 14));
//     methods.insert("java/lang/StringBuilder#append:(F)Ljava/lang/StringBuilder;", (204, 15));
//     methods.insert("java/lang/StringBuilder#append:(D)Ljava/lang/StringBuilder;", (204, 16));
//     methods.insert("java/lang/StringBuilder#charAt:(I)C", (204, 17));
//     methods.insert("java/lang/StringBuilder#insert:(ILjava/lang/String;)Ljava/lang/StringBuilder;", (204, 18));
//     methods.insert("java/lang/StringBuilder#insert:(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;", (204, 19));
//     methods.insert("java/lang/StringBuilder#insert:(IC)Ljava/lang/StringBuilder;", (204, 20));
//     methods.insert("java/lang/StringBuilder#insert:(II)Ljava/lang/StringBuilder;", (204, 21));
//     methods.insert("java/lang/StringBuilder#delete:(II)Ljava/lang/StringBuilder;", (204, 22));
//     methods.insert("java/lang/StringBuilder#deleteCharAt:(I)Ljava/lang/StringBuilder;", (204, 23));
//     methods.insert("java/lang/StringBuilder#replace:(IILjava/lang/String;)Ljava/lang/StringBuilder;", (204, 24));
//     methods.insert("java/lang/StringBuilder#indexOf:(Ljava/lang/String;)I", (204, 25));
//     methods.insert("java/lang/StringBuilder#indexOf:(Ljava/lang/String;I)I", (204, 26));
//     methods.insert("java/lang/StringBuilder#lastIndexOf:(Ljava/lang/String;)I", (204, 27));
//     methods.insert("java/lang/StringBuilder#lastIndexOf:(Ljava/lang/String;I)I", (204, 28));
//     methods.insert("java/lang/StringBuilder#length:()I", (204, 29));
//     methods.insert("java/lang/StringBuilder#setLength:(I)V", (204, 30));
//     methods.insert("java/lang/StringBuilder#getChars:(II[CI)V", (204, 31));
//     methods.insert("java/lang/StringBuilder#toString:()Ljava/lang/String;", (204, 32));
//     methods.insert("java/lang/StringBuilder#substring:(I)Ljava/lang/String;", (204, 33));
//     methods.insert("java/lang/StringBuilder#substring:(II)Ljava/lang/String;", (204, 34));
//     methods.insert("java/lang/StringBuilder#subSequence:(II)Ljava/lang/CharSequence;", (204, 35));
//     methods.insert("java/lang/StringBuilder#setCharAt:(IC)V", (204, 36));
//     methods.insert("java/lang/StringBuilder#ensureCapacity:(I)V", (204, 37));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;", (204, 38));
//     methods.insert("java/lang/StringBuilder#append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;", (204, 39));
//     methods.insert("java/lang/StringBuilder#append:(C)Ljava/lang/Appendable;", (204, 40));
//     methods.insert("java/lang/StringBuilderCell#<init>:(Ljava/lang/String;Ljava/lang/StringBuilderCell;)V", (205, 0));
//     methods.insert("java/lang/StringComparator#<init>:()V", (206, 0));
//     methods.insert("java/lang/StringComparator#compare:(Ljava/lang/String;Ljava/lang/String;)I", (206, 1));
//     methods.insert("java/lang/StringComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I", (206, 2));
//     methods.insert("java/lang/StringIndexOutOfBoundsException#<init>:(I)V", (207, 0));
//     methods.insert("java/lang/StringIndexOutOfBoundsException#<init>:(Ljava/lang/String;)V", (207, 1));
//     methods.insert("java/lang/StringIndexOutOfBoundsException#<init>:()V", (207, 2));
//     methods.insert("java/lang/StringUtil#<init>:()V", (208, 0));
//     methods.insert("java/lang/StringUtil#fromString:(Ljava/lang/String;II)[I", (208, 1));
//     methods.insert("java/lang/StringUtil#muladd:([III)V", (208, 2));
//     methods.insert("java/lang/StringUtil#toString:([II)Ljava/lang/String;", (208, 3));
//     methods.insert("java/lang/StringUtil#<clinit>:()V", (208, 4));
//     methods.insert("java/lang/SuppressWarnings#value:()[Ljava/lang/String;", (209, 0));
//     methods.insert("java/lang/System#<init>:()V", (210, 0));
//     methods.insert("java/lang/System#arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V", (210, 1));
//     methods.insert("java/lang/System#getProperty:(Ljava/lang/String;)Ljava/lang/String;", (210, 2));
//     methods.insert("java/lang/System#getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", (210, 3));
//     methods.insert("java/lang/System#currentTimeMillis:()J", (210, 4));
//     methods.insert("java/lang/System#identityHashCode:(Ljava/lang/Object;)I", (210, 5));
//     methods.insert("java/lang/System#nanoTime:()J", (210, 6));
//     methods.insert("java/lang/System#load:(Ljava/lang/String;)V", (210, 7));
//     methods.insert("java/lang/System#loadLibrary:(Ljava/lang/String;)V", (210, 8));
//     methods.insert("java/lang/System#gc:()V", (210, 9));
//     methods.insert("java/lang/System#exit:(I)V", (210, 10));
//     methods.insert("java/lang/System#setOut0:(Ljava/io/SystemPrintStream;)V", (210, 11));
//     methods.insert("java/lang/System#setErr0:(Ljava/io/SystemPrintStream;)V", (210, 12));
//     methods.insert("java/lang/System#setIn0:(Ljava/io/SystemPrintStream;)V", (210, 13));
//     methods.insert("java/lang/System#initSystemOut:()V", (210, 14));
//     methods.insert("java/lang/System#<clinit>:()V", (210, 15));
//     methods.insert("java/lang/SystemNanoTime#<init>:()V", (211, 0));
//     methods.insert("java/lang/SystemNanoTime#<clinit>:()V", (211, 1));
//     methods.insert("java/lang/ThreadDeath#<init>:()V", (212, 0));
//     methods.insert("java/lang/Throwable#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (213, 0));
//     methods.insert("java/lang/Throwable#<init>:(Ljava/lang/String;)V", (213, 1));
//     methods.insert("java/lang/Throwable#<init>:(Ljava/lang/Throwable;)V", (213, 2));
//     methods.insert("java/lang/Throwable#<init>:()V", (213, 3));
//     methods.insert("java/lang/Throwable#getCause:()Ljava/lang/Throwable;", (213, 4));
//     methods.insert("java/lang/Throwable#initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;", (213, 5));
//     methods.insert("java/lang/Throwable#getMessage:()Ljava/lang/String;", (213, 6));
//     methods.insert("java/lang/Throwable#getLocalizedMessage:()Ljava/lang/String;", (213, 7));
//     methods.insert("java/lang/Throwable#toString:()Ljava/lang/String;", (213, 8));
//     methods.insert("java/lang/Throwable#trace:(I)Ljava/lang/Object;", (213, 9));
//     methods.insert("java/lang/Throwable#resolveTrace:(Ljava/lang/Object;)[Ljava/lang/StackTraceElement;", (213, 10));
//     methods.insert("java/lang/Throwable#resolveTrace:()[Ljava/lang/StackTraceElement;", (213, 11));
//     methods.insert("java/lang/Throwable#getStackTrace:()[Ljava/lang/StackTraceElement;", (213, 12));
//     methods.insert("java/lang/Throwable#setStackTrace:([Ljava/lang/StackTraceElement;)V", (213, 13));
//     methods.insert("java/lang/Throwable#printStackTrace:()V", (213, 14));
//     methods.insert("java/lang/Throwable#printStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/String;)V", (213, 15));
//     methods.insert("java/lang/Throwable#fillInStackTrace:()Ljava/lang/Throwable;", (213, 16));
//     methods.insert("java/lang/Throwable#addSuppressed:(Ljava/lang/Throwable;)V", (213, 17));
//     methods.insert("java/lang/Transfer#<init>:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", (214, 0));
//     methods.insert("java/lang/TypeNotPresentException#<init>:(Ljava/lang/String;)V", (215, 0));
//     methods.insert("java/lang/TypeNotPresentException#<init>:()V", (215, 1));
//     methods.insert("java/lang/Uint#<init>:([I)V", (216, 0));
//     methods.insert("java/lang/Uint#<init>:([B)V", (216, 1));
//     methods.insert("java/lang/Uint#<init>:(Ljava/lang/Uint128;)V", (216, 2));
//     methods.insert("java/lang/Uint#<init>:(Ljava/lang/String;)V", (216, 3));
//     methods.insert("java/lang/Uint#<init>:(Ljava/lang/String;I)V", (216, 4));
//     methods.insert("java/lang/Uint#<init>:(Ljava/math/BigInteger;)V", (216, 5));
//     methods.insert("java/lang/Uint#<init>:(J)V", (216, 6));
//     methods.insert("java/lang/Uint#not:()Ljava/lang/Uint;", (216, 7));
//     methods.insert("java/lang/Uint#and:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 8));
//     methods.insert("java/lang/Uint#or:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 9));
//     methods.insert("java/lang/Uint#xor:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 10));
//     methods.insert("java/lang/Uint#setBit:(I)Ljava/lang/Uint;", (216, 11));
//     methods.insert("java/lang/Uint#clearBit:(I)Ljava/lang/Uint;", (216, 12));
//     methods.insert("java/lang/Uint#flipBit:(I)Ljava/lang/Uint;", (216, 13));
//     methods.insert("java/lang/Uint#shiftLeft:(I)Ljava/lang/Uint;", (216, 14));
//     methods.insert("java/lang/Uint#shiftRight:(I)Ljava/lang/Uint;", (216, 15));
//     methods.insert("java/lang/Uint#inc:()Ljava/lang/Uint;", (216, 16));
//     methods.insert("java/lang/Uint#dec:()Ljava/lang/Uint;", (216, 17));
//     methods.insert("java/lang/Uint#add:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 18));
//     methods.insert("java/lang/Uint#addmod:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 19));
//     methods.insert("java/lang/Uint#sub:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 20));
//     methods.insert("java/lang/Uint#mul:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 21));
//     methods.insert("java/lang/Uint#mulmod:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 22));
//     methods.insert("java/lang/Uint#pow:(I)Ljava/lang/Uint;", (216, 23));
//     methods.insert("java/lang/Uint#div:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 24));
//     methods.insert("java/lang/Uint#mod:(Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 25));
//     methods.insert("java/lang/Uint#divmod:(Ljava/lang/Uint;)[Ljava/lang/Uint;", (216, 26));
//     methods.insert("java/lang/Uint#add:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 27));
//     methods.insert("java/lang/Uint#sub:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 28));
//     methods.insert("java/lang/Uint#mul:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 29));
//     methods.insert("java/lang/Uint#div:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 30));
//     methods.insert("java/lang/Uint#mod:(Ljava/lang/Uint;Ljava/lang/Uint;)Ljava/lang/Uint;", (216, 31));
//     methods.insert("java/lang/Uint#equals:(Ljava/lang/Object;)Z", (216, 32));
//     methods.insert("java/lang/Uint#flipBit:(I)Ljava/lang/UintType;", (216, 33));
//     methods.insert("java/lang/Uint#clearBit:(I)Ljava/lang/UintType;", (216, 34));
//     methods.insert("java/lang/Uint#setBit:(I)Ljava/lang/UintType;", (216, 35));
//     methods.insert("java/lang/Uint#shiftRight:(I)Ljava/lang/UintType;", (216, 36));
//     methods.insert("java/lang/Uint#shiftLeft:(I)Ljava/lang/UintType;", (216, 37));
//     methods.insert("java/lang/Uint#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 38));
//     methods.insert("java/lang/Uint#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 39));
//     methods.insert("java/lang/Uint#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 40));
//     methods.insert("java/lang/Uint#dec:()Ljava/lang/UintType;", (216, 41));
//     methods.insert("java/lang/Uint#inc:()Ljava/lang/UintType;", (216, 42));
//     methods.insert("java/lang/Uint#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 43));
//     methods.insert("java/lang/Uint#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 44));
//     methods.insert("java/lang/Uint#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 45));
//     methods.insert("java/lang/Uint#not:()Ljava/lang/UintType;", (216, 46));
//     methods.insert("java/lang/Uint#pow:(I)Ljava/lang/UintType;", (216, 47));
//     methods.insert("java/lang/Uint#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 48));
//     methods.insert("java/lang/Uint#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 49));
//     methods.insert("java/lang/Uint#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 50));
//     methods.insert("java/lang/Uint#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (216, 51));
//     methods.insert("java/lang/Uint#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (216, 52));
//     methods.insert("java/lang/Uint#<clinit>:()V", (216, 53));
//     methods.insert("java/lang/Uint128#<init>:([I)V", (217, 0));
//     methods.insert("java/lang/Uint128#<init>:([B)V", (217, 1));
//     methods.insert("java/lang/Uint128#<init>:(Ljava/lang/Uint256;)V", (217, 2));
//     methods.insert("java/lang/Uint128#<init>:(Ljava/lang/String;)V", (217, 3));
//     methods.insert("java/lang/Uint128#<init>:(Ljava/lang/String;I)V", (217, 4));
//     methods.insert("java/lang/Uint128#<init>:(Ljava/math/BigInteger;)V", (217, 5));
//     methods.insert("java/lang/Uint128#<init>:(J)V", (217, 6));
//     methods.insert("java/lang/Uint128#not:()Ljava/lang/Uint128;", (217, 7));
//     methods.insert("java/lang/Uint128#and:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 8));
//     methods.insert("java/lang/Uint128#or:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 9));
//     methods.insert("java/lang/Uint128#xor:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 10));
//     methods.insert("java/lang/Uint128#setBit:(I)Ljava/lang/Uint128;", (217, 11));
//     methods.insert("java/lang/Uint128#clearBit:(I)Ljava/lang/Uint128;", (217, 12));
//     methods.insert("java/lang/Uint128#flipBit:(I)Ljava/lang/Uint128;", (217, 13));
//     methods.insert("java/lang/Uint128#shiftLeft:(I)Ljava/lang/Uint128;", (217, 14));
//     methods.insert("java/lang/Uint128#shiftRight:(I)Ljava/lang/Uint128;", (217, 15));
//     methods.insert("java/lang/Uint128#inc:()Ljava/lang/Uint128;", (217, 16));
//     methods.insert("java/lang/Uint128#dec:()Ljava/lang/Uint128;", (217, 17));
//     methods.insert("java/lang/Uint128#add:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 18));
//     methods.insert("java/lang/Uint128#addmod:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 19));
//     methods.insert("java/lang/Uint128#sub:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 20));
//     methods.insert("java/lang/Uint128#mul:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 21));
//     methods.insert("java/lang/Uint128#mulmod:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 22));
//     methods.insert("java/lang/Uint128#pow:(I)Ljava/lang/Uint128;", (217, 23));
//     methods.insert("java/lang/Uint128#div:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 24));
//     methods.insert("java/lang/Uint128#mod:(Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 25));
//     methods.insert("java/lang/Uint128#divmod:(Ljava/lang/Uint128;)[Ljava/lang/Uint128;", (217, 26));
//     methods.insert("java/lang/Uint128#add:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 27));
//     methods.insert("java/lang/Uint128#sub:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 28));
//     methods.insert("java/lang/Uint128#mul:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 29));
//     methods.insert("java/lang/Uint128#div:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 30));
//     methods.insert("java/lang/Uint128#mod:(Ljava/lang/Uint128;Ljava/lang/Uint128;)Ljava/lang/Uint128;", (217, 31));
//     methods.insert("java/lang/Uint128#equals:(Ljava/lang/Object;)Z", (217, 32));
//     methods.insert("java/lang/Uint128#flipBit:(I)Ljava/lang/UintType;", (217, 33));
//     methods.insert("java/lang/Uint128#clearBit:(I)Ljava/lang/UintType;", (217, 34));
//     methods.insert("java/lang/Uint128#setBit:(I)Ljava/lang/UintType;", (217, 35));
//     methods.insert("java/lang/Uint128#shiftRight:(I)Ljava/lang/UintType;", (217, 36));
//     methods.insert("java/lang/Uint128#shiftLeft:(I)Ljava/lang/UintType;", (217, 37));
//     methods.insert("java/lang/Uint128#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 38));
//     methods.insert("java/lang/Uint128#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 39));
//     methods.insert("java/lang/Uint128#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 40));
//     methods.insert("java/lang/Uint128#dec:()Ljava/lang/UintType;", (217, 41));
//     methods.insert("java/lang/Uint128#inc:()Ljava/lang/UintType;", (217, 42));
//     methods.insert("java/lang/Uint128#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 43));
//     methods.insert("java/lang/Uint128#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 44));
//     methods.insert("java/lang/Uint128#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 45));
//     methods.insert("java/lang/Uint128#not:()Ljava/lang/UintType;", (217, 46));
//     methods.insert("java/lang/Uint128#pow:(I)Ljava/lang/UintType;", (217, 47));
//     methods.insert("java/lang/Uint128#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 48));
//     methods.insert("java/lang/Uint128#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 49));
//     methods.insert("java/lang/Uint128#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 50));
//     methods.insert("java/lang/Uint128#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (217, 51));
//     methods.insert("java/lang/Uint128#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (217, 52));
//     methods.insert("java/lang/Uint128#<clinit>:()V", (217, 53));
//     methods.insert("java/lang/Uint16#<init>:([I)V", (218, 0));
//     methods.insert("java/lang/Uint16#<init>:([B)V", (218, 1));
//     methods.insert("java/lang/Uint16#<init>:(Ljava/lang/String;)V", (218, 2));
//     methods.insert("java/lang/Uint16#<init>:(Ljava/lang/String;I)V", (218, 3));
//     methods.insert("java/lang/Uint16#<init>:(Ljava/math/BigInteger;)V", (218, 4));
//     methods.insert("java/lang/Uint16#<init>:(J)V", (218, 5));
//     methods.insert("java/lang/Uint16#<init>:(I)V", (218, 6));
//     methods.insert("java/lang/Uint16#<init>:(S)V", (218, 7));
//     methods.insert("java/lang/Uint16#not:()Ljava/lang/Uint16;", (218, 8));
//     methods.insert("java/lang/Uint16#and:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 9));
//     methods.insert("java/lang/Uint16#or:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 10));
//     methods.insert("java/lang/Uint16#xor:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 11));
//     methods.insert("java/lang/Uint16#setBit:(I)Ljava/lang/Uint16;", (218, 12));
//     methods.insert("java/lang/Uint16#clearBit:(I)Ljava/lang/Uint16;", (218, 13));
//     methods.insert("java/lang/Uint16#flipBit:(I)Ljava/lang/Uint16;", (218, 14));
//     methods.insert("java/lang/Uint16#shiftLeft:(I)Ljava/lang/Uint16;", (218, 15));
//     methods.insert("java/lang/Uint16#shiftRight:(I)Ljava/lang/Uint16;", (218, 16));
//     methods.insert("java/lang/Uint16#inc:()Ljava/lang/Uint16;", (218, 17));
//     methods.insert("java/lang/Uint16#dec:()Ljava/lang/Uint16;", (218, 18));
//     methods.insert("java/lang/Uint16#add:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 19));
//     methods.insert("java/lang/Uint16#addmod:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 20));
//     methods.insert("java/lang/Uint16#sub:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 21));
//     methods.insert("java/lang/Uint16#mul:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 22));
//     methods.insert("java/lang/Uint16#mulmod:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 23));
//     methods.insert("java/lang/Uint16#pow:(I)Ljava/lang/Uint16;", (218, 24));
//     methods.insert("java/lang/Uint16#div:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 25));
//     methods.insert("java/lang/Uint16#mod:(Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 26));
//     methods.insert("java/lang/Uint16#divmod:(Ljava/lang/Uint16;)[Ljava/lang/Uint16;", (218, 27));
//     methods.insert("java/lang/Uint16#add:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 28));
//     methods.insert("java/lang/Uint16#sub:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 29));
//     methods.insert("java/lang/Uint16#mul:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 30));
//     methods.insert("java/lang/Uint16#div:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 31));
//     methods.insert("java/lang/Uint16#mod:(Ljava/lang/Uint16;Ljava/lang/Uint16;)Ljava/lang/Uint16;", (218, 32));
//     methods.insert("java/lang/Uint16#equals:(Ljava/lang/Object;)Z", (218, 33));
//     methods.insert("java/lang/Uint16#flipBit:(I)Ljava/lang/UintType;", (218, 34));
//     methods.insert("java/lang/Uint16#clearBit:(I)Ljava/lang/UintType;", (218, 35));
//     methods.insert("java/lang/Uint16#setBit:(I)Ljava/lang/UintType;", (218, 36));
//     methods.insert("java/lang/Uint16#shiftRight:(I)Ljava/lang/UintType;", (218, 37));
//     methods.insert("java/lang/Uint16#shiftLeft:(I)Ljava/lang/UintType;", (218, 38));
//     methods.insert("java/lang/Uint16#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 39));
//     methods.insert("java/lang/Uint16#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 40));
//     methods.insert("java/lang/Uint16#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 41));
//     methods.insert("java/lang/Uint16#dec:()Ljava/lang/UintType;", (218, 42));
//     methods.insert("java/lang/Uint16#inc:()Ljava/lang/UintType;", (218, 43));
//     methods.insert("java/lang/Uint16#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 44));
//     methods.insert("java/lang/Uint16#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 45));
//     methods.insert("java/lang/Uint16#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 46));
//     methods.insert("java/lang/Uint16#not:()Ljava/lang/UintType;", (218, 47));
//     methods.insert("java/lang/Uint16#pow:(I)Ljava/lang/UintType;", (218, 48));
//     methods.insert("java/lang/Uint16#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 49));
//     methods.insert("java/lang/Uint16#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 50));
//     methods.insert("java/lang/Uint16#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 51));
//     methods.insert("java/lang/Uint16#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (218, 52));
//     methods.insert("java/lang/Uint16#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (218, 53));
//     methods.insert("java/lang/Uint16#<clinit>:()V", (218, 54));
//     methods.insert("java/lang/Uint160#<init>:([I)V", (219, 0));
//     methods.insert("java/lang/Uint160#<init>:([B)V", (219, 1));
//     methods.insert("java/lang/Uint160#<init>:(Ljava/lang/Uint128;)V", (219, 2));
//     methods.insert("java/lang/Uint160#<init>:(Ljava/lang/String;)V", (219, 3));
//     methods.insert("java/lang/Uint160#<init>:(Ljava/lang/String;I)V", (219, 4));
//     methods.insert("java/lang/Uint160#<init>:(Ljava/math/BigInteger;)V", (219, 5));
//     methods.insert("java/lang/Uint160#<init>:(J)V", (219, 6));
//     methods.insert("java/lang/Uint160#not:()Ljava/lang/Uint160;", (219, 7));
//     methods.insert("java/lang/Uint160#and:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 8));
//     methods.insert("java/lang/Uint160#or:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 9));
//     methods.insert("java/lang/Uint160#xor:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 10));
//     methods.insert("java/lang/Uint160#setBit:(I)Ljava/lang/Uint160;", (219, 11));
//     methods.insert("java/lang/Uint160#clearBit:(I)Ljava/lang/Uint160;", (219, 12));
//     methods.insert("java/lang/Uint160#flipBit:(I)Ljava/lang/Uint160;", (219, 13));
//     methods.insert("java/lang/Uint160#shiftLeft:(I)Ljava/lang/Uint160;", (219, 14));
//     methods.insert("java/lang/Uint160#shiftRight:(I)Ljava/lang/Uint160;", (219, 15));
//     methods.insert("java/lang/Uint160#inc:()Ljava/lang/Uint160;", (219, 16));
//     methods.insert("java/lang/Uint160#dec:()Ljava/lang/Uint160;", (219, 17));
//     methods.insert("java/lang/Uint160#add:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 18));
//     methods.insert("java/lang/Uint160#addmod:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 19));
//     methods.insert("java/lang/Uint160#sub:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 20));
//     methods.insert("java/lang/Uint160#mul:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 21));
//     methods.insert("java/lang/Uint160#mulmod:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 22));
//     methods.insert("java/lang/Uint160#pow:(I)Ljava/lang/Uint160;", (219, 23));
//     methods.insert("java/lang/Uint160#div:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 24));
//     methods.insert("java/lang/Uint160#mod:(Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 25));
//     methods.insert("java/lang/Uint160#divmod:(Ljava/lang/Uint160;)[Ljava/lang/Uint160;", (219, 26));
//     methods.insert("java/lang/Uint160#add:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 27));
//     methods.insert("java/lang/Uint160#sub:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 28));
//     methods.insert("java/lang/Uint160#mul:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 29));
//     methods.insert("java/lang/Uint160#div:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 30));
//     methods.insert("java/lang/Uint160#mod:(Ljava/lang/Uint160;Ljava/lang/Uint160;)Ljava/lang/Uint160;", (219, 31));
//     methods.insert("java/lang/Uint160#equals:(Ljava/lang/Object;)Z", (219, 32));
//     methods.insert("java/lang/Uint160#flipBit:(I)Ljava/lang/UintType;", (219, 33));
//     methods.insert("java/lang/Uint160#clearBit:(I)Ljava/lang/UintType;", (219, 34));
//     methods.insert("java/lang/Uint160#setBit:(I)Ljava/lang/UintType;", (219, 35));
//     methods.insert("java/lang/Uint160#shiftRight:(I)Ljava/lang/UintType;", (219, 36));
//     methods.insert("java/lang/Uint160#shiftLeft:(I)Ljava/lang/UintType;", (219, 37));
//     methods.insert("java/lang/Uint160#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 38));
//     methods.insert("java/lang/Uint160#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 39));
//     methods.insert("java/lang/Uint160#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 40));
//     methods.insert("java/lang/Uint160#dec:()Ljava/lang/UintType;", (219, 41));
//     methods.insert("java/lang/Uint160#inc:()Ljava/lang/UintType;", (219, 42));
//     methods.insert("java/lang/Uint160#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 43));
//     methods.insert("java/lang/Uint160#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 44));
//     methods.insert("java/lang/Uint160#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 45));
//     methods.insert("java/lang/Uint160#not:()Ljava/lang/UintType;", (219, 46));
//     methods.insert("java/lang/Uint160#pow:(I)Ljava/lang/UintType;", (219, 47));
//     methods.insert("java/lang/Uint160#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 48));
//     methods.insert("java/lang/Uint160#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 49));
//     methods.insert("java/lang/Uint160#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 50));
//     methods.insert("java/lang/Uint160#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (219, 51));
//     methods.insert("java/lang/Uint160#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (219, 52));
//     methods.insert("java/lang/Uint160#<clinit>:()V", (219, 53));
//     methods.insert("java/lang/Uint256#<init>:([I)V", (220, 0));
//     methods.insert("java/lang/Uint256#<init>:([B)V", (220, 1));
//     methods.insert("java/lang/Uint256#<init>:(Ljava/lang/Uint128;)V", (220, 2));
//     methods.insert("java/lang/Uint256#<init>:(Ljava/lang/String;)V", (220, 3));
//     methods.insert("java/lang/Uint256#<init>:(Ljava/lang/String;I)V", (220, 4));
//     methods.insert("java/lang/Uint256#<init>:(Ljava/math/BigInteger;)V", (220, 5));
//     methods.insert("java/lang/Uint256#<init>:(J)V", (220, 6));
//     methods.insert("java/lang/Uint256#not:()Ljava/lang/Uint256;", (220, 7));
//     methods.insert("java/lang/Uint256#and:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 8));
//     methods.insert("java/lang/Uint256#or:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 9));
//     methods.insert("java/lang/Uint256#xor:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 10));
//     methods.insert("java/lang/Uint256#setBit:(I)Ljava/lang/Uint256;", (220, 11));
//     methods.insert("java/lang/Uint256#clearBit:(I)Ljava/lang/Uint256;", (220, 12));
//     methods.insert("java/lang/Uint256#flipBit:(I)Ljava/lang/Uint256;", (220, 13));
//     methods.insert("java/lang/Uint256#shiftLeft:(I)Ljava/lang/Uint256;", (220, 14));
//     methods.insert("java/lang/Uint256#shiftRight:(I)Ljava/lang/Uint256;", (220, 15));
//     methods.insert("java/lang/Uint256#inc:()Ljava/lang/Uint256;", (220, 16));
//     methods.insert("java/lang/Uint256#dec:()Ljava/lang/Uint256;", (220, 17));
//     methods.insert("java/lang/Uint256#add:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 18));
//     methods.insert("java/lang/Uint256#addmod:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 19));
//     methods.insert("java/lang/Uint256#sub:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 20));
//     methods.insert("java/lang/Uint256#mul:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 21));
//     methods.insert("java/lang/Uint256#mulmod:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 22));
//     methods.insert("java/lang/Uint256#pow:(I)Ljava/lang/Uint256;", (220, 23));
//     methods.insert("java/lang/Uint256#div:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 24));
//     methods.insert("java/lang/Uint256#mod:(Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 25));
//     methods.insert("java/lang/Uint256#divmod:(Ljava/lang/Uint256;)[Ljava/lang/Uint256;", (220, 26));
//     methods.insert("java/lang/Uint256#add:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 27));
//     methods.insert("java/lang/Uint256#sub:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 28));
//     methods.insert("java/lang/Uint256#mul:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 29));
//     methods.insert("java/lang/Uint256#div:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 30));
//     methods.insert("java/lang/Uint256#mod:(Ljava/lang/Uint256;Ljava/lang/Uint256;)Ljava/lang/Uint256;", (220, 31));
//     methods.insert("java/lang/Uint256#equals:(Ljava/lang/Object;)Z", (220, 32));
//     methods.insert("java/lang/Uint256#flipBit:(I)Ljava/lang/UintType;", (220, 33));
//     methods.insert("java/lang/Uint256#clearBit:(I)Ljava/lang/UintType;", (220, 34));
//     methods.insert("java/lang/Uint256#setBit:(I)Ljava/lang/UintType;", (220, 35));
//     methods.insert("java/lang/Uint256#shiftRight:(I)Ljava/lang/UintType;", (220, 36));
//     methods.insert("java/lang/Uint256#shiftLeft:(I)Ljava/lang/UintType;", (220, 37));
//     methods.insert("java/lang/Uint256#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 38));
//     methods.insert("java/lang/Uint256#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 39));
//     methods.insert("java/lang/Uint256#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 40));
//     methods.insert("java/lang/Uint256#dec:()Ljava/lang/UintType;", (220, 41));
//     methods.insert("java/lang/Uint256#inc:()Ljava/lang/UintType;", (220, 42));
//     methods.insert("java/lang/Uint256#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 43));
//     methods.insert("java/lang/Uint256#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 44));
//     methods.insert("java/lang/Uint256#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 45));
//     methods.insert("java/lang/Uint256#not:()Ljava/lang/UintType;", (220, 46));
//     methods.insert("java/lang/Uint256#pow:(I)Ljava/lang/UintType;", (220, 47));
//     methods.insert("java/lang/Uint256#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 48));
//     methods.insert("java/lang/Uint256#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 49));
//     methods.insert("java/lang/Uint256#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 50));
//     methods.insert("java/lang/Uint256#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (220, 51));
//     methods.insert("java/lang/Uint256#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (220, 52));
//     methods.insert("java/lang/Uint256#<clinit>:()V", (220, 53));
//     methods.insert("java/lang/Uint32#<init>:([I)V", (221, 0));
//     methods.insert("java/lang/Uint32#<init>:([B)V", (221, 1));
//     methods.insert("java/lang/Uint32#<init>:(Ljava/lang/String;)V", (221, 2));
//     methods.insert("java/lang/Uint32#<init>:(Ljava/lang/String;I)V", (221, 3));
//     methods.insert("java/lang/Uint32#<init>:(Ljava/math/BigInteger;)V", (221, 4));
//     methods.insert("java/lang/Uint32#<init>:(J)V", (221, 5));
//     methods.insert("java/lang/Uint32#<init>:(I)V", (221, 6));
//     methods.insert("java/lang/Uint32#not:()Ljava/lang/Uint32;", (221, 7));
//     methods.insert("java/lang/Uint32#and:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 8));
//     methods.insert("java/lang/Uint32#or:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 9));
//     methods.insert("java/lang/Uint32#xor:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 10));
//     methods.insert("java/lang/Uint32#setBit:(I)Ljava/lang/Uint32;", (221, 11));
//     methods.insert("java/lang/Uint32#clearBit:(I)Ljava/lang/Uint32;", (221, 12));
//     methods.insert("java/lang/Uint32#flipBit:(I)Ljava/lang/Uint32;", (221, 13));
//     methods.insert("java/lang/Uint32#shiftLeft:(I)Ljava/lang/Uint32;", (221, 14));
//     methods.insert("java/lang/Uint32#shiftRight:(I)Ljava/lang/Uint32;", (221, 15));
//     methods.insert("java/lang/Uint32#inc:()Ljava/lang/Uint32;", (221, 16));
//     methods.insert("java/lang/Uint32#dec:()Ljava/lang/Uint32;", (221, 17));
//     methods.insert("java/lang/Uint32#add:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 18));
//     methods.insert("java/lang/Uint32#addmod:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 19));
//     methods.insert("java/lang/Uint32#sub:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 20));
//     methods.insert("java/lang/Uint32#mul:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 21));
//     methods.insert("java/lang/Uint32#mulmod:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 22));
//     methods.insert("java/lang/Uint32#pow:(I)Ljava/lang/Uint32;", (221, 23));
//     methods.insert("java/lang/Uint32#div:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 24));
//     methods.insert("java/lang/Uint32#mod:(Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 25));
//     methods.insert("java/lang/Uint32#divmod:(Ljava/lang/Uint32;)[Ljava/lang/Uint32;", (221, 26));
//     methods.insert("java/lang/Uint32#add:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 27));
//     methods.insert("java/lang/Uint32#sub:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 28));
//     methods.insert("java/lang/Uint32#mul:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 29));
//     methods.insert("java/lang/Uint32#div:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 30));
//     methods.insert("java/lang/Uint32#mod:(Ljava/lang/Uint32;Ljava/lang/Uint32;)Ljava/lang/Uint32;", (221, 31));
//     methods.insert("java/lang/Uint32#equals:(Ljava/lang/Object;)Z", (221, 32));
//     methods.insert("java/lang/Uint32#flipBit:(I)Ljava/lang/UintType;", (221, 33));
//     methods.insert("java/lang/Uint32#clearBit:(I)Ljava/lang/UintType;", (221, 34));
//     methods.insert("java/lang/Uint32#setBit:(I)Ljava/lang/UintType;", (221, 35));
//     methods.insert("java/lang/Uint32#shiftRight:(I)Ljava/lang/UintType;", (221, 36));
//     methods.insert("java/lang/Uint32#shiftLeft:(I)Ljava/lang/UintType;", (221, 37));
//     methods.insert("java/lang/Uint32#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 38));
//     methods.insert("java/lang/Uint32#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 39));
//     methods.insert("java/lang/Uint32#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 40));
//     methods.insert("java/lang/Uint32#dec:()Ljava/lang/UintType;", (221, 41));
//     methods.insert("java/lang/Uint32#inc:()Ljava/lang/UintType;", (221, 42));
//     methods.insert("java/lang/Uint32#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 43));
//     methods.insert("java/lang/Uint32#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 44));
//     methods.insert("java/lang/Uint32#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 45));
//     methods.insert("java/lang/Uint32#not:()Ljava/lang/UintType;", (221, 46));
//     methods.insert("java/lang/Uint32#pow:(I)Ljava/lang/UintType;", (221, 47));
//     methods.insert("java/lang/Uint32#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 48));
//     methods.insert("java/lang/Uint32#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 49));
//     methods.insert("java/lang/Uint32#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 50));
//     methods.insert("java/lang/Uint32#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (221, 51));
//     methods.insert("java/lang/Uint32#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (221, 52));
//     methods.insert("java/lang/Uint32#<clinit>:()V", (221, 53));
//     methods.insert("java/lang/Uint64#<init>:([I)V", (222, 0));
//     methods.insert("java/lang/Uint64#<init>:([B)V", (222, 1));
//     methods.insert("java/lang/Uint64#<init>:(Ljava/lang/String;)V", (222, 2));
//     methods.insert("java/lang/Uint64#<init>:(Ljava/lang/String;I)V", (222, 3));
//     methods.insert("java/lang/Uint64#<init>:(Ljava/math/BigInteger;)V", (222, 4));
//     methods.insert("java/lang/Uint64#<init>:(J)V", (222, 5));
//     methods.insert("java/lang/Uint64#not:()Ljava/lang/Uint64;", (222, 6));
//     methods.insert("java/lang/Uint64#and:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 7));
//     methods.insert("java/lang/Uint64#or:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 8));
//     methods.insert("java/lang/Uint64#xor:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 9));
//     methods.insert("java/lang/Uint64#setBit:(I)Ljava/lang/Uint64;", (222, 10));
//     methods.insert("java/lang/Uint64#clearBit:(I)Ljava/lang/Uint64;", (222, 11));
//     methods.insert("java/lang/Uint64#flipBit:(I)Ljava/lang/Uint64;", (222, 12));
//     methods.insert("java/lang/Uint64#shiftLeft:(I)Ljava/lang/Uint64;", (222, 13));
//     methods.insert("java/lang/Uint64#shiftRight:(I)Ljava/lang/Uint64;", (222, 14));
//     methods.insert("java/lang/Uint64#inc:()Ljava/lang/Uint64;", (222, 15));
//     methods.insert("java/lang/Uint64#dec:()Ljava/lang/Uint64;", (222, 16));
//     methods.insert("java/lang/Uint64#add:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 17));
//     methods.insert("java/lang/Uint64#addmod:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 18));
//     methods.insert("java/lang/Uint64#sub:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 19));
//     methods.insert("java/lang/Uint64#mul:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 20));
//     methods.insert("java/lang/Uint64#mulmod:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 21));
//     methods.insert("java/lang/Uint64#pow:(I)Ljava/lang/Uint64;", (222, 22));
//     methods.insert("java/lang/Uint64#div:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 23));
//     methods.insert("java/lang/Uint64#mod:(Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 24));
//     methods.insert("java/lang/Uint64#divmod:(Ljava/lang/Uint64;)[Ljava/lang/Uint64;", (222, 25));
//     methods.insert("java/lang/Uint64#add:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 26));
//     methods.insert("java/lang/Uint64#sub:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 27));
//     methods.insert("java/lang/Uint64#mul:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 28));
//     methods.insert("java/lang/Uint64#div:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 29));
//     methods.insert("java/lang/Uint64#mod:(Ljava/lang/Uint64;Ljava/lang/Uint64;)Ljava/lang/Uint64;", (222, 30));
//     methods.insert("java/lang/Uint64#equals:(Ljava/lang/Object;)Z", (222, 31));
//     methods.insert("java/lang/Uint64#flipBit:(I)Ljava/lang/UintType;", (222, 32));
//     methods.insert("java/lang/Uint64#clearBit:(I)Ljava/lang/UintType;", (222, 33));
//     methods.insert("java/lang/Uint64#setBit:(I)Ljava/lang/UintType;", (222, 34));
//     methods.insert("java/lang/Uint64#shiftRight:(I)Ljava/lang/UintType;", (222, 35));
//     methods.insert("java/lang/Uint64#shiftLeft:(I)Ljava/lang/UintType;", (222, 36));
//     methods.insert("java/lang/Uint64#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 37));
//     methods.insert("java/lang/Uint64#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 38));
//     methods.insert("java/lang/Uint64#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 39));
//     methods.insert("java/lang/Uint64#dec:()Ljava/lang/UintType;", (222, 40));
//     methods.insert("java/lang/Uint64#inc:()Ljava/lang/UintType;", (222, 41));
//     methods.insert("java/lang/Uint64#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 42));
//     methods.insert("java/lang/Uint64#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 43));
//     methods.insert("java/lang/Uint64#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 44));
//     methods.insert("java/lang/Uint64#not:()Ljava/lang/UintType;", (222, 45));
//     methods.insert("java/lang/Uint64#pow:(I)Ljava/lang/UintType;", (222, 46));
//     methods.insert("java/lang/Uint64#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 47));
//     methods.insert("java/lang/Uint64#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 48));
//     methods.insert("java/lang/Uint64#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 49));
//     methods.insert("java/lang/Uint64#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (222, 50));
//     methods.insert("java/lang/Uint64#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (222, 51));
//     methods.insert("java/lang/Uint64#<clinit>:()V", (222, 52));
//     methods.insert("java/lang/Uint8#<init>:(I)V", (223, 0));
//     methods.insert("java/lang/Uint8#<init>:(Ljava/math/BigInteger;)V", (223, 1));
//     methods.insert("java/lang/Uint8#add:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 2));
//     methods.insert("java/lang/Uint8#sub:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 3));
//     methods.insert("java/lang/Uint8#mul:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 4));
//     methods.insert("java/lang/Uint8#div:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 5));
//     methods.insert("java/lang/Uint8#mod:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 6));
//     methods.insert("java/lang/Uint8#and:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 7));
//     methods.insert("java/lang/Uint8#or:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 8));
//     methods.insert("java/lang/Uint8#xor:(Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 9));
//     methods.insert("java/lang/Uint8#not:()Ljava/lang/Uint8;", (223, 10));
//     methods.insert("java/lang/Uint8#shiftRight:(I)Ljava/lang/Uint8;", (223, 11));
//     methods.insert("java/lang/Uint8#shiftLeft:(I)Ljava/lang/Uint8;", (223, 12));
//     methods.insert("java/lang/Uint8#setBit:(I)Ljava/lang/Uint8;", (223, 13));
//     methods.insert("java/lang/Uint8#clearBit:(I)Ljava/lang/Uint8;", (223, 14));
//     methods.insert("java/lang/Uint8#flipBit:(I)Ljava/lang/Uint8;", (223, 15));
//     methods.insert("java/lang/Uint8#inc:()Ljava/lang/Uint8;", (223, 16));
//     methods.insert("java/lang/Uint8#dec:()Ljava/lang/Uint8;", (223, 17));
//     methods.insert("java/lang/Uint8#pow:(I)Ljava/lang/Uint8;", (223, 18));
//     methods.insert("java/lang/Uint8#divmod:(Ljava/lang/Uint8;)[Ljava/lang/Uint8;", (223, 19));
//     methods.insert("java/lang/Uint8#mulmod:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 20));
//     methods.insert("java/lang/Uint8#addmod:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 21));
//     methods.insert("java/lang/Uint8#add:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 22));
//     methods.insert("java/lang/Uint8#sub:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 23));
//     methods.insert("java/lang/Uint8#mul:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 24));
//     methods.insert("java/lang/Uint8#div:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 25));
//     methods.insert("java/lang/Uint8#mod:(Ljava/lang/Uint8;Ljava/lang/Uint8;)Ljava/lang/Uint8;", (223, 26));
//     methods.insert("java/lang/Uint8#flipBit:(I)Ljava/lang/UintType;", (223, 27));
//     methods.insert("java/lang/Uint8#clearBit:(I)Ljava/lang/UintType;", (223, 28));
//     methods.insert("java/lang/Uint8#setBit:(I)Ljava/lang/UintType;", (223, 29));
//     methods.insert("java/lang/Uint8#shiftRight:(I)Ljava/lang/UintType;", (223, 30));
//     methods.insert("java/lang/Uint8#shiftLeft:(I)Ljava/lang/UintType;", (223, 31));
//     methods.insert("java/lang/Uint8#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 32));
//     methods.insert("java/lang/Uint8#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 33));
//     methods.insert("java/lang/Uint8#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 34));
//     methods.insert("java/lang/Uint8#dec:()Ljava/lang/UintType;", (223, 35));
//     methods.insert("java/lang/Uint8#inc:()Ljava/lang/UintType;", (223, 36));
//     methods.insert("java/lang/Uint8#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 37));
//     methods.insert("java/lang/Uint8#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 38));
//     methods.insert("java/lang/Uint8#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 39));
//     methods.insert("java/lang/Uint8#not:()Ljava/lang/UintType;", (223, 40));
//     methods.insert("java/lang/Uint8#pow:(I)Ljava/lang/UintType;", (223, 41));
//     methods.insert("java/lang/Uint8#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 42));
//     methods.insert("java/lang/Uint8#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 43));
//     methods.insert("java/lang/Uint8#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 44));
//     methods.insert("java/lang/Uint8#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (223, 45));
//     methods.insert("java/lang/Uint8#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (223, 46));
//     methods.insert("java/lang/Uint8#<clinit>:()V", (223, 47));
//     methods.insert("java/lang/UintType#<init>:(J)V", (224, 0));
//     methods.insert("java/lang/UintType#<init>:([I)V", (224, 1));
//     methods.insert("java/lang/UintType#<init>:([II)V", (224, 2));
//     methods.insert("java/lang/UintType#<init>:(Ljava/lang/UintType;I)V", (224, 3));
//     methods.insert("java/lang/UintType#<init>:(Ljava/lang/String;II)V", (224, 4));
//     methods.insert("java/lang/UintType#<init>:(Ljava/math/BigInteger;I)V", (224, 5));
//     methods.insert("java/lang/UintType#<init>:([BLjava/lang/UintType;)V", (224, 6));
//     methods.insert("java/lang/UintType#divmod:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (224, 7));
//     methods.insert("java/lang/UintType#div:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 8));
//     methods.insert("java/lang/UintType#mod:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 9));
//     methods.insert("java/lang/UintType#mul:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 10));
//     methods.insert("java/lang/UintType#mulmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 11));
//     methods.insert("java/lang/UintType#pow:(I)Ljava/lang/UintType;", (224, 12));
//     methods.insert("java/lang/UintType#not:()Ljava/lang/UintType;", (224, 13));
//     methods.insert("java/lang/UintType#and:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 14));
//     methods.insert("java/lang/UintType#or:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 15));
//     methods.insert("java/lang/UintType#xor:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 16));
//     methods.insert("java/lang/UintType#inc:()Ljava/lang/UintType;", (224, 17));
//     methods.insert("java/lang/UintType#dec:()Ljava/lang/UintType;", (224, 18));
//     methods.insert("java/lang/UintType#add:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 19));
//     methods.insert("java/lang/UintType#addmod:(Ljava/lang/UintType;Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 20));
//     methods.insert("java/lang/UintType#sub:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 21));
//     methods.insert("java/lang/UintType#shiftLeft:(I)Ljava/lang/UintType;", (224, 22));
//     methods.insert("java/lang/UintType#shiftRight:(I)Ljava/lang/UintType;", (224, 23));
//     methods.insert("java/lang/UintType#setBit:(I)Ljava/lang/UintType;", (224, 24));
//     methods.insert("java/lang/UintType#clearBit:(I)Ljava/lang/UintType;", (224, 25));
//     methods.insert("java/lang/UintType#flipBit:(I)Ljava/lang/UintType;", (224, 26));
//     methods.insert("java/lang/UintType#testBit:(I)Z", (224, 27));
//     methods.insert("java/lang/UintType#divideAndRemainder:(Ljava/lang/UintType;)[Ljava/lang/UintType;", (224, 28));
//     methods.insert("java/lang/UintType#remainder:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 29));
//     methods.insert("java/lang/UintType#bitLength:()I", (224, 30));
//     methods.insert("java/lang/UintType#isZero:()Z", (224, 31));
//     methods.insert("java/lang/UintType#getLowestSetBit:()I", (224, 32));
//     methods.insert("java/lang/UintType#hashCode:()I", (224, 33));
//     methods.insert("java/lang/UintType#equals:(Ljava/lang/Object;)Z", (224, 34));
//     methods.insert("java/lang/UintType#compareTo:(Ljava/lang/UintType;)I", (224, 35));
//     methods.insert("java/lang/UintType#max:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 36));
//     methods.insert("java/lang/UintType#min:(Ljava/lang/UintType;)Ljava/lang/UintType;", (224, 37));
//     methods.insert("java/lang/UintType#intValue:()I", (224, 38));
//     methods.insert("java/lang/UintType#longValue:()J", (224, 39));
//     methods.insert("java/lang/UintType#shortValue:()S", (224, 40));
//     methods.insert("java/lang/UintType#byteValue:()B", (224, 41));
//     methods.insert("java/lang/UintType#intValueExact:()I", (224, 42));
//     methods.insert("java/lang/UintType#longValueExact:()J", (224, 43));
//     methods.insert("java/lang/UintType#shortValueExact:()S", (224, 44));
//     methods.insert("java/lang/UintType#byteValueExact:()B", (224, 45));
//     methods.insert("java/lang/UintType#toBigInteger:()Ljava/math/BigInteger;", (224, 46));
//     methods.insert("java/lang/UintType#ceil:(II)I", (224, 47));
//     methods.insert("java/lang/UintType#toByteArray:()[B", (224, 48));
//     methods.insert("java/lang/UintType#toIntArray:()[I", (224, 49));
//     methods.insert("java/lang/UintType#toString:()Ljava/lang/String;", (224, 50));
//     methods.insert("java/lang/UintType#toString:(I)Ljava/lang/String;", (224, 51));
//     methods.insert("java/lang/UintType#compareTo:(Ljava/lang/Object;)I", (224, 52));
//     methods.insert("java/lang/Unpaused#<init>:(Ljava/lang/Address;)V", (225, 0));
//     methods.insert("java/lang/UnsatisfiedLinkError#<init>:(Ljava/lang/String;)V", (226, 0));
//     methods.insert("java/lang/UnsatisfiedLinkError#<init>:()V", (226, 1));
//     methods.insert("java/lang/UnsupportedOperationException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (227, 0));
//     methods.insert("java/lang/UnsupportedOperationException#<init>:(Ljava/lang/String;)V", (227, 1));
//     methods.insert("java/lang/UnsupportedOperationException#<init>:(Ljava/lang/Throwable;)V", (227, 2));
//     methods.insert("java/lang/UnsupportedOperationException#<init>:()V", (227, 3));
//     methods.insert("java/lang/VirtualMachineError#<init>:(Ljava/lang/String;)V", (228, 0));
//     methods.insert("java/lang/VirtualMachineError#<init>:()V", (228, 1));
//     methods.insert("java/lang/Void#<init>:()V", (229, 0));
//     methods.insert("java/lang/Void#<clinit>:()V", (229, 1));
//     methods.insert("java/lang/annotation/Annotation#annotationType:()Ljava/lang/Class;", (230, 0));
//     methods.insert("java/lang/annotation/ElementType#values:()[Ljava/lang/annotation/ElementType;", (232, 0));
//     methods.insert("java/lang/annotation/ElementType#valueOf:(Ljava/lang/String;)Ljava/lang/annotation/ElementType;", (232, 1));
//     methods.insert("java/lang/annotation/ElementType#<init>:(Ljava/lang/String;I)V", (232, 2));
//     methods.insert("java/lang/annotation/ElementType#<clinit>:()V", (232, 3));
//     methods.insert("java/lang/annotation/Retention#value:()Ljava/lang/annotation/RetentionPolicy;", (237, 0));
//     methods.insert("java/lang/annotation/RetentionPolicy#values:()[Ljava/lang/annotation/RetentionPolicy;", (238, 0));
//     methods.insert("java/lang/annotation/RetentionPolicy#valueOf:(Ljava/lang/String;)Ljava/lang/annotation/RetentionPolicy;", (238, 1));
//     methods.insert("java/lang/annotation/RetentionPolicy#<init>:(Ljava/lang/String;I)V", (238, 2));
//     methods.insert("java/lang/annotation/RetentionPolicy#<clinit>:()V", (238, 3));
//     methods.insert("java/lang/annotation/Target#value:()[Ljava/lang/annotation/ElementType;", (239, 0));
//     methods.insert("java/lang/bytes/Division#<init>:()V", (242, 0));
//     methods.insert("java/lang/bytes/Division#div:([II)[[I", (242, 1));
//     methods.insert("java/lang/bytes/Division#div:([IJ)[[I", (242, 2));
//     methods.insert("java/lang/bytes/Division#div:([I[I)[[I", (242, 3));
//     methods.insert("java/lang/bytes/Division#D3:(I[IIJI)I", (242, 4));
//     methods.insert("java/lang/bytes/Division#D4_D5:(I[I[II)I", (242, 5));
//     methods.insert("java/lang/bytes/Division#D4_D5:(I[IIII)I", (242, 6));
//     methods.insert("java/lang/bytes/Division#mulsub:([I[IJII)I", (242, 7));
//     methods.insert("java/lang/bytes/Division#mulsub:([IIIJI)I", (242, 8));
//     methods.insert("java/lang/bytes/Division#divadd:([I[II)I", (242, 9));
//     methods.insert("java/lang/bytes/Division#divadd:(JJ[II)I", (242, 10));
//     methods.insert("java/lang/bytes/Division#divone:(JJ)J", (242, 11));
//     methods.insert("java/lang/bytes/Division#lshunt:([II)V", (242, 12));
//     methods.insert("java/lang/bytes/Division#rshunt:([II)V", (242, 13));
//     methods.insert("java/lang/bytes/Division#rshift:([II)V", (242, 14));
//     methods.insert("java/lang/bytes/Division#copyshift:([II[III)V", (242, 15));
//     methods.insert("java/lang/bytes/Division#<clinit>:()V", (242, 16));
//     methods.insert("java/lang/bytes/Hex#<init>:()V", (243, 0));
//     methods.insert("java/lang/bytes/Hex#encodeQuantity:(Ljava/math/BigInteger;)Ljava/lang/String;", (243, 1));
//     methods.insert("java/lang/bytes/Hex#decodeQuantity:(Ljava/lang/String;)Ljava/math/BigInteger;", (243, 2));
//     methods.insert("java/lang/bytes/Hex#parsePaddedNumberHex:(Ljava/lang/String;)Ljava/math/BigInteger;", (243, 3));
//     methods.insert("java/lang/bytes/Hex#isLongValue:(Ljava/lang/String;)Z", (243, 4));
//     methods.insert("java/lang/bytes/Hex#isValidHexQuantity:(Ljava/lang/String;)Z", (243, 5));
//     methods.insert("java/lang/bytes/Hex#cleanHexPrefix:(Ljava/lang/String;)Ljava/lang/String;", (243, 6));
//     methods.insert("java/lang/bytes/Hex#prependHexPrefix:(Ljava/lang/String;)Ljava/lang/String;", (243, 7));
//     methods.insert("java/lang/bytes/Hex#containsHexPrefix:(Ljava/lang/String;)Z", (243, 8));
//     methods.insert("java/lang/bytes/Hex#toBigInt:([BII)Ljava/math/BigInteger;", (243, 9));
//     methods.insert("java/lang/bytes/Hex#toBigInt:([B)Ljava/math/BigInteger;", (243, 10));
//     methods.insert("java/lang/bytes/Hex#toBigInt:(Ljava/lang/String;)Ljava/math/BigInteger;", (243, 11));
//     methods.insert("java/lang/bytes/Hex#toBigIntNoPrefix:(Ljava/lang/String;)Ljava/math/BigInteger;", (243, 12));
//     methods.insert("java/lang/bytes/Hex#toHexStringWithPrefix:(Ljava/math/BigInteger;)Ljava/lang/String;", (243, 13));
//     methods.insert("java/lang/bytes/Hex#toHexStringNoPrefix:(Ljava/math/BigInteger;)Ljava/lang/String;", (243, 14));
//     methods.insert("java/lang/bytes/Hex#toHexStringNoPrefix:([B)Ljava/lang/String;", (243, 15));
//     methods.insert("java/lang/bytes/Hex#toHexStringWithPrefixZeroPadded:(Ljava/math/BigInteger;I)Ljava/lang/String;", (243, 16));
//     methods.insert("java/lang/bytes/Hex#toHexStringWithPrefixSafe:(Ljava/math/BigInteger;)Ljava/lang/String;", (243, 17));
//     methods.insert("java/lang/bytes/Hex#toHexStringNoPrefixZeroPadded:(Ljava/math/BigInteger;I)Ljava/lang/String;", (243, 18));
//     methods.insert("java/lang/bytes/Hex#toHexStringZeroPadded:(Ljava/math/BigInteger;IZ)Ljava/lang/String;", (243, 19));
//     methods.insert("java/lang/bytes/Hex#toBytesPadded:(Ljava/math/BigInteger;I)[B", (243, 20));
//     methods.insert("java/lang/bytes/Hex#hexStringToByteArray:(Ljava/lang/String;)[B", (243, 21));
//     methods.insert("java/lang/bytes/Hex#toHexString:([BIIZ)Ljava/lang/String;", (243, 22));
//     methods.insert("java/lang/bytes/Hex#toHexCharArray:([BII)[C", (243, 23));
//     methods.insert("java/lang/bytes/Hex#toHexString:([B)Ljava/lang/String;", (243, 24));
//     methods.insert("java/lang/bytes/Hex#asByte:(II)B", (243, 25));
//     methods.insert("java/lang/bytes/Hex#removeDoubleQuotes:(Ljava/lang/String;)Ljava/lang/String;", (243, 26));
//     methods.insert("java/lang/bytes/Hex#isEmpty:(Ljava/lang/String;)Z", (243, 27));
//     methods.insert("java/lang/bytes/Hex#zeros:(I)Ljava/lang/String;", (243, 28));
//     methods.insert("java/lang/bytes/Hex#repeat:(CI)Ljava/lang/String;", (243, 29));
//     methods.insert("java/lang/bytes/Hex#<clinit>:()V", (243, 30));
//     methods.insert("java/lang/bytes/Type#bytes32PaddedLength:()I", (244, 0));
//     methods.insert("java/lang/bytes/Type#getValue:()Ljava/lang/Object;", (244, 1));
//     methods.insert("java/lang/bytes/Type#getTypeAsString:()Ljava/lang/String;", (244, 2));
//     methods.insert("java/lang/contract/Contract#<init>:()V", (245, 0));
//     methods.insert("java/lang/contract/ERC20#<init>:(Ljava/lang/String;Ljava/lang/String;)V", (246, 0));
//     methods.insert("java/lang/contract/ERC20#name:()Ljava/lang/String;", (246, 1));
//     methods.insert("java/lang/contract/ERC20#symbol:()Ljava/lang/String;", (246, 2));
//     methods.insert("java/lang/contract/ERC20#decimals:()Ljava/lang/Uint8;", (246, 3));
//     methods.insert("java/lang/contract/ERC20#owner:()Ljava/lang/Address;", (246, 4));
//     methods.insert("java/lang/contract/ERC20#onlyOwner:()V", (246, 5));
//     methods.insert("java/lang/contract/ERC20#totalSupply:()Ljava/lang/Uint256;", (246, 6));
//     methods.insert("java/lang/contract/ERC20#balanceOf:(Ljava/lang/Address;)Ljava/lang/Uint256;", (246, 7));
//     methods.insert("java/lang/contract/ERC20#transfer:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (246, 8));
//     methods.insert("java/lang/contract/ERC20#allowance:(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/Uint256;", (246, 9));
//     methods.insert("java/lang/contract/ERC20#approve:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (246, 10));
//     methods.insert("java/lang/contract/ERC20#transferFrom:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (246, 11));
//     methods.insert("java/lang/contract/ERC20#_getAllowanceKey:(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/String;", (246, 12));
//     methods.insert("java/lang/contract/ERC20#_transfer:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 13));
//     methods.insert("java/lang/contract/ERC20#_update:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 14));
//     methods.insert("java/lang/contract/ERC20#_mint:(Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 15));
//     methods.insert("java/lang/contract/ERC20#mint:(Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 16));
//     methods.insert("java/lang/contract/ERC20#_burn:(Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 17));
//     methods.insert("java/lang/contract/ERC20#burn:(Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 18));
//     methods.insert("java/lang/contract/ERC20#_approve:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 19));
//     methods.insert("java/lang/contract/ERC20#_approve:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;Z)V", (246, 20));
//     methods.insert("java/lang/contract/ERC20#_spendAllowance:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)V", (246, 21));
//     methods.insert("java/lang/contract/ERC20#increaseAllowance:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (246, 22));
//     methods.insert("java/lang/contract/ERC20#decreaseAllowance:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (246, 23));
//     methods.insert("java/lang/contract/ERC20#paused:()Ljava/lang/Bool;", (246, 24));
//     methods.insert("java/lang/contract/ERC20#pause:()V", (246, 25));
//     methods.insert("java/lang/contract/ERC20#unpause:()V", (246, 26));
//     methods.insert("java/lang/contract/ERC20#transferOwnership:(Ljava/lang/Address;)V", (246, 27));
//     methods.insert("java/lang/contract/ERC20#renounceOwnership:()V", (246, 28));
//     methods.insert("java/lang/contract/ERC20InsufficientAllowance#<init>:(Ljava/lang/Address;Ljava/lang/Uint256;Ljava/lang/Uint256;)V", (247, 0));
//     methods.insert("java/lang/contract/ERC20InsufficientBalance#<init>:(Ljava/lang/Address;Ljava/lang/Uint256;Ljava/lang/Uint256;)V", (248, 0));
//     methods.insert("java/lang/contract/ERC20InvalidAmount#<init>:(Ljava/lang/Uint256;)V", (249, 0));
//     methods.insert("java/lang/contract/ERC20InvalidApprover#<init>:(Ljava/lang/Address;)V", (250, 0));
//     methods.insert("java/lang/contract/ERC20InvalidReceiver#<init>:(Ljava/lang/Address;)V", (251, 0));
//     methods.insert("java/lang/contract/ERC20InvalidSender#<init>:(Ljava/lang/Address;)V", (252, 0));
//     methods.insert("java/lang/contract/ERC20InvalidSpender#<init>:(Ljava/lang/Address;)V", (253, 0));
//     methods.insert("java/lang/contract/ERC20TokenPaused#<init>:()V", (254, 0));
//     methods.insert("java/lang/contract/IERC20#totalSupply:()Ljava/lang/Uint256;", (255, 0));
//     methods.insert("java/lang/contract/IERC20#balanceOf:(Ljava/lang/Address;)Ljava/lang/Uint256;", (255, 1));
//     methods.insert("java/lang/contract/IERC20#transfer:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (255, 2));
//     methods.insert("java/lang/contract/IERC20#allowance:(Ljava/lang/Address;Ljava/lang/Address;)Ljava/lang/Uint256;", (255, 3));
//     methods.insert("java/lang/contract/IERC20#approve:(Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (255, 4));
//     methods.insert("java/lang/contract/IERC20#transferFrom:(Ljava/lang/Address;Ljava/lang/Address;Ljava/lang/Uint256;)Ljava/lang/Bool;", (255, 5));
//     methods.insert("java/lang/contract/IERC20Metadata#name:()Ljava/lang/String;", (257, 0));
//     methods.insert("java/lang/contract/IERC20Metadata#symbol:()Ljava/lang/String;", (257, 1));
//     methods.insert("java/lang/contract/IERC20Metadata#decimals:()Ljava/lang/Uint8;", (257, 2));
//     methods.insert("java/lang/contract/OnlyOwner#<init>:(Ljava/lang/Address;)V", (258, 0));
//     methods.insert("java/lang/invoke/MethodHandle#<init>:(ILjava/lang/ClassLoader;Ljava/base/VMMethod;)V", (259, 0));
//     methods.insert("java/lang/invoke/MethodHandle#<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (259, 1));
//     methods.insert("java/lang/invoke/MethodHandle#toString:()Ljava/lang/String;", (259, 2));
//     methods.insert("java/lang/invoke/MethodHandle#type:()Ljava/lang/invoke/MethodType;", (259, 3));
//     methods.insert("java/lang/invoke/MethodHandles#<init>:()V", (260, 0));
//     methods.insert("java/lang/invoke/MethodHandles#lookup:()Ljava/lang/invoke/MethodHandlesLookup;", (260, 1));
//     methods.insert("java/lang/invoke/MethodHandlesLookup#<init>:(Ljava/base/VMClass;I)V", (261, 0));
//     methods.insert("java/lang/invoke/MethodHandlesLookup#toString:()Ljava/lang/String;", (261, 1));
//     methods.insert("java/lang/invoke/MethodType#<init>:(Ljava/lang/ClassLoader;[B)V", (262, 0));
//     methods.insert("java/lang/invoke/MethodType#<init>:(Ljava/lang/String;)V", (262, 1));
//     methods.insert("java/lang/invoke/MethodType#toMethodDescriptorString:()Ljava/lang/String;", (262, 2));
//     methods.insert("java/lang/invoke/MethodType#spec:(Ljava/lang/Class;)Ljava/lang/String;", (262, 3));
//     methods.insert("java/lang/invoke/MethodType#<init>:(Ljava/lang/Class;[Ljava/lang/Class;)V", (262, 4));
//     methods.insert("java/lang/invoke/MethodType#methodType:(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", (262, 5));
//     methods.insert("java/lang/invoke/MethodType#methodType:(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", (262, 6));
//     methods.insert("java/lang/invoke/MethodType#toString:()Ljava/lang/String;", (262, 7));
//     methods.insert("java/lang/invoke/MethodType#footprint:()I", (262, 8));
//     methods.insert("java/lang/invoke/MethodType#returnType:()Ljava/lang/Class;", (262, 9));
//     methods.insert("java/lang/invoke/MethodType#parameterArray:()[Ljava/lang/Class;", (262, 10));
//     methods.insert("java/lang/invoke/MethodType#parameters:()Ljava/lang/Iterable;", (262, 11));
//     methods.insert("java/lang/invoke/MethodType#result:()Ljava/lang/invoke/MethodTypeResult;", (262, 12));
//     methods.insert("java/lang/invoke/MethodType#type:(Ljava/lang/String;)Ljava/lang/invoke/MethodTypeType;", (262, 13));
//     methods.insert("java/lang/invoke/MethodType#<clinit>:()V", (262, 14));
//     methods.insert("java/lang/invoke/MethodTypeParameter#<init>:(IILjava/lang/String;Ljava/lang/Class;I)V", (263, 0));
//     methods.insert("java/lang/invoke/MethodTypeParameter#index:()I", (263, 1));
//     methods.insert("java/lang/invoke/MethodTypeParameter#position:()I", (263, 2));
//     methods.insert("java/lang/invoke/MethodTypeParameter#spec:()Ljava/lang/String;", (263, 3));
//     methods.insert("java/lang/invoke/MethodTypeParameter#type:()Ljava/lang/Class;", (263, 4));
//     methods.insert("java/lang/invoke/MethodTypeParameter#load:()I", (263, 5));
//     methods.insert("java/lang/invoke/MethodTypeResult#<init>:(Ljava/lang/String;Ljava/lang/Class;I)V", (264, 0));
//     methods.insert("java/lang/invoke/MethodTypeResult#return_:()I", (264, 1));
//     methods.insert("java/lang/invoke/MethodTypeResult#spec:()Ljava/lang/String;", (264, 2));
//     methods.insert("java/lang/invoke/MethodTypeResult#type:()Ljava/lang/Class;", (264, 3));
//     methods.insert("java/lang/invoke/MethodTypeType#values:()[Ljava/lang/invoke/MethodTypeType;", (265, 0));
//     methods.insert("java/lang/invoke/MethodTypeType#valueOf:(Ljava/lang/String;)Ljava/lang/invoke/MethodTypeType;", (265, 1));
//     methods.insert("java/lang/invoke/MethodTypeType#<init>:(Ljava/lang/String;IIII)V", (265, 2));
//     methods.insert("java/lang/invoke/MethodTypeType#<clinit>:()V", (265, 3));
//     methods.insert("java/lang/invoke/MethodTypeTypeSpec#type:()Ljava/lang/Class;", (266, 0));
//     methods.insert("java/lang/invoke/MethodTypeTypeSpec#spec:()Ljava/lang/String;", (266, 1));
//     methods.insert("java/lang/reflect/AccessibleObject#<init>:()V", (267, 0));
//     methods.insert("java/lang/reflect/AccessibleObject#isAnnotationPresent:(Ljava/lang/Class;)Z", (267, 1));
//     methods.insert("java/lang/reflect/AccessibleObject#isAccessible:()Z", (267, 2));
//     methods.insert("java/lang/reflect/AccessibleObject#setAccessible:(Z)V", (267, 3));
//     methods.insert("java/lang/reflect/AccessibleObject#setAccessible:([Ljava/lang/reflect/AccessibleObject;Z)V", (267, 4));
//     methods.insert("java/lang/reflect/AnnotatedElement#isAnnotationPresent:(Ljava/lang/Class;)Z", (268, 0));
//     methods.insert("java/lang/reflect/AnnotatedElement#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", (268, 1));
//     methods.insert("java/lang/reflect/AnnotatedElement#getAnnotations:()[Ljava/lang/annotation/Annotation;", (268, 2));
//     methods.insert("java/lang/reflect/AnnotatedElement#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;", (268, 3));
//     methods.insert("java/lang/reflect/Array#<init>:()V", (269, 0));
//     methods.insert("java/lang/reflect/Array#get:(Ljava/lang/Object;I)Ljava/lang/Object;", (269, 1));
//     methods.insert("java/lang/reflect/Array#set:(Ljava/lang/Object;ILjava/lang/Object;)V", (269, 2));
//     methods.insert("java/lang/reflect/Array#getLength:(Ljava/lang/Object;)I", (269, 3));
//     methods.insert("java/lang/reflect/Array#makeObjectArray:(Ljava/lang/Class;I)Ljava/lang/Object;", (269, 4));
//     methods.insert("java/lang/reflect/Array#newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;", (269, 5));
//     methods.insert("java/lang/reflect/Constructor#<init>:(Ljava/lang/reflect/Method;)V", (270, 0));
//     methods.insert("java/lang/reflect/Constructor#equals:(Ljava/lang/Object;)Z", (270, 1));
//     methods.insert("java/lang/reflect/Constructor#isAccessible:()Z", (270, 2));
//     methods.insert("java/lang/reflect/Constructor#setAccessible:(Z)V", (270, 3));
//     methods.insert("java/lang/reflect/Constructor#getDeclaringClass:()Ljava/lang/Class;", (270, 4));
//     methods.insert("java/lang/reflect/Constructor#getParameterTypes:()[Ljava/lang/Class;", (270, 5));
//     methods.insert("java/lang/reflect/Constructor#getModifiers:()I", (270, 6));
//     methods.insert("java/lang/reflect/Constructor#isSynthetic:()Z", (270, 7));
//     methods.insert("java/lang/reflect/Constructor#getName:()Ljava/lang/String;", (270, 8));
//     methods.insert("java/lang/reflect/Constructor#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", (270, 9));
//     methods.insert("java/lang/reflect/Constructor#getAnnotations:()[Ljava/lang/annotation/Annotation;", (270, 10));
//     methods.insert("java/lang/reflect/Constructor#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;", (270, 11));
//     methods.insert("java/lang/reflect/Constructor#make:(Ljava/base/VMClass;)Ljava/lang/Object;", (270, 12));
//     methods.insert("java/lang/reflect/Constructor#newInstance:([Ljava/lang/Object;)Ljava/lang/Object;", (270, 13));
//     methods.insert("java/lang/reflect/Constructor#getExceptionTypes:()[Ljava/lang/Class;", (270, 14));
//     methods.insert("java/lang/reflect/Field#<init>:(Ljava/base/VMField;)V", (271, 0));
//     methods.insert("java/lang/reflect/Field#isAccessible:()Z", (271, 1));
//     methods.insert("java/lang/reflect/Field#setAccessible:(Z)V", (271, 2));
//     methods.insert("java/lang/reflect/Field#getDeclaringClass:()Ljava/lang/Class;", (271, 3));
//     methods.insert("java/lang/reflect/Field#getModifiers:()I", (271, 4));
//     methods.insert("java/lang/reflect/Field#isSynthetic:()Z", (271, 5));
//     methods.insert("java/lang/reflect/Field#getName:()Ljava/lang/String;", (271, 6));
//     methods.insert("java/lang/reflect/Field#getName:(Ljava/base/VMField;)Ljava/lang/String;", (271, 7));
//     methods.insert("java/lang/reflect/Field#getType:()Ljava/lang/Class;", (271, 8));
//     methods.insert("java/lang/reflect/Field#getGenericType:()Ljava/lang/reflect/Type;", (271, 9));
//     methods.insert("java/lang/reflect/Field#get:(Ljava/lang/Object;)Ljava/lang/Object;", (271, 10));
//     methods.insert("java/lang/reflect/Field#getBoolean:(Ljava/lang/Object;)Z", (271, 11));
//     methods.insert("java/lang/reflect/Field#getByte:(Ljava/lang/Object;)B", (271, 12));
//     methods.insert("java/lang/reflect/Field#getShort:(Ljava/lang/Object;)S", (271, 13));
//     methods.insert("java/lang/reflect/Field#getChar:(Ljava/lang/Object;)C", (271, 14));
//     methods.insert("java/lang/reflect/Field#getInt:(Ljava/lang/Object;)I", (271, 15));
//     methods.insert("java/lang/reflect/Field#getLong:(Ljava/lang/Object;)J", (271, 16));
//     methods.insert("java/lang/reflect/Field#matchType:(Ljava/lang/Object;)Z", (271, 17));
//     methods.insert("java/lang/reflect/Field#set:(Ljava/lang/Object;Ljava/lang/Object;)V", (271, 18));
//     methods.insert("java/lang/reflect/Field#set:(Ljava/lang/Object;J)V", (271, 19));
//     methods.insert("java/lang/reflect/Field#setByte:(Ljava/lang/Object;B)V", (271, 20));
//     methods.insert("java/lang/reflect/Field#setBoolean:(Ljava/lang/Object;Z)V", (271, 21));
//     methods.insert("java/lang/reflect/Field#setChar:(Ljava/lang/Object;C)V", (271, 22));
//     methods.insert("java/lang/reflect/Field#setShort:(Ljava/lang/Object;S)V", (271, 23));
//     methods.insert("java/lang/reflect/Field#setInt:(Ljava/lang/Object;I)V", (271, 24));
//     methods.insert("java/lang/reflect/Field#setLong:(Ljava/lang/Object;J)V", (271, 25));
//     methods.insert("java/lang/reflect/Field#getAnnotation:([Ljava/lang/Object;)Ljava/lang/annotation/Annotation;", (271, 26));
//     methods.insert("java/lang/reflect/Field#hasAnnotations:()Z", (271, 27));
//     methods.insert("java/lang/reflect/Field#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", (271, 28));
//     methods.insert("java/lang/reflect/Field#getAnnotations:()[Ljava/lang/annotation/Annotation;", (271, 29));
//     methods.insert("java/lang/reflect/Field#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;", (271, 30));
//     methods.insert("java/lang/reflect/Field#getPrimitive:(Ljava/lang/Object;II)J", (271, 31));
//     methods.insert("java/lang/reflect/Field#getObject:(Ljava/lang/Object;I)Ljava/lang/Object;", (271, 32));
//     methods.insert("java/lang/reflect/Field#setPrimitive:(Ljava/lang/Object;IIJ)V", (271, 33));
//     methods.insert("java/lang/reflect/Field#setObject:(Ljava/lang/Object;ILjava/lang/Object;)V", (271, 34));
//     methods.insert("java/lang/reflect/GenericDeclaration#getTypeParameters:()[Ljava/lang/reflect/TypeVariable;", (272, 0));
//     methods.insert("java/lang/reflect/InvocationHandler#invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;", (273, 0));
//     methods.insert("java/lang/reflect/InvocationTargetException#<init>:(Ljava/lang/Throwable;Ljava/lang/String;)V", (274, 0));
//     methods.insert("java/lang/reflect/InvocationTargetException#<init>:(Ljava/lang/Throwable;)V", (274, 1));
//     methods.insert("java/lang/reflect/InvocationTargetException#<init>:()V", (274, 2));
//     methods.insert("java/lang/reflect/InvocationTargetException#getTargetException:()Ljava/lang/Throwable;", (274, 3));
//     methods.insert("java/lang/reflect/Member#getDeclaringClass:()Ljava/lang/Class;", (275, 0));
//     methods.insert("java/lang/reflect/Member#getModifiers:()I", (275, 1));
//     methods.insert("java/lang/reflect/Member#getName:()Ljava/lang/String;", (275, 2));
//     methods.insert("java/lang/reflect/Member#isSynthetic:()Z", (275, 3));
//     methods.insert("java/lang/reflect/Method#<init>:(Ljava/base/VMMethod;)V", (276, 0));
//     methods.insert("java/lang/reflect/Method#equals:(Ljava/lang/Object;)Z", (276, 1));
//     methods.insert("java/lang/reflect/Method#isAccessible:()Z", (276, 2));
//     methods.insert("java/lang/reflect/Method#setAccessible:(Z)V", (276, 3));
//     methods.insert("java/lang/reflect/Method#getCaller:()Ljava/base/VMMethod;", (276, 4));
//     methods.insert("java/lang/reflect/Method#getDeclaringClass:()Ljava/lang/Class;", (276, 5));
//     methods.insert("java/lang/reflect/Method#getModifiers:()I", (276, 6));
//     methods.insert("java/lang/reflect/Method#getName:()Ljava/lang/String;", (276, 7));
//     methods.insert("java/lang/reflect/Method#getName:(Ljava/base/VMMethod;)Ljava/lang/String;", (276, 8));
//     methods.insert("java/lang/reflect/Method#getSpec:()Ljava/lang/String;", (276, 9));
//     methods.insert("java/lang/reflect/Method#getSpec:(Ljava/base/VMMethod;)Ljava/lang/String;", (276, 10));
//     methods.insert("java/lang/reflect/Method#getParameterTypes:()[Ljava/lang/Class;", (276, 11));
//     methods.insert("java/lang/reflect/Method#invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", (276, 12));
//     methods.insert("java/lang/reflect/Method#invoke:(Ljava/base/VMMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", (276, 13));
//     methods.insert("java/lang/reflect/Method#getReturnType:()Ljava/lang/Class;", (276, 14));
//     methods.insert("java/lang/reflect/Method#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", (276, 15));
//     methods.insert("java/lang/reflect/Method#getAnnotations:()[Ljava/lang/annotation/Annotation;", (276, 16));
//     methods.insert("java/lang/reflect/Method#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;", (276, 17));
//     methods.insert("java/lang/reflect/Method#isVarArgs:()Z", (276, 18));
//     methods.insert("java/lang/reflect/Method#isSynthetic:()Z", (276, 19));
//     methods.insert("java/lang/reflect/Method#getDefaultValue:()Ljava/lang/Object;", (276, 20));
//     methods.insert("java/lang/reflect/Method#getExceptionTypes:()[Ljava/lang/Class;", (276, 21));
//     methods.insert("java/lang/reflect/Modifier#<init>:()V", (277, 0));
//     methods.insert("java/lang/reflect/Modifier#isPublic:(I)Z", (277, 1));
//     methods.insert("java/lang/reflect/Modifier#isPrivate:(I)Z", (277, 2));
//     methods.insert("java/lang/reflect/Modifier#isProtected:(I)Z", (277, 3));
//     methods.insert("java/lang/reflect/Modifier#isStatic:(I)Z", (277, 4));
//     methods.insert("java/lang/reflect/Modifier#isFinal:(I)Z", (277, 5));
//     methods.insert("java/lang/reflect/Modifier#isTransient:(I)Z", (277, 6));
//     methods.insert("java/lang/reflect/Modifier#isSuper:(I)Z", (277, 7));
//     methods.insert("java/lang/reflect/Modifier#isNative:(I)Z", (277, 8));
//     methods.insert("java/lang/reflect/Modifier#isAbstract:(I)Z", (277, 9));
//     methods.insert("java/lang/reflect/Modifier#isInterface:(I)Z", (277, 10));
//     methods.insert("java/lang/reflect/ParameterizedType#getActualTypeArguments:()[Ljava/lang/reflect/Type;", (278, 0));
//     methods.insert("java/lang/reflect/ParameterizedType#getOwnerType:()Ljava/lang/reflect/Type;", (278, 1));
//     methods.insert("java/lang/reflect/ParameterizedType#getRawType:()Ljava/lang/reflect/Type;", (278, 2));
//     methods.insert("java/lang/reflect/Proxy#<init>:()V", (279, 0));
//     methods.insert("java/lang/reflect/Proxy#getProxyClass:(Ljava/lang/ClassLoader;[Ljava/lang/Class;)Ljava/lang/Class;", (279, 1));
//     methods.insert("java/lang/reflect/Proxy#isProxyClass:(Ljava/lang/Class;)Z", (279, 2));
//     methods.insert("java/lang/reflect/Proxy#getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;", (279, 3));
//     methods.insert("java/lang/reflect/Proxy#makeInvokeCode:(Ljava/util/List;Ljava/lang/String;[BIII)[B", (279, 4));
//     methods.insert("java/lang/reflect/Proxy#makeConstructorCode:(Ljava/util/List;)[B", (279, 5));
//     methods.insert("java/lang/reflect/Proxy#makeClass:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Class;", (279, 6));
//     methods.insert("java/lang/reflect/Proxy#newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;", (279, 7));
//     methods.insert("java/lang/reflect/Proxy#<clinit>:()V", (279, 8));
//     methods.insert("java/lang/reflect/SignatureParser#parse:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/reflect/Type;", (280, 0));
//     methods.insert("java/lang/reflect/SignatureParser#parse:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Map;)Ljava/lang/reflect/Type;", (280, 1));
//     methods.insert("java/lang/reflect/SignatureParser#<init>:(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Map;)V", (280, 2));
//     methods.insert("java/lang/reflect/SignatureParser#parseType:()Ljava/lang/reflect/Type;", (280, 3));
//     methods.insert("java/lang/reflect/SignatureParser#typeName:(Ljava/lang/reflect/Type;)Ljava/lang/String;", (280, 4));
//     methods.insert("java/lang/reflect/SignatureParser#makeType:([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;", (280, 5));
//     methods.insert("java/lang/reflect/SignatureParser#collectTypeVariables:(Ljava/lang/Class;)Ljava/util/Map;", (280, 6));
//     methods.insert("java/lang/reflect/SignatureParserType#<init>:([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V", (281, 0));
//     methods.insert("java/lang/reflect/SignatureParserType#getRawType:()Ljava/lang/reflect/Type;", (281, 1));
//     methods.insert("java/lang/reflect/SignatureParserType#getOwnerType:()Ljava/lang/reflect/Type;", (281, 2));
//     methods.insert("java/lang/reflect/SignatureParserType#getActualTypeArguments:()[Ljava/lang/reflect/Type;", (281, 3));
//     methods.insert("java/lang/reflect/SignatureParserType#toString:()Ljava/lang/String;", (281, 4));
//     methods.insert("java/lang/reflect/SignatureParserType#typeName:(Ljava/lang/reflect/Type;)Ljava/lang/String;", (281, 5));
//     methods.insert("java/lang/reflect/TypeVariable#getBounds:()[Ljava/lang/reflect/Type;", (283, 0));
//     methods.insert("java/lang/reflect/TypeVariable#getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;", (283, 1));
//     methods.insert("java/lang/reflect/TypeVariable#getName:()Ljava/lang/String;", (283, 2));
//     methods.insert("java/lang/reflect/TypeVariableImpl#getBounds:()[Ljava/lang/reflect/Type;", (284, 0));
//     methods.insert("java/lang/reflect/TypeVariableImpl#getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;", (284, 1));
//     methods.insert("java/lang/reflect/TypeVariableImpl#getName:()Ljava/lang/String;", (284, 2));
//     methods.insert("java/lang/reflect/TypeVariableImpl#<init>:(Ljava/lang/String;Ljava/lang/reflect/Type;)V", (284, 3));
//     methods.insert("java/lang/reflect/TypeVariableImpl#setVars:(Ljava/util/List;)V", (284, 4));
//     methods.insert("java/lang/reflect/TypeVariableImpl#toString:()Ljava/lang/String;", (284, 5));
//     methods.insert("java/lang/reflect/TypeVariableImpl1#<init>:([Ljava/lang/reflect/TypeVariableImpl;)V", (285, 0));
//     methods.insert("java/lang/reflect/TypeVariableImpl1#getTypeParameters:()[Ljava/lang/reflect/TypeVariable;", (285, 1));
//     methods.insert("java/lang/reflect/TypeVariableImpl1#getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", (285, 2));
//     methods.insert("java/lang/reflect/TypeVariableImpl1#getAnnotations:()[Ljava/lang/annotation/Annotation;", (285, 3));
//     methods.insert("java/lang/reflect/TypeVariableImpl1#getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;", (285, 4));
//     methods.insert("java/math/BigInteger#<init>:(IJ)V", (286, 0));
//     methods.insert("java/math/BigInteger#valueOf:(J)Ljava/math/BigInteger;", (286, 1));
//     methods.insert("java/math/BigInteger#<init>:(Ljava/lang/String;I)V", (286, 2));
//     methods.insert("java/math/BigInteger#<init>:(I[B)V", (286, 3));
//     methods.insert("java/math/BigInteger#signum:()I", (286, 4));
//     methods.insert("java/math/BigInteger#toString:(I)Ljava/lang/String;", (286, 5));
//     methods.insert("java/math/BigInteger#toByteArray:()[B", (286, 6));
//     methods.insert("java/math/BigInteger#shiftLeft:(I)Ljava/math/BigInteger;", (286, 7));
//     methods.insert("java/math/BigInteger#shiftRight:(I)Ljava/math/BigInteger;", (286, 8));
//     methods.insert("java/math/BigInteger#and:(Ljava/math/BigInteger;)Ljava/math/BigInteger;", (286, 9));
//     methods.insert("java/math/BigInteger#or:(Ljava/math/BigInteger;)Ljava/math/BigInteger;", (286, 10));
//     methods.insert("java/math/BigInteger#intValueExact:()I", (286, 11));
//     methods.insert("java/math/BigInteger#intValue:()I", (286, 12));
//     methods.insert("java/math/BigInteger#shortValue:()S", (286, 13));
//     methods.insert("java/math/BigInteger#byteValue:()B", (286, 14));
//     methods.insert("java/math/BigInteger#longValue:()J", (286, 15));
//     methods.insert("java/math/BigInteger#floatValue:()F", (286, 16));
//     methods.insert("java/math/BigInteger#doubleValue:()D", (286, 17));
//     methods.insert("java/math/BigInteger#bitLength:()I", (286, 18));
//     methods.insert("java/math/BigInteger#<init>:(I[I)V", (286, 19));
//     methods.insert("java/math/BigInteger#<clinit>:()V", (286, 20));
//     methods.insert("java/util/AbstractCollection#<init>:()V", (287, 0));
//     methods.insert("java/util/AbstractCollection#add:(Ljava/lang/Object;)Z", (287, 1));
//     methods.insert("java/util/AbstractCollection#addAll:(Ljava/util/Collection;)Z", (287, 2));
//     methods.insert("java/util/AbstractCollection#clear:()V", (287, 3));
//     methods.insert("java/util/AbstractCollection#contains:(Ljava/lang/Object;)Z", (287, 4));
//     methods.insert("java/util/AbstractCollection#containsAll:(Ljava/util/Collection;)Z", (287, 5));
//     methods.insert("java/util/AbstractCollection#isEmpty:()Z", (287, 6));
//     methods.insert("java/util/AbstractCollection#remove:(Ljava/lang/Object;)Z", (287, 7));
//     methods.insert("java/util/AbstractCollection#removeAll:(Ljava/util/Collection;)Z", (287, 8));
//     methods.insert("java/util/AbstractCollection#size:()I", (287, 9));
//     methods.insert("java/util/AbstractCollection#toArray:()[Ljava/lang/Object;", (287, 10));
//     methods.insert("java/util/AbstractCollection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (287, 11));
//     methods.insert("java/util/AbstractCollection#iterator:()Ljava/util/Iterator;", (287, 12));
//     methods.insert("java/util/AbstractCollection#toString:()Ljava/lang/String;", (287, 13));
//     methods.insert("java/util/AbstractList#<init>:()V", (288, 0));
//     methods.insert("java/util/AbstractList#add:(Ljava/lang/Object;)Z", (288, 1));
//     methods.insert("java/util/AbstractList#addAll:(Ljava/util/Collection;)Z", (288, 2));
//     methods.insert("java/util/AbstractList#addAll:(ILjava/util/Collection;)Z", (288, 3));
//     methods.insert("java/util/AbstractList#iterator:()Ljava/util/Iterator;", (288, 4));
//     methods.insert("java/util/AbstractList#listIterator:()Ljava/util/ListIterator;", (288, 5));
//     methods.insert("java/util/AbstractList#indexOf:(Ljava/lang/Object;)I", (288, 6));
//     methods.insert("java/util/AbstractMap#<init>:()V", (289, 0));
//     methods.insert("java/util/AbstractSequentialList#<init>:()V", (290, 0));
//     methods.insert("java/util/AbstractSet#<init>:()V", (291, 0));
//     methods.insert("java/util/ArrayList#<init>:(I)V", (292, 0));
//     methods.insert("java/util/ArrayList#<init>:()V", (292, 1));
//     methods.insert("java/util/ArrayList#<init>:(Ljava/util/Collection;)V", (292, 2));
//     methods.insert("java/util/ArrayList#grow:(I)V", (292, 3));
//     methods.insert("java/util/ArrayList#shrink:(I)V", (292, 4));
//     methods.insert("java/util/ArrayList#resize:(I)V", (292, 5));
//     methods.insert("java/util/ArrayList#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (292, 6));
//     methods.insert("java/util/ArrayList#size:()I", (292, 7));
//     methods.insert("java/util/ArrayList#ensureCapacity:(I)V", (292, 8));
//     methods.insert("java/util/ArrayList#contains:(Ljava/lang/Object;)Z", (292, 9));
//     methods.insert("java/util/ArrayList#add:(ILjava/lang/Object;)V", (292, 10));
//     methods.insert("java/util/ArrayList#add:(Ljava/lang/Object;)Z", (292, 11));
//     methods.insert("java/util/ArrayList#addAll:(Ljava/util/Collection;)Z", (292, 12));
//     methods.insert("java/util/ArrayList#indexOf:(Ljava/lang/Object;)I", (292, 13));
//     methods.insert("java/util/ArrayList#lastIndexOf:(Ljava/lang/Object;)I", (292, 14));
//     methods.insert("java/util/ArrayList#get:(I)Ljava/lang/Object;", (292, 15));
//     methods.insert("java/util/ArrayList#set:(ILjava/lang/Object;)Ljava/lang/Object;", (292, 16));
//     methods.insert("java/util/ArrayList#remove:(I)Ljava/lang/Object;", (292, 17));
//     methods.insert("java/util/ArrayList#remove:(Ljava/lang/Object;)Z", (292, 18));
//     methods.insert("java/util/ArrayList#isEmpty:()Z", (292, 19));
//     methods.insert("java/util/ArrayList#clear:()V", (292, 20));
//     methods.insert("java/util/ArrayList#iterator:()Ljava/util/Iterator;", (292, 21));
//     methods.insert("java/util/ArrayList#listIterator:(I)Ljava/util/ListIterator;", (292, 22));
//     methods.insert("java/util/ArrayList#listIterator:()Ljava/util/ListIterator;", (292, 23));
//     methods.insert("java/util/ArrayList#toString:()Ljava/lang/String;", (292, 24));
//     methods.insert("java/util/ArrayList#writeObject:(Ljava/io/ObjectOutputStream;)V", (292, 25));
//     methods.insert("java/util/ArrayList#readObject:(Ljava/io/ObjectInputStream;)V", (292, 26));
//     methods.insert("java/util/ArrayListIterator#<init>:(Ljava/util/List;)V", (293, 0));
//     methods.insert("java/util/ArrayListIterator#<init>:(Ljava/util/List;I)V", (293, 1));
//     methods.insert("java/util/ArrayListIterator#hasPrevious:()Z", (293, 2));
//     methods.insert("java/util/ArrayListIterator#previous:()Ljava/lang/Object;", (293, 3));
//     methods.insert("java/util/ArrayListIterator#next:()Ljava/lang/Object;", (293, 4));
//     methods.insert("java/util/ArrayListIterator#hasNext:()Z", (293, 5));
//     methods.insert("java/util/ArrayListIterator#remove:()V", (293, 6));
//     methods.insert("java/util/Arrays#<init>:()V", (294, 0));
//     methods.insert("java/util/Arrays#toString:([Ljava/lang/Object;)Ljava/lang/String;", (294, 1));
//     methods.insert("java/util/Arrays#toString:([Z)Ljava/lang/String;", (294, 2));
//     methods.insert("java/util/Arrays#toString:([B)Ljava/lang/String;", (294, 3));
//     methods.insert("java/util/Arrays#toString:([S)Ljava/lang/String;", (294, 4));
//     methods.insert("java/util/Arrays#toString:([I)Ljava/lang/String;", (294, 5));
//     methods.insert("java/util/Arrays#toString:([J)Ljava/lang/String;", (294, 6));
//     methods.insert("java/util/Arrays#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (294, 7));
//     methods.insert("java/util/Arrays#sort:([Ljava/lang/Object;)V", (294, 8));
//     methods.insert("java/util/Arrays#sort:([Ljava/lang/Object;Ljava/util/Comparator;)V", (294, 9));
//     methods.insert("java/util/Arrays#introSort:([Ljava/lang/Object;Ljava/util/Comparator;III)V", (294, 10));
//     methods.insert("java/util/Arrays#heapSort:([Ljava/lang/Object;Ljava/util/Comparator;II)V", (294, 11));
//     methods.insert("java/util/Arrays#siftDown:([Ljava/lang/Object;Ljava/util/Comparator;III)V", (294, 12));
//     methods.insert("java/util/Arrays#insertionSort:([Ljava/lang/Object;Ljava/util/Comparator;)V", (294, 13));
//     methods.insert("java/util/Arrays#hashCode:([Ljava/lang/Object;)I", (294, 14));
//     methods.insert("java/util/Arrays#hashCode:([B)I", (294, 15));
//     methods.insert("java/util/Arrays#equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z", (294, 16));
//     methods.insert("java/util/Arrays#equals:([B[B)Z", (294, 17));
//     methods.insert("java/util/Arrays#equals:([I[I)Z", (294, 18));
//     methods.insert("java/util/Arrays#equals:([J[J)Z", (294, 19));
//     methods.insert("java/util/Arrays#equals:([S[S)Z", (294, 20));
//     methods.insert("java/util/Arrays#equals:([C[C)Z", (294, 21));
//     methods.insert("java/util/Arrays#deepEquals:([Ljava/lang/Object;[Ljava/lang/Object;)Z", (294, 22));
//     methods.insert("java/util/Arrays#asList:([Ljava/lang/Object;)Ljava/util/List;", (294, 23));
//     methods.insert("java/util/Arrays#checkRange:(III)V", (294, 24));
//     methods.insert("java/util/Arrays#fill:([II)V", (294, 25));
//     methods.insert("java/util/Arrays#fill:([IIII)V", (294, 26));
//     methods.insert("java/util/Arrays#fill:([CC)V", (294, 27));
//     methods.insert("java/util/Arrays#fill:([CIIC)V", (294, 28));
//     methods.insert("java/util/Arrays#fill:([SS)V", (294, 29));
//     methods.insert("java/util/Arrays#fill:([SIIS)V", (294, 30));
//     methods.insert("java/util/Arrays#fill:([BB)V", (294, 31));
//     methods.insert("java/util/Arrays#fill:([BIIB)V", (294, 32));
//     methods.insert("java/util/Arrays#fill:([ZZ)V", (294, 33));
//     methods.insert("java/util/Arrays#fill:([ZIIZ)V", (294, 34));
//     methods.insert("java/util/Arrays#fill:([JJ)V", (294, 35));
//     methods.insert("java/util/Arrays#fill:([JIIJ)V", (294, 36));
//     methods.insert("java/util/Arrays#fill:([Ljava/lang/Object;Ljava/lang/Object;)V", (294, 37));
//     methods.insert("java/util/Arrays#fill:([Ljava/lang/Object;IILjava/lang/Object;)V", (294, 38));
//     methods.insert("java/util/Arrays#copyOf:([ZI)[Z", (294, 39));
//     methods.insert("java/util/Arrays#copyOf:([BI)[B", (294, 40));
//     methods.insert("java/util/Arrays#copyOf:([CI)[C", (294, 41));
//     methods.insert("java/util/Arrays#copyOf:([II)[I", (294, 42));
//     methods.insert("java/util/Arrays#copyOf:([JI)[J", (294, 43));
//     methods.insert("java/util/Arrays#copyOf:([SI)[S", (294, 44));
//     methods.insert("java/util/Arrays#copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;", (294, 45));
//     methods.insert("java/util/Arrays#copyOf:([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;", (294, 46));
//     methods.insert("java/util/Arrays#copyOfRange:([ZII)[Z", (294, 47));
//     methods.insert("java/util/Arrays#copyOfRange:([BII)[B", (294, 48));
//     methods.insert("java/util/Arrays#copyOfRange:([CII)[C", (294, 49));
//     methods.insert("java/util/Arrays#copyOfRange:([III)[I", (294, 50));
//     methods.insert("java/util/Arrays#copyOfRange:([JII)[J", (294, 51));
//     methods.insert("java/util/Arrays#copyOfRange:([SII)[S", (294, 52));
//     methods.insert("java/util/Arrays#copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;", (294, 53));
//     methods.insert("java/util/Arrays#copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;", (294, 54));
//     methods.insert("java/util/Arrays#binarySearch:([II)I", (294, 55));
//     methods.insert("java/util/Arrays#binarySearch:([IIII)I", (294, 56));
//     methods.insert("java/util/ArraysAbstractList#<init>:([Ljava/lang/Object;)V", (295, 0));
//     methods.insert("java/util/ArraysAbstractList#size:()I", (295, 1));
//     methods.insert("java/util/ArraysAbstractList#add:(ILjava/lang/Object;)V", (295, 2));
//     methods.insert("java/util/ArraysAbstractList#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (295, 3));
//     methods.insert("java/util/ArraysAbstractList#indexOf:(Ljava/lang/Object;)I", (295, 4));
//     methods.insert("java/util/ArraysAbstractList#lastIndexOf:(Ljava/lang/Object;)I", (295, 5));
//     methods.insert("java/util/ArraysAbstractList#get:(I)Ljava/lang/Object;", (295, 6));
//     methods.insert("java/util/ArraysAbstractList#set:(ILjava/lang/Object;)Ljava/lang/Object;", (295, 7));
//     methods.insert("java/util/ArraysAbstractList#remove:(I)Ljava/lang/Object;", (295, 8));
//     methods.insert("java/util/ArraysAbstractList#listIterator:(I)Ljava/util/ListIterator;", (295, 9));
//     methods.insert("java/util/ArraysComparator#<init>:()V", (296, 0));
//     methods.insert("java/util/ArraysComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I", (296, 1));
//     methods.insert("java/util/ArraysListIterator#<init>:([Ljava/lang/Object;I)V", (297, 0));
//     methods.insert("java/util/ArraysListIterator#hasNext:()Z", (297, 1));
//     methods.insert("java/util/ArraysListIterator#next:()Ljava/lang/Object;", (297, 2));
//     methods.insert("java/util/ArraysListIterator#remove:()V", (297, 3));
//     methods.insert("java/util/ArraysListIterator#hasPrevious:()Z", (297, 4));
//     methods.insert("java/util/ArraysListIterator#previous:()Ljava/lang/Object;", (297, 5));
//     methods.insert("java/util/ArraysListIterator#nextIndex:()I", (297, 6));
//     methods.insert("java/util/ArraysListIterator#previousIndex:()I", (297, 7));
//     methods.insert("java/util/ArraysListIterator#set:(Ljava/lang/Object;)V", (297, 8));
//     methods.insert("java/util/ArraysListIterator#add:(Ljava/lang/Object;)V", (297, 9));
//     methods.insert("java/util/BitSet#longPosition:(I)I", (298, 0));
//     methods.insert("java/util/BitSet#bitPosition:(I)J", (298, 1));
//     methods.insert("java/util/BitSet#getTrueMask:(II)J", (298, 2));
//     methods.insert("java/util/BitSet#<init>:(I)V", (298, 3));
//     methods.insert("java/util/BitSet#<init>:()V", (298, 4));
//     methods.insert("java/util/BitSet#and:(Ljava/util/BitSet;)V", (298, 5));
//     methods.insert("java/util/BitSet#andNot:(Ljava/util/BitSet;)V", (298, 6));
//     methods.insert("java/util/BitSet#or:(Ljava/util/BitSet;)V", (298, 7));
//     methods.insert("java/util/BitSet#xor:(Ljava/util/BitSet;)V", (298, 8));
//     methods.insert("java/util/BitSet#enlarge:(I)V", (298, 9));
//     methods.insert("java/util/BitSet#get:(I)Z", (298, 10));
//     methods.insert("java/util/BitSet#flip:(I)V", (298, 11));
//     methods.insert("java/util/BitSet#flip:(II)V", (298, 12));
//     methods.insert("java/util/BitSet#set:(I)V", (298, 13));
//     methods.insert("java/util/BitSet#set:(II)V", (298, 14));
//     methods.insert("java/util/BitSet#clear:(I)V", (298, 15));
//     methods.insert("java/util/BitSet#clear:(II)V", (298, 16));
//     methods.insert("java/util/BitSet#isEmpty:()Z", (298, 17));
//     methods.insert("java/util/BitSet#intersects:(Ljava/util/BitSet;)Z", (298, 18));
//     methods.insert("java/util/BitSet#length:()I", (298, 19));
//     methods.insert("java/util/BitSet#nextSetBit:(I)I", (298, 20));
//     methods.insert("java/util/BitSet#nextBit:(IZ)I", (298, 21));
//     methods.insert("java/util/BitSet#nextClearBit:(I)I", (298, 22));
//     methods.insert("java/util/BitSet#cardinality:()I", (298, 23));
//     methods.insert("java/util/Collection#size:()I", (299, 0));
//     methods.insert("java/util/Collection#isEmpty:()Z", (299, 1));
//     methods.insert("java/util/Collection#contains:(Ljava/lang/Object;)Z", (299, 2));
//     methods.insert("java/util/Collection#containsAll:(Ljava/util/Collection;)Z", (299, 3));
//     methods.insert("java/util/Collection#add:(Ljava/lang/Object;)Z", (299, 4));
//     methods.insert("java/util/Collection#addAll:(Ljava/util/Collection;)Z", (299, 5));
//     methods.insert("java/util/Collection#remove:(Ljava/lang/Object;)Z", (299, 6));
//     methods.insert("java/util/Collection#removeAll:(Ljava/util/Collection;)Z", (299, 7));
//     methods.insert("java/util/Collection#toArray:()[Ljava/lang/Object;", (299, 8));
//     methods.insert("java/util/Collection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (299, 9));
//     methods.insert("java/util/Collection#clear:()V", (299, 10));
//     methods.insert("java/util/Collection#iterator:()Ljava/util/Iterator;", (299, 11));
//     methods.insert("java/util/Collections#<init>:()V", (300, 0));
//     methods.insert("java/util/Collections#sort:(Ljava/util/List;)V", (300, 1));
//     methods.insert("java/util/Collections#sort:(Ljava/util/List;Ljava/util/Comparator;)V", (300, 2));
//     methods.insert("java/util/Collections#introSort:(Ljava/util/List;Ljava/util/Comparator;III)V", (300, 3));
//     methods.insert("java/util/Collections#heapSort:(Ljava/util/List;Ljava/util/Comparator;II)V", (300, 4));
//     methods.insert("java/util/Collections#siftDown:(Ljava/util/List;Ljava/util/Comparator;III)V", (300, 5));
//     methods.insert("java/util/Collections#insertionSort:(Ljava/util/List;Ljava/util/Comparator;)V", (300, 6));
//     methods.insert("java/util/Collections#binarySearch:(Ljava/util/List;Ljava/lang/Object;)I", (300, 7));
//     methods.insert("java/util/Collections#reverse:(Ljava/util/List;)V", (300, 8));
//     methods.insert("java/util/Collections#emptyList:()Ljava/util/List;", (300, 9));
//     methods.insert("java/util/Collections#emptyMap:()Ljava/util/Map;", (300, 10));
//     methods.insert("java/util/Collections#emptySet:()Ljava/util/Set;", (300, 11));
//     methods.insert("java/util/Collections#enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;", (300, 12));
//     methods.insert("java/util/Collections#reverseOrder:(Ljava/util/Comparator;)Ljava/util/Comparator;", (300, 13));
//     methods.insert("java/util/Collections#synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;", (300, 14));
//     methods.insert("java/util/Collections#synchronizedSet:(Ljava/util/Set;)Ljava/util/Set;", (300, 15));
//     methods.insert("java/util/Collections#synchronizedList:(Ljava/util/List;)Ljava/util/List;", (300, 16));
//     methods.insert("java/util/Collections#unmodifiableList:(Ljava/util/List;)Ljava/util/List;", (300, 17));
//     methods.insert("java/util/Collections#unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;", (300, 18));
//     methods.insert("java/util/Collections#unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/UnmodifiableCollection;", (300, 19));
//     methods.insert("java/util/Collections#unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;", (300, 20));
//     methods.insert("java/util/Collections#singletonList:(Ljava/lang/Object;)Ljava/util/List;", (300, 21));
//     methods.insert("java/util/Collections#<clinit>:()V", (300, 22));
//     methods.insert("java/util/CollectionsComparator#<init>:()V", (301, 0));
//     methods.insert("java/util/CollectionsComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I", (301, 1));
//     methods.insert("java/util/Comparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I", (302, 0));
//     methods.insert("java/util/Date#<init>:()V", (303, 0));
//     methods.insert("java/util/Date#<init>:(J)V", (303, 1));
//     methods.insert("java/util/Date#getTime:()J", (303, 2));
//     methods.insert("java/util/Date#toString:()Ljava/lang/String;", (303, 3));
//     methods.insert("java/util/Date#toString:(J)Ljava/lang/String;", (303, 4));
//     methods.insert("java/util/Deque#offerFirst:(Ljava/lang/Object;)Z", (304, 0));
//     methods.insert("java/util/Deque#push:(Ljava/lang/Object;)V", (304, 1));
//     methods.insert("java/util/Deque#addFirst:(Ljava/lang/Object;)V", (304, 2));
//     methods.insert("java/util/Deque#offerLast:(Ljava/lang/Object;)Z", (304, 3));
//     methods.insert("java/util/Deque#addLast:(Ljava/lang/Object;)V", (304, 4));
//     methods.insert("java/util/Deque#peekFirst:()Ljava/lang/Object;", (304, 5));
//     methods.insert("java/util/Deque#getFirst:()Ljava/lang/Object;", (304, 6));
//     methods.insert("java/util/Deque#peekLast:()Ljava/lang/Object;", (304, 7));
//     methods.insert("java/util/Deque#getLast:()Ljava/lang/Object;", (304, 8));
//     methods.insert("java/util/Deque#pollFirst:()Ljava/lang/Object;", (304, 9));
//     methods.insert("java/util/Deque#removeFirst:()Ljava/lang/Object;", (304, 10));
//     methods.insert("java/util/Deque#pop:()Ljava/lang/Object;", (304, 11));
//     methods.insert("java/util/Deque#pollLast:()Ljava/lang/Object;", (304, 12));
//     methods.insert("java/util/Deque#removeLast:()Ljava/lang/Object;", (304, 13));
//     methods.insert("java/util/Deque#descendingIterator:()Ljava/util/Iterator;", (304, 14));
//     methods.insert("java/util/Deque#removeLastOccurrence:(Ljava/lang/Object;)Z", (304, 15));
//     methods.insert("java/util/Deque#removeFirstOccurrence:(Ljava/lang/Object;)Z", (304, 16));
//     methods.insert("java/util/Entry#getKey:()Ljava/lang/Object;", (305, 0));
//     methods.insert("java/util/Entry#getValue:()Ljava/lang/Object;", (305, 1));
//     methods.insert("java/util/Entry#setValue:(Ljava/lang/Object;)Ljava/lang/Object;", (305, 2));
//     methods.insert("java/util/EnumSet#<init>:(ILjava/lang/Class;)V", (306, 0));
//     methods.insert("java/util/EnumSet#add:(Ljava/lang/Enum;)Z", (306, 1));
//     methods.insert("java/util/EnumSet#remove:(Ljava/lang/Object;)Z", (306, 2));
//     methods.insert("java/util/EnumSet#contains:(Ljava/lang/Object;)Z", (306, 3));
//     methods.insert("java/util/EnumSet#size:()I", (306, 4));
//     methods.insert("java/util/EnumSet#iterator:()Ljava/util/Iterator;", (306, 5));
//     methods.insert("java/util/EnumSet#allOf:(Ljava/lang/Class;)Ljava/util/EnumSet;", (306, 6));
//     methods.insert("java/util/EnumSet#noneOf:(Ljava/lang/Class;)Ljava/util/EnumSet;", (306, 7));
//     methods.insert("java/util/EnumSet#of:(Ljava/lang/Enum;[Ljava/lang/Enum;)Ljava/util/EnumSet;", (306, 8));
//     methods.insert("java/util/EnumSet#complementOf:(Ljava/util/EnumSet;)Ljava/util/EnumSet;", (306, 9));
//     methods.insert("java/util/EnumSet#copyOf:(Ljava/util/EnumSet;)Ljava/util/EnumSet;", (306, 10));
//     methods.insert("java/util/EnumSet#createEmptyEnumSet:(Ljava/lang/Class;)Ljava/util/EnumSet;", (306, 11));
//     methods.insert("java/util/EnumSet#addAllElementsToSet:(Ljava/lang/Iterable;Ljava/util/EnumSet;)V", (306, 12));
//     methods.insert("java/util/EnumSet#tryToCast:(Ljava/lang/Object;)Ljava/lang/Enum;", (306, 13));
//     methods.insert("java/util/EnumSet#add:(Ljava/lang/Object;)Z", (306, 14));
//     methods.insert("java/util/EnumSetIterator#<init>:(Ljava/util/EnumSet;Ljava/lang/Class;Ljava/util/BitSet;)V", (307, 0));
//     methods.insert("java/util/EnumSetIterator#next:()Ljava/lang/Enum;", (307, 1));
//     methods.insert("java/util/EnumSetIterator#hasNext:()Z", (307, 2));
//     methods.insert("java/util/EnumSetIterator#remove:()V", (307, 3));
//     methods.insert("java/util/EnumSetIterator#nextIndex:()I", (307, 4));
//     methods.insert("java/util/EnumSetIterator#next:()Ljava/lang/Object;", (307, 5));
//     methods.insert("java/util/Enumeration#nextElement:()Ljava/lang/Object;", (308, 0));
//     methods.insert("java/util/Enumeration#hasMoreElements:()Z", (308, 1));
//     methods.insert("java/util/EventObject#<init>:(Ljava/lang/Object;)V", (310, 0));
//     methods.insert("java/util/EventObject#getSource:()Ljava/lang/Object;", (310, 1));
//     methods.insert("java/util/HashMap#<init>:(ILjava/util/HashMapHelper;)V", (311, 0));
//     methods.insert("java/util/HashMap#<init>:(I)V", (311, 1));
//     methods.insert("java/util/HashMap#<init>:()V", (311, 2));
//     methods.insert("java/util/HashMap#getHead:()Ljava/util/HashMapCell;", (311, 3));
//     methods.insert("java/util/HashMap#<init>:(Ljava/util/Map;)V", (311, 4));
//     methods.insert("java/util/HashMap#toString:()Ljava/lang/String;", (311, 5));
//     methods.insert("java/util/HashMap#isEmpty:()Z", (311, 6));
//     methods.insert("java/util/HashMap#size:()I", (311, 7));
//     methods.insert("java/util/HashMap#grow:()V", (311, 8));
//     methods.insert("java/util/HashMap#shrink:()V", (311, 9));
//     methods.insert("java/util/HashMap#resize:(I)V", (311, 10));
//     methods.insert("java/util/HashMap#find:(Ljava/lang/Object;)Ljava/util/HashMapCell;", (311, 11));
//     methods.insert("java/util/HashMap#insert:(Ljava/util/HashMapCell;)V", (311, 12));
//     methods.insert("java/util/HashMap#remove:(Ljava/util/HashMapCell;)V", (311, 13));
//     methods.insert("java/util/HashMap#putCell:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMapCell;", (311, 14));
//     methods.insert("java/util/HashMap#containsKey:(Ljava/lang/Object;)Z", (311, 15));
//     methods.insert("java/util/HashMap#containsValue:(Ljava/lang/Object;)Z", (311, 16));
//     methods.insert("java/util/HashMap#get:(Ljava/lang/Object;)Ljava/lang/Object;", (311, 17));
//     methods.insert("java/util/HashMap#removeCell:(Ljava/lang/Object;)Ljava/util/HashMapCell;", (311, 18));
//     methods.insert("java/util/HashMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", (311, 19));
//     methods.insert("java/util/HashMap#putAll:(Ljava/util/Map;)V", (311, 20));
//     methods.insert("java/util/HashMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;", (311, 21));
//     methods.insert("java/util/HashMap#clear:()V", (311, 22));
//     methods.insert("java/util/HashMap#entrySet:()Ljava/util/Set;", (311, 23));
//     methods.insert("java/util/HashMap#keySet:()Ljava/util/Set;", (311, 24));
//     methods.insert("java/util/HashMap#values:()Ljava/util/Collection;", (311, 25));
//     methods.insert("java/util/HashMap#iterator:()Ljava/util/Iterator;", (311, 26));
//     methods.insert("java/util/HashMapCell#next:()Ljava/util/HashMapCell;", (312, 0));
//     methods.insert("java/util/HashMapCell#setNext:(Ljava/util/HashMapCell;)V", (312, 1));
//     methods.insert("java/util/HashMapCell#getKey:()Ljava/lang/Object;", (312, 2));
//     methods.insert("java/util/HashMapCell#getValue:()Ljava/lang/Object;", (312, 3));
//     methods.insert("java/util/HashMapCell#before:()Ljava/util/HashMapCell;", (312, 4));
//     methods.insert("java/util/HashMapCell#setBefore:(Ljava/util/HashMapCell;)V", (312, 5));
//     methods.insert("java/util/HashMapCell#after:()Ljava/util/HashMapCell;", (312, 6));
//     methods.insert("java/util/HashMapCell#setAfter:(Ljava/util/HashMapCell;)V", (312, 7));
//     methods.insert("java/util/HashMapHelper#make:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;)Ljava/util/HashMapCell;", (313, 0));
//     methods.insert("java/util/HashMapHelper#hash:(Ljava/lang/Object;)I", (313, 1));
//     methods.insert("java/util/HashMapHelper#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (313, 2));
//     methods.insert("java/util/HashMapMyCell#<init>:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;I)V", (314, 0));
//     methods.insert("java/util/HashMapMyCell#getKey:()Ljava/lang/Object;", (314, 1));
//     methods.insert("java/util/HashMapMyCell#getValue:()Ljava/lang/Object;", (314, 2));
//     methods.insert("java/util/HashMapMyCell#setValue:(Ljava/lang/Object;)Ljava/lang/Object;", (314, 3));
//     methods.insert("java/util/HashMapMyCell#next:()Ljava/util/HashMapCell;", (314, 4));
//     methods.insert("java/util/HashMapMyCell#setNext:(Ljava/util/HashMapCell;)V", (314, 5));
//     methods.insert("java/util/HashMapMyCell#hashCode:()I", (314, 6));
//     methods.insert("java/util/HashMapMyCell#before:()Ljava/util/HashMapCell;", (314, 7));
//     methods.insert("java/util/HashMapMyCell#setBefore:(Ljava/util/HashMapCell;)V", (314, 8));
//     methods.insert("java/util/HashMapMyCell#after:()Ljava/util/HashMapCell;", (314, 9));
//     methods.insert("java/util/HashMapMyCell#setAfter:(Ljava/util/HashMapCell;)V", (314, 10));
//     methods.insert("java/util/HashMapMyEntryMap#<init>:(Ljava/util/HashMap;)V", (315, 0));
//     methods.insert("java/util/HashMapMyEntryMap#size:()I", (315, 1));
//     methods.insert("java/util/HashMapMyEntryMap#find:(Ljava/lang/Object;)Ljava/util/Entry;", (315, 2));
//     methods.insert("java/util/HashMapMyEntryMap#remove:(Ljava/lang/Object;)Ljava/util/Entry;", (315, 3));
//     methods.insert("java/util/HashMapMyEntryMap#clear:()V", (315, 4));
//     methods.insert("java/util/HashMapMyEntryMap#iterator:()Ljava/util/Iterator;", (315, 5));
//     methods.insert("java/util/HashMapMyHelper#<init>:()V", (316, 0));
//     methods.insert("java/util/HashMapMyHelper#make:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/HashMapCell;)Ljava/util/HashMapCell;", (316, 1));
//     methods.insert("java/util/HashMapMyHelper#hash:(Ljava/lang/Object;)I", (316, 2));
//     methods.insert("java/util/HashMapMyHelper#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (316, 3));
//     methods.insert("java/util/HashMapMyIterator#<init>:(Ljava/util/HashMap;)V", (317, 0));
//     methods.insert("java/util/HashMapMyIterator#hasNext:()Z", (317, 1));
//     methods.insert("java/util/HashMapMyIterator#next:()Ljava/util/Entry;", (317, 2));
//     methods.insert("java/util/HashMapMyIterator#remove:()V", (317, 3));
//     methods.insert("java/util/HashMapMyIterator#next:()Ljava/lang/Object;", (317, 4));
//     methods.insert("java/util/HashSet#<init>:(Ljava/util/Collection;)V", (318, 0));
//     methods.insert("java/util/HashSet#<init>:(I)V", (318, 1));
//     methods.insert("java/util/HashSet#<init>:()V", (318, 2));
//     methods.insert("java/util/HashSet#size:()I", (318, 3));
//     methods.insert("java/util/HashSet#isEmpty:()Z", (318, 4));
//     methods.insert("java/util/HashSet#contains:(Ljava/lang/Object;)Z", (318, 5));
//     methods.insert("java/util/HashSet#add:(Ljava/lang/Object;)Z", (318, 6));
//     methods.insert("java/util/HashSet#addAll:(Ljava/util/Collection;)Z", (318, 7));
//     methods.insert("java/util/HashSet#remove:(Ljava/lang/Object;)Z", (318, 8));
//     methods.insert("java/util/HashSet#clear:()V", (318, 9));
//     methods.insert("java/util/HashSet#iterator:()Ljava/util/Iterator;", (318, 10));
//     methods.insert("java/util/HashSet#toString:()Ljava/lang/String;", (318, 11));
//     methods.insert("java/util/HashSet#<clinit>:()V", (318, 12));
//     methods.insert("java/util/HashSetMyIterator#<init>:(Ljava/util/Iterator;)V", (319, 0));
//     methods.insert("java/util/HashSetMyIterator#next:()Ljava/lang/Object;", (319, 1));
//     methods.insert("java/util/HashSetMyIterator#hasNext:()Z", (319, 2));
//     methods.insert("java/util/HashSetMyIterator#remove:()V", (319, 3));
//     methods.insert("java/util/Hashtable#<init>:(I)V", (320, 0));
//     methods.insert("java/util/Hashtable#<init>:()V", (320, 1));
//     methods.insert("java/util/Hashtable#<init>:(Ljava/util/Map;)V", (320, 2));
//     methods.insert("java/util/Hashtable#toString:()Ljava/lang/String;", (320, 3));
//     methods.insert("java/util/Hashtable#isEmpty:()Z", (320, 4));
//     methods.insert("java/util/Hashtable#size:()I", (320, 5));
//     methods.insert("java/util/Hashtable#containsKey:(Ljava/lang/Object;)Z", (320, 6));
//     methods.insert("java/util/Hashtable#containsValue:(Ljava/lang/Object;)Z", (320, 7));
//     methods.insert("java/util/Hashtable#get:(Ljava/lang/Object;)Ljava/lang/Object;", (320, 8));
//     methods.insert("java/util/Hashtable#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", (320, 9));
//     methods.insert("java/util/Hashtable#putAll:(Ljava/util/Map;)V", (320, 10));
//     methods.insert("java/util/Hashtable#remove:(Ljava/lang/Object;)Ljava/lang/Object;", (320, 11));
//     methods.insert("java/util/Hashtable#clear:()V", (320, 12));
//     methods.insert("java/util/Hashtable#keys:()Ljava/util/Enumeration;", (320, 13));
//     methods.insert("java/util/Hashtable#elements:()Ljava/util/Enumeration;", (320, 14));
//     methods.insert("java/util/Hashtable#entrySet:()Ljava/util/Set;", (320, 15));
//     methods.insert("java/util/Hashtable#keySet:()Ljava/util/Set;", (320, 16));
//     methods.insert("java/util/Hashtable#values:()Ljava/util/Collection;", (320, 17));
//     methods.insert("java/util/IdentityHashMap#<init>:(I)V", (321, 0));
//     methods.insert("java/util/IdentityHashMap#<init>:()V", (321, 1));
//     methods.insert("java/util/IdentityHashMap#isEmpty:()Z", (321, 2));
//     methods.insert("java/util/IdentityHashMap#size:()I", (321, 3));
//     methods.insert("java/util/IdentityHashMap#containsKey:(Ljava/lang/Object;)Z", (321, 4));
//     methods.insert("java/util/IdentityHashMap#containsValue:(Ljava/lang/Object;)Z", (321, 5));
//     methods.insert("java/util/IdentityHashMap#get:(Ljava/lang/Object;)Ljava/lang/Object;", (321, 6));
//     methods.insert("java/util/IdentityHashMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", (321, 7));
//     methods.insert("java/util/IdentityHashMap#putAll:(Ljava/util/Map;)V", (321, 8));
//     methods.insert("java/util/IdentityHashMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;", (321, 9));
//     methods.insert("java/util/IdentityHashMap#clear:()V", (321, 10));
//     methods.insert("java/util/IdentityHashMap#entrySet:()Ljava/util/Set;", (321, 11));
//     methods.insert("java/util/IdentityHashMap#keySet:()Ljava/util/Set;", (321, 12));
//     methods.insert("java/util/IdentityHashMap#values:()Ljava/util/Collection;", (321, 13));
//     methods.insert("java/util/IdentityHashMapMyHelper#<init>:()V", (322, 0));
//     methods.insert("java/util/IdentityHashMapMyHelper#hash:(Ljava/lang/Object;)I", (322, 1));
//     methods.insert("java/util/IdentityHashMapMyHelper#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (322, 2));
//     methods.insert("java/util/IllegalFormatException#<init>:()V", (323, 0));
//     methods.insert("java/util/IllegalFormatException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (323, 1));
//     methods.insert("java/util/IllegalFormatException#<init>:(Ljava/lang/String;)V", (323, 2));
//     methods.insert("java/util/IllegalFormatException#<init>:(Ljava/lang/Throwable;)V", (323, 3));
//     methods.insert("java/util/IterationModificationException#<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V", (324, 0));
//     methods.insert("java/util/IterationModificationException#<init>:(Ljava/lang/String;)V", (324, 1));
//     methods.insert("java/util/IterationModificationException#<init>:(Ljava/lang/Throwable;)V", (324, 2));
//     methods.insert("java/util/IterationModificationException#<init>:()V", (324, 3));
//     methods.insert("java/util/Iterator#next:()Ljava/lang/Object;", (325, 0));
//     methods.insert("java/util/Iterator#hasNext:()Z", (325, 1));
//     methods.insert("java/util/Iterator#remove:()V", (325, 2));
//     methods.insert("java/util/IteratorEnumeration#<init>:(Ljava/util/Iterator;)V", (326, 0));
//     methods.insert("java/util/IteratorEnumeration#nextElement:()Ljava/lang/Object;", (326, 1));
//     methods.insert("java/util/IteratorEnumeration#hasMoreElements:()Z", (326, 2));
//     methods.insert("java/util/LinkedList#<init>:(Ljava/util/Collection;)V", (327, 0));
//     methods.insert("java/util/LinkedList#<init>:()V", (327, 1));
//     methods.insert("java/util/LinkedList#getFront:()Ljava/util/LinkedListCell;", (327, 2));
//     methods.insert("java/util/LinkedList#removeCell:(Ljava/util/LinkedListCell;)V", (327, 3));
//     methods.insert("java/util/LinkedList#incrementSize:()V", (327, 4));
//     methods.insert("java/util/LinkedList#find:(I)Ljava/util/LinkedListCell;", (327, 5));
//     methods.insert("java/util/LinkedList#equal:(Ljava/lang/Object;Ljava/lang/Object;)Z", (327, 6));
//     methods.insert("java/util/LinkedList#addFirst:(Ljava/util/LinkedListCell;)V", (327, 7));
//     methods.insert("java/util/LinkedList#addLast:(Ljava/util/LinkedListCell;)V", (327, 8));
//     methods.insert("java/util/LinkedList#find:(Ljava/lang/Object;)Ljava/util/LinkedListCell;", (327, 9));
//     methods.insert("java/util/LinkedList#remove:(Ljava/util/LinkedListCell;)V", (327, 10));
//     methods.insert("java/util/LinkedList#size:()I", (327, 11));
//     methods.insert("java/util/LinkedList#contains:(Ljava/lang/Object;)Z", (327, 12));
//     methods.insert("java/util/LinkedList#indexOf:(Ljava/lang/Object;)I", (327, 13));
//     methods.insert("java/util/LinkedList#lastIndexOf:(Ljava/lang/Object;)I", (327, 14));
//     methods.insert("java/util/LinkedList#offer:(Ljava/lang/Object;)Z", (327, 15));
//     methods.insert("java/util/LinkedList#add:(Ljava/lang/Object;)Z", (327, 16));
//     methods.insert("java/util/LinkedList#addAll:(Ljava/util/Collection;)Z", (327, 17));
//     methods.insert("java/util/LinkedList#add:(ILjava/lang/Object;)V", (327, 18));
//     methods.insert("java/util/LinkedList#offerFirst:(Ljava/lang/Object;)Z", (327, 19));
//     methods.insert("java/util/LinkedList#push:(Ljava/lang/Object;)V", (327, 20));
//     methods.insert("java/util/LinkedList#addFirst:(Ljava/lang/Object;)V", (327, 21));
//     methods.insert("java/util/LinkedList#offerLast:(Ljava/lang/Object;)Z", (327, 22));
//     methods.insert("java/util/LinkedList#addLast:(Ljava/lang/Object;)V", (327, 23));
//     methods.insert("java/util/LinkedList#get:(I)Ljava/lang/Object;", (327, 24));
//     methods.insert("java/util/LinkedList#set:(ILjava/lang/Object;)Ljava/lang/Object;", (327, 25));
//     methods.insert("java/util/LinkedList#peek:()Ljava/lang/Object;", (327, 26));
//     methods.insert("java/util/LinkedList#peekFirst:()Ljava/lang/Object;", (327, 27));
//     methods.insert("java/util/LinkedList#getFirst:()Ljava/lang/Object;", (327, 28));
//     methods.insert("java/util/LinkedList#peekLast:()Ljava/lang/Object;", (327, 29));
//     methods.insert("java/util/LinkedList#getLast:()Ljava/lang/Object;", (327, 30));
//     methods.insert("java/util/LinkedList#remove:(I)Ljava/lang/Object;", (327, 31));
//     methods.insert("java/util/LinkedList#isEmpty:()Z", (327, 32));
//     methods.insert("java/util/LinkedList#poll:()Ljava/lang/Object;", (327, 33));
//     methods.insert("java/util/LinkedList#pollFirst:()Ljava/lang/Object;", (327, 34));
//     methods.insert("java/util/LinkedList#removeFirst:()Ljava/lang/Object;", (327, 35));
//     methods.insert("java/util/LinkedList#pop:()Ljava/lang/Object;", (327, 36));
//     methods.insert("java/util/LinkedList#remove:()Ljava/lang/Object;", (327, 37));
//     methods.insert("java/util/LinkedList#pollLast:()Ljava/lang/Object;", (327, 38));
//     methods.insert("java/util/LinkedList#removeLast:()Ljava/lang/Object;", (327, 39));
//     methods.insert("java/util/LinkedList#remove:(Ljava/lang/Object;)Z", (327, 40));
//     methods.insert("java/util/LinkedList#clear:()V", (327, 41));
//     methods.insert("java/util/LinkedList#iterator:()Ljava/util/Iterator;", (327, 42));
//     methods.insert("java/util/LinkedList#listIterator:()Ljava/util/ListIterator;", (327, 43));
//     methods.insert("java/util/LinkedList#listIterator:(I)Ljava/util/ListIterator;", (327, 44));
//     methods.insert("java/util/LinkedList#descendingIterator:()Ljava/util/Iterator;", (327, 45));
//     methods.insert("java/util/LinkedList#toString:()Ljava/lang/String;", (327, 46));
//     methods.insert("java/util/LinkedList#element:()Ljava/lang/Object;", (327, 47));
//     methods.insert("java/util/LinkedList#removeFirstOccurrence:(Ljava/lang/Object;)Z", (327, 48));
//     methods.insert("java/util/LinkedList#removeLastOccurrence:(Ljava/lang/Object;)Z", (327, 49));
//     methods.insert("java/util/LinkedListCell#<init>:(Ljava/lang/Object;Ljava/util/LinkedListCell;Ljava/util/LinkedListCell;)V", (328, 0));
//     methods.insert("java/util/LinkedListDescendingIterator#<init>:(Ljava/util/ListIterator;)V", (329, 0));
//     methods.insert("java/util/LinkedListDescendingIterator#next:()Ljava/lang/Object;", (329, 1));
//     methods.insert("java/util/LinkedListDescendingIterator#hasNext:()Z", (329, 2));
//     methods.insert("java/util/LinkedListDescendingIterator#remove:()V", (329, 3));
//     methods.insert("java/util/LinkedListMyIterator#<init>:(Ljava/util/LinkedList;)V", (330, 0));
//     methods.insert("java/util/LinkedListMyIterator#previous:()Ljava/lang/Object;", (330, 1));
//     methods.insert("java/util/LinkedListMyIterator#next:()Ljava/lang/Object;", (330, 2));
//     methods.insert("java/util/LinkedListMyIterator#hasNext:()Z", (330, 3));
//     methods.insert("java/util/LinkedListMyIterator#hasPrevious:()Z", (330, 4));
//     methods.insert("java/util/LinkedListMyIterator#remove:()V", (330, 5));
//     methods.insert("java/util/LinkedListMyIterator#nextIndex:()I", (330, 6));
//     methods.insert("java/util/LinkedListMyIterator#previousIndex:()I", (330, 7));
//     methods.insert("java/util/LinkedListMyIterator#set:(Ljava/lang/Object;)V", (330, 8));
//     methods.insert("java/util/LinkedListMyIterator#add:(Ljava/lang/Object;)V", (330, 9));
//     methods.insert("java/util/List#size:()I", (331, 0));
//     methods.insert("java/util/List#get:(I)Ljava/lang/Object;", (331, 1));
//     methods.insert("java/util/List#set:(ILjava/lang/Object;)Ljava/lang/Object;", (331, 2));
//     methods.insert("java/util/List#remove:(I)Ljava/lang/Object;", (331, 3));
//     methods.insert("java/util/List#add:(Ljava/lang/Object;)Z", (331, 4));
//     methods.insert("java/util/List#add:(ILjava/lang/Object;)V", (331, 5));
//     methods.insert("java/util/List#addAll:(ILjava/util/Collection;)Z", (331, 6));
//     methods.insert("java/util/List#indexOf:(Ljava/lang/Object;)I", (331, 7));
//     methods.insert("java/util/List#lastIndexOf:(Ljava/lang/Object;)I", (331, 8));
//     methods.insert("java/util/List#isEmpty:()Z", (331, 9));
//     methods.insert("java/util/List#iterator:()Ljava/util/Iterator;", (331, 10));
//     methods.insert("java/util/List#listIterator:(I)Ljava/util/ListIterator;", (331, 11));
//     methods.insert("java/util/List#listIterator:()Ljava/util/ListIterator;", (331, 12));
//     methods.insert("java/util/ListIterator#hasPrevious:()Z", (332, 0));
//     methods.insert("java/util/ListIterator#previous:()Ljava/lang/Object;", (332, 1));
//     methods.insert("java/util/Map#isEmpty:()Z", (333, 0));
//     methods.insert("java/util/Map#size:()I", (333, 1));
//     methods.insert("java/util/Map#containsKey:(Ljava/lang/Object;)Z", (333, 2));
//     methods.insert("java/util/Map#containsValue:(Ljava/lang/Object;)Z", (333, 3));
//     methods.insert("java/util/Map#get:(Ljava/lang/Object;)Ljava/lang/Object;", (333, 4));
//     methods.insert("java/util/Map#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", (333, 5));
//     methods.insert("java/util/Map#putAll:(Ljava/util/Map;)V", (333, 6));
//     methods.insert("java/util/Map#remove:(Ljava/lang/Object;)Ljava/lang/Object;", (333, 7));
//     methods.insert("java/util/Map#clear:()V", (333, 8));
//     methods.insert("java/util/Map#entrySet:()Ljava/util/Set;", (333, 9));
//     methods.insert("java/util/Map#keySet:()Ljava/util/Set;", (333, 10));
//     methods.insert("java/util/Map#values:()Ljava/util/Collection;", (333, 11));
//     methods.insert("java/util/Map#equals:(Ljava/lang/Object;)Z", (333, 12));
//     methods.insert("java/util/Map#hashCode:()I", (333, 13));
//     methods.insert("java/util/MaskInfo#<init>:(JI)V", (334, 0));
//     methods.insert("java/util/MaskInfoIterator#longPosition:(I)I", (335, 0));
//     methods.insert("java/util/MaskInfoIterator#getTrueMask:(II)J", (335, 1));
//     methods.insert("java/util/MaskInfoIterator#<init>:(II)V", (335, 2));
//     methods.insert("java/util/MaskInfoIterator#next:()Ljava/util/MaskInfo;", (335, 3));
//     methods.insert("java/util/MaskInfoIterator#hasNext:()Z", (335, 4));
//     methods.insert("java/util/MaskInfoIterator#remove:()V", (335, 5));
//     methods.insert("java/util/MaskInfoIterator#getLastPartition:()I", (335, 6));
//     methods.insert("java/util/MaskInfoIterator#next:()Ljava/lang/Object;", (335, 7));
//     methods.insert("java/util/NoSuchElementException#<init>:(Ljava/lang/String;)V", (336, 0));
//     methods.insert("java/util/NoSuchElementException#<init>:()V", (336, 1));
//     methods.insert("java/util/Objects#<init>:()V", (337, 0));
//     methods.insert("java/util/Objects#compare:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I", (337, 1));
//     methods.insert("java/util/Objects#deepEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z", (337, 2));
//     methods.insert("java/util/Objects#equals:(Ljava/lang/Object;Ljava/lang/Object;)Z", (337, 3));
//     methods.insert("java/util/Objects#hash:([Ljava/lang/Object;)I", (337, 4));
//     methods.insert("java/util/Objects#hashCode:(Ljava/lang/Object;)I", (337, 5));
//     methods.insert("java/util/Objects#requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;", (337, 6));
//     methods.insert("java/util/Objects#requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", (337, 7));
//     methods.insert("java/util/Objects#toString:(Ljava/lang/Object;)Ljava/lang/String;", (337, 8));
//     methods.insert("java/util/Objects#toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;", (337, 9));
//     methods.insert("java/util/Queue#add:(Ljava/lang/Object;)Z", (338, 0));
//     methods.insert("java/util/Queue#element:()Ljava/lang/Object;", (338, 1));
//     methods.insert("java/util/Queue#offer:(Ljava/lang/Object;)Z", (338, 2));
//     methods.insert("java/util/Queue#peek:()Ljava/lang/Object;", (338, 3));
//     methods.insert("java/util/Queue#poll:()Ljava/lang/Object;", (338, 4));
//     methods.insert("java/util/Queue#remove:()Ljava/lang/Object;", (338, 5));
//     methods.insert("java/util/RandomAccessSynchronizedList#<init>:(Ljava/util/List;)V", (340, 0));
//     methods.insert("java/util/ReverseComparator#<init>:(Ljava/util/Comparator;)V", (341, 0));
//     methods.insert("java/util/ReverseComparator#compare:(Ljava/lang/Object;Ljava/lang/Object;)I", (341, 1));
//     methods.insert("java/util/Set#iterator:()Ljava/util/Iterator;", (342, 0));
//     methods.insert("java/util/SynchronizedCollection#<init>:(Ljava/lang/Object;Ljava/util/Collection;)V", (343, 0));
//     methods.insert("java/util/SynchronizedCollection#size:()I", (343, 1));
//     methods.insert("java/util/SynchronizedCollection#isEmpty:()Z", (343, 2));
//     methods.insert("java/util/SynchronizedCollection#contains:(Ljava/lang/Object;)Z", (343, 3));
//     methods.insert("java/util/SynchronizedCollection#add:(Ljava/lang/Object;)Z", (343, 4));
//     methods.insert("java/util/SynchronizedCollection#addAll:(Ljava/util/Collection;)Z", (343, 5));
//     methods.insert("java/util/SynchronizedCollection#remove:(Ljava/lang/Object;)Z", (343, 6));
//     methods.insert("java/util/SynchronizedCollection#toArray:()[Ljava/lang/Object;", (343, 7));
//     methods.insert("java/util/SynchronizedCollection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (343, 8));
//     methods.insert("java/util/SynchronizedCollection#clear:()V", (343, 9));
//     methods.insert("java/util/SynchronizedCollection#iterator:()Ljava/util/Iterator;", (343, 10));
//     methods.insert("java/util/SynchronizedCollection#containsAll:(Ljava/util/Collection;)Z", (343, 11));
//     methods.insert("java/util/SynchronizedCollection#removeAll:(Ljava/util/Collection;)Z", (343, 12));
//     methods.insert("java/util/SynchronizedIterator#<init>:(Ljava/lang/Object;Ljava/util/Iterator;)V", (344, 0));
//     methods.insert("java/util/SynchronizedIterator#next:()Ljava/lang/Object;", (344, 1));
//     methods.insert("java/util/SynchronizedIterator#hasNext:()Z", (344, 2));
//     methods.insert("java/util/SynchronizedIterator#remove:()V", (344, 3));
//     methods.insert("java/util/SynchronizedList#<init>:(Ljava/util/List;)V", (345, 0));
//     methods.insert("java/util/SynchronizedList#get:(I)Ljava/lang/Object;", (345, 1));
//     methods.insert("java/util/SynchronizedList#set:(ILjava/lang/Object;)Ljava/lang/Object;", (345, 2));
//     methods.insert("java/util/SynchronizedList#remove:(I)Ljava/lang/Object;", (345, 3));
//     methods.insert("java/util/SynchronizedList#add:(ILjava/lang/Object;)V", (345, 4));
//     methods.insert("java/util/SynchronizedList#addAll:(ILjava/util/Collection;)Z", (345, 5));
//     methods.insert("java/util/SynchronizedList#indexOf:(Ljava/lang/Object;)I", (345, 6));
//     methods.insert("java/util/SynchronizedList#lastIndexOf:(Ljava/lang/Object;)I", (345, 7));
//     methods.insert("java/util/SynchronizedList#listIterator:(I)Ljava/util/ListIterator;", (345, 8));
//     methods.insert("java/util/SynchronizedList#listIterator:()Ljava/util/ListIterator;", (345, 9));
//     methods.insert("java/util/SynchronizedMap#<init>:(Ljava/util/Map;)V", (346, 0));
//     methods.insert("java/util/SynchronizedMap#<init>:(Ljava/lang/Object;Ljava/util/Map;)V", (346, 1));
//     methods.insert("java/util/SynchronizedMap#clear:()V", (346, 2));
//     methods.insert("java/util/SynchronizedMap#containsKey:(Ljava/lang/Object;)Z", (346, 3));
//     methods.insert("java/util/SynchronizedMap#containsValue:(Ljava/lang/Object;)Z", (346, 4));
//     methods.insert("java/util/SynchronizedMap#entrySet:()Ljava/util/Set;", (346, 5));
//     methods.insert("java/util/SynchronizedMap#get:(Ljava/lang/Object;)Ljava/lang/Object;", (346, 6));
//     methods.insert("java/util/SynchronizedMap#isEmpty:()Z", (346, 7));
//     methods.insert("java/util/SynchronizedMap#keySet:()Ljava/util/Set;", (346, 8));
//     methods.insert("java/util/SynchronizedMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", (346, 9));
//     methods.insert("java/util/SynchronizedMap#putAll:(Ljava/util/Map;)V", (346, 10));
//     methods.insert("java/util/SynchronizedMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;", (346, 11));
//     methods.insert("java/util/SynchronizedMap#size:()I", (346, 12));
//     methods.insert("java/util/SynchronizedMap#values:()Ljava/util/Collection;", (346, 13));
//     methods.insert("java/util/SynchronizedSet#<init>:(Ljava/lang/Object;Ljava/util/Set;)V", (347, 0));
//     methods.insert("java/util/UnmodifiableCollection#<init>:(Ljava/util/Collection;)V", (348, 0));
//     methods.insert("java/util/UnmodifiableCollection#iterator:()Ljava/util/Iterator;", (348, 1));
//     methods.insert("java/util/UnmodifiableCollection#size:()I", (348, 2));
//     methods.insert("java/util/UnmodifiableCollection#isEmpty:()Z", (348, 3));
//     methods.insert("java/util/UnmodifiableCollection#contains:(Ljava/lang/Object;)Z", (348, 4));
//     methods.insert("java/util/UnmodifiableCollection#containsAll:(Ljava/util/Collection;)Z", (348, 5));
//     methods.insert("java/util/UnmodifiableCollection#add:(Ljava/lang/Object;)Z", (348, 6));
//     methods.insert("java/util/UnmodifiableCollection#addAll:(Ljava/util/Collection;)Z", (348, 7));
//     methods.insert("java/util/UnmodifiableCollection#remove:(Ljava/lang/Object;)Z", (348, 8));
//     methods.insert("java/util/UnmodifiableCollection#removeAll:(Ljava/util/Collection;)Z", (348, 9));
//     methods.insert("java/util/UnmodifiableCollection#toArray:()[Ljava/lang/Object;", (348, 10));
//     methods.insert("java/util/UnmodifiableCollection#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (348, 11));
//     methods.insert("java/util/UnmodifiableCollection#clear:()V", (348, 12));
//     methods.insert("java/util/UnmodifiableIterator#<init>:(Ljava/util/Iterator;)V", (349, 0));
//     methods.insert("java/util/UnmodifiableIterator#next:()Ljava/lang/Object;", (349, 1));
//     methods.insert("java/util/UnmodifiableIterator#hasNext:()Z", (349, 2));
//     methods.insert("java/util/UnmodifiableIterator#remove:()V", (349, 3));
//     methods.insert("java/util/UnmodifiableList#<init>:(Ljava/util/List;)V", (350, 0));
//     methods.insert("java/util/UnmodifiableList#get:(I)Ljava/lang/Object;", (350, 1));
//     methods.insert("java/util/UnmodifiableList#set:(ILjava/lang/Object;)Ljava/lang/Object;", (350, 2));
//     methods.insert("java/util/UnmodifiableList#remove:(I)Ljava/lang/Object;", (350, 3));
//     methods.insert("java/util/UnmodifiableList#remove:(Ljava/lang/Object;)Z", (350, 4));
//     methods.insert("java/util/UnmodifiableList#add:(Ljava/lang/Object;)Z", (350, 5));
//     methods.insert("java/util/UnmodifiableList#add:(ILjava/lang/Object;)V", (350, 6));
//     methods.insert("java/util/UnmodifiableList#iterator:()Ljava/util/Iterator;", (350, 7));
//     methods.insert("java/util/UnmodifiableList#indexOf:(Ljava/lang/Object;)I", (350, 8));
//     methods.insert("java/util/UnmodifiableList#lastIndexOf:(Ljava/lang/Object;)I", (350, 9));
//     methods.insert("java/util/UnmodifiableList#isEmpty:()Z", (350, 10));
//     methods.insert("java/util/UnmodifiableList#listIterator:(I)Ljava/util/ListIterator;", (350, 11));
//     methods.insert("java/util/UnmodifiableList#listIterator:()Ljava/util/ListIterator;", (350, 12));
//     methods.insert("java/util/UnmodifiableList#size:()I", (350, 13));
//     methods.insert("java/util/UnmodifiableList#contains:(Ljava/lang/Object;)Z", (350, 14));
//     methods.insert("java/util/UnmodifiableList#addAll:(Ljava/util/Collection;)Z", (350, 15));
//     methods.insert("java/util/UnmodifiableList#toArray:()[Ljava/lang/Object;", (350, 16));
//     methods.insert("java/util/UnmodifiableList#toArray:([Ljava/lang/Object;)[Ljava/lang/Object;", (350, 17));
//     methods.insert("java/util/UnmodifiableList#clear:()V", (350, 18));
//     methods.insert("java/util/UnmodifiableList#removeAll:(Ljava/util/Collection;)Z", (350, 19));
//     methods.insert("java/util/UnmodifiableList#addAll:(ILjava/util/Collection;)Z", (350, 20));
//     methods.insert("java/util/UnmodifiableList#containsAll:(Ljava/util/Collection;)Z", (350, 21));
//     methods.insert("java/util/UnmodifiableListIterator#<init>:(Ljava/util/ListIterator;)V", (351, 0));
//     methods.insert("java/util/UnmodifiableListIterator#hasPrevious:()Z", (351, 1));
//     methods.insert("java/util/UnmodifiableListIterator#previous:()Ljava/lang/Object;", (351, 2));
//     methods.insert("java/util/UnmodifiableMap#<init>:(Ljava/util/Map;)V", (352, 0));
//     methods.insert("java/util/UnmodifiableMap#clear:()V", (352, 1));
//     methods.insert("java/util/UnmodifiableMap#containsKey:(Ljava/lang/Object;)Z", (352, 2));
//     methods.insert("java/util/UnmodifiableMap#containsValue:(Ljava/lang/Object;)Z", (352, 3));
//     methods.insert("java/util/UnmodifiableMap#entrySet:()Ljava/util/Set;", (352, 4));
//     methods.insert("java/util/UnmodifiableMap#get:(Ljava/lang/Object;)Ljava/lang/Object;", (352, 5));
//     methods.insert("java/util/UnmodifiableMap#isEmpty:()Z", (352, 6));
//     methods.insert("java/util/UnmodifiableMap#keySet:()Ljava/util/Set;", (352, 7));
//     methods.insert("java/util/UnmodifiableMap#put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", (352, 8));
//     methods.insert("java/util/UnmodifiableMap#putAll:(Ljava/util/Map;)V", (352, 9));
//     methods.insert("java/util/UnmodifiableMap#remove:(Ljava/lang/Object;)Ljava/lang/Object;", (352, 10));
//     methods.insert("java/util/UnmodifiableMap#size:()I", (352, 11));
//     methods.insert("java/util/UnmodifiableMap#values:()Ljava/util/Collection;", (352, 12));
//     methods.insert("java/util/UnmodifiableSet#<init>:(Ljava/util/Set;)V", (353, 0));
//     let mut fields = FxHashMap::default();
//     fields.insert("java/base/Addendum#pool:Ljava/base/Singleton;", (0, 0));
//     fields.insert("java/base/Addendum#annotationTable:Ljava/lang/Object;", (0, 1));
//     fields.insert("java/base/Addendum#signature:Ljava/lang/Object;", (0, 2));
//     fields.insert("java/base/AnnotationInvocationHandler#data:[Ljava/lang/Object;", (1, 0));
//     fields.insert("java/base/Assembler#ACC_PUBLIC:I", (2, 0));
//     fields.insert("java/base/Assembler#ACC_STATIC:I", (2, 1));
//     fields.insert("java/base/Assembler#aaload:I", (2, 2));
//     fields.insert("java/base/Assembler#aastore:I", (2, 3));
//     fields.insert("java/base/Assembler#aload:I", (2, 4));
//     fields.insert("java/base/Assembler#aload_0:I", (2, 5));
//     fields.insert("java/base/Assembler#aload_1:I", (2, 6));
//     fields.insert("java/base/Assembler#astore_0:I", (2, 7));
//     fields.insert("java/base/Assembler#anewarray:I", (2, 8));
//     fields.insert("java/base/Assembler#areturn:I", (2, 9));
//     fields.insert("java/base/Assembler#dload:I", (2, 10));
//     fields.insert("java/base/Assembler#dreturn:I", (2, 11));
//     fields.insert("java/base/Assembler#dup:I", (2, 12));
//     fields.insert("java/base/Assembler#fload:I", (2, 13));
//     fields.insert("java/base/Assembler#freturn:I", (2, 14));
//     fields.insert("java/base/Assembler#getfield:I", (2, 15));
//     fields.insert("java/base/Assembler#goto_:I", (2, 16));
//     fields.insert("java/base/Assembler#iload:I", (2, 17));
//     fields.insert("java/base/Assembler#invokeinterface:I", (2, 18));
//     fields.insert("java/base/Assembler#invokespecial:I", (2, 19));
//     fields.insert("java/base/Assembler#invokestatic:I", (2, 20));
//     fields.insert("java/base/Assembler#invokevirtual:I", (2, 21));
//     fields.insert("java/base/Assembler#ireturn:I", (2, 22));
//     fields.insert("java/base/Assembler#jsr:I", (2, 23));
//     fields.insert("java/base/Assembler#ldc_w:I", (2, 24));
//     fields.insert("java/base/Assembler#lload:I", (2, 25));
//     fields.insert("java/base/Assembler#lreturn:I", (2, 26));
//     fields.insert("java/base/Assembler#new_:I", (2, 27));
//     fields.insert("java/base/Assembler#pop:I", (2, 28));
//     fields.insert("java/base/Assembler#putfield:I", (2, 29));
//     fields.insert("java/base/Assembler#ret:I", (2, 30));
//     fields.insert("java/base/Assembler#return_:I", (2, 31));
//     fields.insert("java/base/Cell#value:Ljava/lang/Object;", (6, 0));
//     fields.insert("java/base/Cell#next:Ljava/base/Cell;", (6, 1));
//     fields.insert("java/base/ClassAddendum#interfaceTable:[Ljava/lang/Object;", (7, 0));
//     fields.insert("java/base/ClassAddendum#innerClassTable:[Ljava/base/InnerClassReference;", (7, 1));
//     fields.insert("java/base/ClassAddendum#declaredMethodCount:I", (7, 2));
//     fields.insert("java/base/ClassAddendum#enclosingClass:[B", (7, 3));
//     fields.insert("java/base/ClassAddendum#enclosingMethod:Ljava/base/Pair;", (7, 4));
//     fields.insert("java/base/ClassPoolEntry#CONSTANT_Class:I", (8, 0));
//     fields.insert("java/base/ClassPoolEntry#nameIndex:I", (8, 1));
//     fields.insert("java/base/Classes#LinkFlag:I", (9, 0));
//     fields.insert("java/base/DataEntrySet#map:Ljava/base/DataEntryMap;", (14, 0));
//     fields.insert("java/base/DataKeyIterator#it:Ljava/util/Iterator;", (15, 0));
//     fields.insert("java/base/DataKeySet#map:Ljava/base/DataEntryMap;", (16, 0));
//     fields.insert("java/base/DataValueIterator#it:Ljava/util/Iterator;", (17, 0));
//     fields.insert("java/base/DataValues#map:Ljava/base/DataEntryMap;", (18, 0));
//     fields.insert("java/base/FieldData#flags:I", (20, 0));
//     fields.insert("java/base/FieldData#nameIndex:I", (20, 1));
//     fields.insert("java/base/FieldData#specIndex:I", (20, 2));
//     fields.insert("java/base/FieldRefPoolEntry#CONSTANT_Fieldref:I", (21, 0));
//     fields.insert("java/base/FieldRefPoolEntry#classIndex:I", (21, 1));
//     fields.insert("java/base/FieldRefPoolEntry#nameAndTypeIndex:I", (21, 2));
//     fields.insert("java/base/InnerClassReference#inner:[B", (24, 0));
//     fields.insert("java/base/InnerClassReference#outer:[B", (24, 1));
//     fields.insert("java/base/InnerClassReference#name:[B", (24, 2));
//     fields.insert("java/base/InnerClassReference#flags:S", (24, 3));
//     fields.insert("java/base/IntegerPoolEntry#CONSTANT_Integer:I", (25, 0));
//     fields.insert("java/base/IntegerPoolEntry#value:I", (25, 1));
//     fields.insert("java/base/InterfaceMethodRefPoolEntry#CONSTANT_InterfaceMethodref:I", (26, 0));
//     fields.insert("java/base/InterfaceMethodRefPoolEntry#classIndex:I", (26, 1));
//     fields.insert("java/base/InterfaceMethodRefPoolEntry#nameAndTypeIndex:I", (26, 2));
//     fields.insert("java/base/MethodAddendum#exceptionTable:Ljava/lang/Object;", (27, 0));
//     fields.insert("java/base/MethodAddendum#annotationDefault:Ljava/lang/Object;", (27, 1));
//     fields.insert("java/base/MethodAddendum#parameterAnnotationTable:Ljava/lang/Object;", (27, 2));
//     fields.insert("java/base/MethodData#flags:I", (28, 0));
//     fields.insert("java/base/MethodData#nameIndex:I", (28, 1));
//     fields.insert("java/base/MethodData#specIndex:I", (28, 2));
//     fields.insert("java/base/MethodData#code:[B", (28, 3));
//     fields.insert("java/base/MethodRefPoolEntry#CONSTANT_Methodref:I", (29, 0));
//     fields.insert("java/base/MethodRefPoolEntry#classIndex:I", (29, 1));
//     fields.insert("java/base/MethodRefPoolEntry#nameAndTypeIndex:I", (29, 2));
//     fields.insert("java/base/NameAndTypePoolEntry#CONSTANT_NameAndType:I", (30, 0));
//     fields.insert("java/base/NameAndTypePoolEntry#nameIndex:I", (30, 1));
//     fields.insert("java/base/NameAndTypePoolEntry#typeIndex:I", (30, 2));
//     fields.insert("java/base/StringPoolEntry#CONSTANT_String:I", (35, 0));
//     fields.insert("java/base/StringPoolEntry#valueIndex:I", (35, 1));
//     fields.insert("java/base/Utf8PoolEntry#CONSTANT_Utf8:I", (38, 0));
//     fields.insert("java/base/Utf8PoolEntry#data:Ljava/lang/String;", (38, 1));
//     fields.insert("java/base/VMClass#flags:S", (39, 0));
//     fields.insert("java/base/VMClass#vmFlags:S", (39, 1));
//     fields.insert("java/base/VMClass#fixedSize:S", (39, 2));
//     fields.insert("java/base/VMClass#arrayElementSize:B", (39, 3));
//     fields.insert("java/base/VMClass#arrayDimensions:B", (39, 4));
//     fields.insert("java/base/VMClass#arrayElementClass:Ljava/base/VMClass;", (39, 5));
//     fields.insert("java/base/VMClass#runtimeDataIndex:I", (39, 6));
//     fields.insert("java/base/VMClass#objectMask:[I", (39, 7));
//     fields.insert("java/base/VMClass#name:[B", (39, 8));
//     fields.insert("java/base/VMClass#sourceFile:[B", (39, 9));
//     fields.insert("java/base/VMClass#super_:Ljava/base/VMClass;", (39, 10));
//     fields.insert("java/base/VMClass#interfaceTable:[Ljava/lang/Object;", (39, 11));
//     fields.insert("java/base/VMClass#virtualTable:[Ljava/base/VMMethod;", (39, 12));
//     fields.insert("java/base/VMClass#fieldTable:[Ljava/base/VMField;", (39, 13));
//     fields.insert("java/base/VMClass#methodTable:[Ljava/base/VMMethod;", (39, 14));
//     fields.insert("java/base/VMClass#addendum:Ljava/base/ClassAddendum;", (39, 15));
//     fields.insert("java/base/VMClass#staticTable:Ljava/base/Singleton;", (39, 16));
//     fields.insert("java/base/VMClass#loader:Ljava/lang/ClassLoader;", (39, 17));
//     fields.insert("java/base/VMClass#source:[B", (39, 18));
//     fields.insert("java/base/VMField#vmFlags:B", (40, 0));
//     fields.insert("java/base/VMField#code:B", (40, 1));
//     fields.insert("java/base/VMField#flags:S", (40, 2));
//     fields.insert("java/base/VMField#offset:S", (40, 3));
//     fields.insert("java/base/VMField#nativeID:I", (40, 4));
//     fields.insert("java/base/VMField#name:[B", (40, 5));
//     fields.insert("java/base/VMField#spec:[B", (40, 6));
//     fields.insert("java/base/VMField#addendum:Ljava/base/FieldAddendum;", (40, 7));
//     fields.insert("java/base/VMField#class_:Ljava/base/VMClass;", (40, 8));
//     fields.insert("java/base/VMMethod#vmFlags:B", (41, 0));
//     fields.insert("java/base/VMMethod#returnCode:B", (41, 1));
//     fields.insert("java/base/VMMethod#parameterCount:B", (41, 2));
//     fields.insert("java/base/VMMethod#parameterFootprint:B", (41, 3));
//     fields.insert("java/base/VMMethod#flags:S", (41, 4));
//     fields.insert("java/base/VMMethod#offset:S", (41, 5));
//     fields.insert("java/base/VMMethod#nativeID:I", (41, 6));
//     fields.insert("java/base/VMMethod#runtimeDataIndex:I", (41, 7));
//     fields.insert("java/base/VMMethod#name:[B", (41, 8));
//     fields.insert("java/base/VMMethod#spec:[B", (41, 9));
//     fields.insert("java/base/VMMethod#addendum:Ljava/base/MethodAddendum;", (41, 10));
//     fields.insert("java/base/VMMethod#class_:Ljava/base/VMClass;", (41, 11));
//     fields.insert("java/base/VMMethod#code:Ljava/base/Code;", (41, 12));
//     fields.insert("java/io/ByteArrayInputStream#array:[B", (42, 0));
//     fields.insert("java/io/ByteArrayInputStream#position:I", (42, 1));
//     fields.insert("java/io/ByteArrayInputStream#limit:I", (42, 2));
//     fields.insert("java/io/ByteArrayOutputStream#BufferSize:I", (43, 0));
//     fields.insert("java/io/ByteArrayOutputStream#firstCell:Ljava/io/ByteArrayOutputStreamCell;", (43, 1));
//     fields.insert("java/io/ByteArrayOutputStream#curCell:Ljava/io/ByteArrayOutputStreamCell;", (43, 2));
//     fields.insert("java/io/ByteArrayOutputStream#length:I", (43, 3));
//     fields.insert("java/io/ByteArrayOutputStream#buffer:[B", (43, 4));
//     fields.insert("java/io/ByteArrayOutputStream#position:I", (43, 5));
//     fields.insert("java/io/ByteArrayOutputStreamCell#array:[B", (44, 0));
//     fields.insert("java/io/ByteArrayOutputStreamCell#offset:I", (44, 1));
//     fields.insert("java/io/ByteArrayOutputStreamCell#length:I", (44, 2));
//     fields.insert("java/io/ByteArrayOutputStreamCell#next:Ljava/io/ByteArrayOutputStreamCell;", (44, 3));
//     fields.insert("java/io/ObjectInputStream#HANDLE_OFFSET:I", (51, 0));
//     fields.insert("java/io/ObjectInputStream#in:Ljava/io/InputStream;", (51, 1));
//     fields.insert("java/io/ObjectInputStream#references:Ljava/util/ArrayList;", (51, 2));
//     fields.insert("java/io/ObjectInputStream#remainingBlockData:I", (51, 3));
//     fields.insert("java/io/ObjectInputStream#current:Ljava/lang/Object;", (51, 4));
//     fields.insert("java/io/ObjectInputStream#currentFields:[Ljava/lang/reflect/Field;", (51, 5));
//     fields.insert("java/io/ObjectInputStreamClassDesc#clazz:Ljava/lang/Class;", (52, 0));
//     fields.insert("java/io/ObjectInputStreamClassDesc#flags:I", (52, 1));
//     fields.insert("java/io/ObjectInputStreamClassDesc#fields:[Ljava/lang/reflect/Field;", (52, 2));
//     fields.insert("java/io/ObjectInputStreamClassDesc#superClassDesc:Ljava/io/ObjectInputStreamClassDesc;", (52, 3));
//     fields.insert("java/io/ObjectOutputStream#STREAM_MAGIC:S", (53, 0));
//     fields.insert("java/io/ObjectOutputStream#STREAM_VERSION:S", (53, 1));
//     fields.insert("java/io/ObjectOutputStream#TC_NULL:B", (53, 2));
//     fields.insert("java/io/ObjectOutputStream#TC_REFERENCE:B", (53, 3));
//     fields.insert("java/io/ObjectOutputStream#TC_CLASSDESC:B", (53, 4));
//     fields.insert("java/io/ObjectOutputStream#TC_OBJECT:B", (53, 5));
//     fields.insert("java/io/ObjectOutputStream#TC_STRING:B", (53, 6));
//     fields.insert("java/io/ObjectOutputStream#TC_ARRAY:B", (53, 7));
//     fields.insert("java/io/ObjectOutputStream#TC_CLASS:B", (53, 8));
//     fields.insert("java/io/ObjectOutputStream#TC_BLOCKDATA:B", (53, 9));
//     fields.insert("java/io/ObjectOutputStream#TC_ENDBLOCKDATA:B", (53, 10));
//     fields.insert("java/io/ObjectOutputStream#TC_RESET:B", (53, 11));
//     fields.insert("java/io/ObjectOutputStream#TC_BLOCKDATALONG:B", (53, 12));
//     fields.insert("java/io/ObjectOutputStream#TC_EXCEPTION:B", (53, 13));
//     fields.insert("java/io/ObjectOutputStream#TC_LONGSTRING:B", (53, 14));
//     fields.insert("java/io/ObjectOutputStream#TC_PROXYCLASSDESC:B", (53, 15));
//     fields.insert("java/io/ObjectOutputStream#TC_ENUM:B", (53, 16));
//     fields.insert("java/io/ObjectOutputStream#SC_WRITE_METHOD:B", (53, 17));
//     fields.insert("java/io/ObjectOutputStream#SC_BLOCK_DATA:B", (53, 18));
//     fields.insert("java/io/ObjectOutputStream#SC_SERIALIZABLE:B", (53, 19));
//     fields.insert("java/io/ObjectOutputStream#SC_EXTERNALIZABLE:B", (53, 20));
//     fields.insert("java/io/ObjectOutputStream#SC_ENUM:B", (53, 21));
//     fields.insert("java/io/ObjectOutputStream#out:Ljava/io/OutputStream;", (53, 22));
//     fields.insert("java/io/ObjectOutputStream#classHandle:I", (53, 23));
//     fields.insert("java/io/ObjectOutputStream#current:Ljava/lang/Object;", (53, 24));
//     fields.insert("java/lang/Address#TYPE_NAME:Ljava/lang/String;", (60, 0));
//     fields.insert("java/lang/Address#DEFAULT_LENGTH:I", (60, 1));
//     fields.insert("java/lang/Address#DEFAULT:Ljava/lang/Address;", (60, 2));
//     fields.insert("java/lang/Address#ZERO_ADDRESS:Ljava/lang/Address;", (60, 3));
//     fields.insert("java/lang/Address#value:Ljava/lang/Uint160;", (60, 4));
//     fields.insert("java/lang/Approval#indexed_owner:Ljava/lang/Address;", (62, 0));
//     fields.insert("java/lang/Approval#indexed_spender:Ljava/lang/Address;", (62, 1));
//     fields.insert("java/lang/Approval#value:Ljava/lang/Uint256;", (62, 2));
//     fields.insert("java/lang/Bool#TYPE_NAME:Ljava/lang/String;", (68, 0));
//     fields.insert("java/lang/Bool#DEFAULT:Ljava/lang/Bool;", (68, 1));
//     fields.insert("java/lang/Bool#TRUE:Ljava/lang/Bool;", (68, 2));
//     fields.insert("java/lang/Bool#FALSE:Ljava/lang/Bool;", (68, 3));
//     fields.insert("java/lang/Bool#value:Z", (68, 4));
//     fields.insert("java/lang/Boolean#TYPE:Ljava/lang/Class;", (69, 0));
//     fields.insert("java/lang/Boolean#FALSE:Ljava/lang/Boolean;", (69, 1));
//     fields.insert("java/lang/Boolean#TRUE:Ljava/lang/Boolean;", (69, 2));
//     fields.insert("java/lang/Boolean#value:Z", (69, 3));
//     fields.insert("java/lang/Byte#TYPE:Ljava/lang/Class;", (70, 0));
//     fields.insert("java/lang/Byte#MIN_VALUE:B", (70, 1));
//     fields.insert("java/lang/Byte#MAX_VALUE:B", (70, 2));
//     fields.insert("java/lang/Byte#value:B", (70, 3));
//     fields.insert("java/lang/Bytes#TYPE_NAME:Ljava/lang/String;", (71, 0));
//     fields.insert("java/lang/Bytes1#DEFAULT:Ljava/lang/Bytes1;", (72, 0));
//     fields.insert("java/lang/Bytes10#DEFAULT:Ljava/lang/Bytes10;", (73, 0));
//     fields.insert("java/lang/Bytes11#DEFAULT:Ljava/lang/Bytes11;", (74, 0));
//     fields.insert("java/lang/Bytes12#DEFAULT:Ljava/lang/Bytes12;", (75, 0));
//     fields.insert("java/lang/Bytes13#DEFAULT:Ljava/lang/Bytes13;", (76, 0));
//     fields.insert("java/lang/Bytes14#DEFAULT:Ljava/lang/Bytes14;", (77, 0));
//     fields.insert("java/lang/Bytes15#DEFAULT:Ljava/lang/Bytes15;", (78, 0));
//     fields.insert("java/lang/Bytes16#DEFAULT:Ljava/lang/Bytes16;", (79, 0));
//     fields.insert("java/lang/Bytes17#DEFAULT:Ljava/lang/Bytes17;", (80, 0));
//     fields.insert("java/lang/Bytes18#DEFAULT:Ljava/lang/Bytes18;", (81, 0));
//     fields.insert("java/lang/Bytes19#DEFAULT:Ljava/lang/Bytes19;", (82, 0));
//     fields.insert("java/lang/Bytes2#DEFAULT:Ljava/lang/Bytes2;", (83, 0));
//     fields.insert("java/lang/Bytes20#DEFAULT:Ljava/lang/Bytes20;", (84, 0));
//     fields.insert("java/lang/Bytes21#DEFAULT:Ljava/lang/Bytes21;", (85, 0));
//     fields.insert("java/lang/Bytes22#DEFAULT:Ljava/lang/Bytes22;", (86, 0));
//     fields.insert("java/lang/Bytes23#DEFAULT:Ljava/lang/Bytes23;", (87, 0));
//     fields.insert("java/lang/Bytes24#DEFAULT:Ljava/lang/Bytes24;", (88, 0));
//     fields.insert("java/lang/Bytes25#DEFAULT:Ljava/lang/Bytes25;", (89, 0));
//     fields.insert("java/lang/Bytes26#DEFAULT:Ljava/lang/Bytes26;", (90, 0));
//     fields.insert("java/lang/Bytes27#DEFAULT:Ljava/lang/Bytes27;", (91, 0));
//     fields.insert("java/lang/Bytes28#DEFAULT:Ljava/lang/Bytes28;", (92, 0));
//     fields.insert("java/lang/Bytes29#DEFAULT:Ljava/lang/Bytes29;", (93, 0));
//     fields.insert("java/lang/Bytes3#DEFAULT:Ljava/lang/Bytes3;", (94, 0));
//     fields.insert("java/lang/Bytes30#DEFAULT:Ljava/lang/Bytes30;", (95, 0));
//     fields.insert("java/lang/Bytes31#DEFAULT:Ljava/lang/Bytes31;", (96, 0));
//     fields.insert("java/lang/Bytes32#DEFAULT:Ljava/lang/Bytes32;", (97, 0));
//     fields.insert("java/lang/Bytes4#DEFAULT:Ljava/lang/Bytes4;", (98, 0));
//     fields.insert("java/lang/Bytes5#DEFAULT:Ljava/lang/Bytes5;", (99, 0));
//     fields.insert("java/lang/Bytes6#DEFAULT:Ljava/lang/Bytes6;", (100, 0));
//     fields.insert("java/lang/Bytes7#DEFAULT:Ljava/lang/Bytes7;", (101, 0));
//     fields.insert("java/lang/Bytes8#DEFAULT:Ljava/lang/Bytes8;", (102, 0));
//     fields.insert("java/lang/Bytes9#DEFAULT:Ljava/lang/Bytes9;", (103, 0));
//     fields.insert("java/lang/BytesType#value:[B", (104, 0));
//     fields.insert("java/lang/BytesType#type:Ljava/lang/String;", (104, 1));
//     fields.insert("java/lang/Character#MIN_RADIX:I", (107, 0));
//     fields.insert("java/lang/Character#MAX_RADIX:I", (107, 1));
//     fields.insert("java/lang/Character#TYPE:Ljava/lang/Class;", (107, 2));
//     fields.insert("java/lang/Character#value:C", (107, 3));
//     fields.insert("java/lang/Class#PrimitiveFlag:I", (108, 0));
//     fields.insert("java/lang/Class#EnumFlag:I", (108, 1));
//     fields.insert("java/lang/Class#vmClass:Ljava/base/VMClass;", (108, 2));
//     fields.insert("java/lang/ClassLoader#parent:Ljava/lang/ClassLoader;", (110, 0));
//     fields.insert("java/lang/ClassLoader#packages:Ljava/util/Map;", (110, 1));
//     fields.insert("java/lang/ClassNotFoundException#cause2:Ljava/lang/Throwable;", (111, 0));
//     fields.insert("java/lang/ClassType#GLOBAL:Ljava/lang/ClassType;", (112, 0));
//     fields.insert("java/lang/ClassType#MEMBER:Ljava/lang/ClassType;", (112, 1));
//     fields.insert("java/lang/ClassType#LOCAL:Ljava/lang/ClassType;", (112, 2));
//     fields.insert("java/lang/ClassType#ANONYMOUS:Ljava/lang/ClassType;", (112, 3));
//     fields.insert("java/lang/ClassType#$VALUES:[Ljava/lang/ClassType;", (112, 4));
//     fields.insert("java/lang/Context#sender:Ljava/lang/Address;", (116, 0));
//     fields.insert("java/lang/Enum#name:Ljava/lang/String;", (118, 0));
//     fields.insert("java/lang/Enum#ordinal:I", (118, 1));
//     fields.insert("java/lang/EventLog#message:Ljava/lang/String;", (120, 0));
//     fields.insert("java/lang/ExceptionInInitializerError#exception:Ljava/lang/Throwable;", (122, 0));
//     fields.insert("java/lang/Int#TYPE_NAME:Ljava/lang/String;", (132, 0));
//     fields.insert("java/lang/Int#DEFAULT:Ljava/lang/Int;", (132, 1));
//     fields.insert("java/lang/Int104#DEFAULT:Ljava/lang/Int104;", (133, 0));
//     fields.insert("java/lang/Int112#DEFAULT:Ljava/lang/Int112;", (134, 0));
//     fields.insert("java/lang/Int120#DEFAULT:Ljava/lang/Int120;", (135, 0));
//     fields.insert("java/lang/Int128#DEFAULT:Ljava/lang/Int128;", (136, 0));
//     fields.insert("java/lang/Int136#DEFAULT:Ljava/lang/Int136;", (137, 0));
//     fields.insert("java/lang/Int144#DEFAULT:Ljava/lang/Int144;", (138, 0));
//     fields.insert("java/lang/Int152#DEFAULT:Ljava/lang/Int152;", (139, 0));
//     fields.insert("java/lang/Int16#DEFAULT:Ljava/lang/Int16;", (140, 0));
//     fields.insert("java/lang/Int160#DEFAULT:Ljava/lang/Int160;", (141, 0));
//     fields.insert("java/lang/Int168#DEFAULT:Ljava/lang/Int168;", (142, 0));
//     fields.insert("java/lang/Int176#DEFAULT:Ljava/lang/Int176;", (143, 0));
//     fields.insert("java/lang/Int184#DEFAULT:Ljava/lang/Int184;", (144, 0));
//     fields.insert("java/lang/Int192#DEFAULT:Ljava/lang/Int192;", (145, 0));
//     fields.insert("java/lang/Int200#DEFAULT:Ljava/lang/Int200;", (146, 0));
//     fields.insert("java/lang/Int208#DEFAULT:Ljava/lang/Int208;", (147, 0));
//     fields.insert("java/lang/Int216#DEFAULT:Ljava/lang/Int216;", (148, 0));
//     fields.insert("java/lang/Int224#DEFAULT:Ljava/lang/Int224;", (149, 0));
//     fields.insert("java/lang/Int232#DEFAULT:Ljava/lang/Int232;", (150, 0));
//     fields.insert("java/lang/Int24#DEFAULT:Ljava/lang/Int24;", (151, 0));
//     fields.insert("java/lang/Int240#DEFAULT:Ljava/lang/Int240;", (152, 0));
//     fields.insert("java/lang/Int248#DEFAULT:Ljava/lang/Int248;", (153, 0));
//     fields.insert("java/lang/Int256#DEFAULT:Ljava/lang/Int256;", (154, 0));
//     fields.insert("java/lang/Int32#DEFAULT:Ljava/lang/Int32;", (155, 0));
//     fields.insert("java/lang/Int40#DEFAULT:Ljava/lang/Int40;", (156, 0));
//     fields.insert("java/lang/Int48#DEFAULT:Ljava/lang/Int48;", (157, 0));
//     fields.insert("java/lang/Int56#DEFAULT:Ljava/lang/Int56;", (158, 0));
//     fields.insert("java/lang/Int64#DEFAULT:Ljava/lang/Int64;", (159, 0));
//     fields.insert("java/lang/Int72#DEFAULT:Ljava/lang/Int72;", (160, 0));
//     fields.insert("java/lang/Int8#DEFAULT:Ljava/lang/Int8;", (161, 0));
//     fields.insert("java/lang/Int80#DEFAULT:Ljava/lang/Int80;", (162, 0));
//     fields.insert("java/lang/Int88#DEFAULT:Ljava/lang/Int88;", (163, 0));
//     fields.insert("java/lang/Int96#DEFAULT:Ljava/lang/Int96;", (164, 0));
//     fields.insert("java/lang/IntType#bitSize:I", (165, 0));
//     fields.insert("java/lang/Integer#TYPE:Ljava/lang/Class;", (166, 0));
//     fields.insert("java/lang/Integer#MIN_VALUE:I", (166, 1));
//     fields.insert("java/lang/Integer#MAX_VALUE:I", (166, 2));
//     fields.insert("java/lang/Integer#value:I", (166, 3));
//     fields.insert("java/lang/Long#MIN_VALUE:J", (171, 0));
//     fields.insert("java/lang/Long#MAX_VALUE:J", (171, 1));
//     fields.insert("java/lang/Long#TYPE:Ljava/lang/Class;", (171, 2));
//     fields.insert("java/lang/Long#value:J", (171, 3));
//     fields.insert("java/lang/Mapping#map:Ljava/util/HashMap;", (172, 0));
//     fields.insert("java/lang/Mapping#defaultValue:Ljava/lang/Object;", (172, 1));
//     fields.insert("java/lang/Message#sender:Ljava/lang/Address;", (174, 0));
//     fields.insert("java/lang/Message#value:Ljava/lang/Uint256;", (174, 1));
//     fields.insert("java/lang/Message#data:[B", (174, 2));
//     fields.insert("java/lang/Message#asset:Ljava/lang/Uint64;", (174, 3));
//     fields.insert("java/lang/Message#sig:[B", (174, 4));
//     fields.insert("java/lang/Message#gas:Ljava/lang/Uint256;", (174, 5));
//     fields.insert("java/lang/NumericArrays#LONG:J", (184, 0));
//     fields.insert("java/lang/NumericArrays#MAX_CACHE:I", (184, 1));
//     fields.insert("java/lang/NumericArrays#CACHE:[[I", (184, 2));
//     fields.insert("java/lang/NumericArrays#ZERO:[I", (184, 3));
//     fields.insert("java/lang/NumericArrays#ONE:[I", (184, 4));
//     fields.insert("java/lang/NumericArrays#TWO:[I", (184, 5));
//     fields.insert("java/lang/NumericArrays#BIG_INT:Ljava/math/BigInteger;", (184, 6));
//     fields.insert("java/lang/NumericType#type:Ljava/lang/String;", (185, 0));
//     fields.insert("java/lang/NumericType#value:Ljava/math/BigInteger;", (185, 1));
//     fields.insert("java/lang/OwnershipTransferred#indexed_previousOwner:Ljava/lang/Address;", (189, 0));
//     fields.insert("java/lang/OwnershipTransferred#indexed_newOwner:Ljava/lang/Address;", (189, 1));
//     fields.insert("java/lang/Package#name:Ljava/lang/String;", (190, 0));
//     fields.insert("java/lang/Package#implementationTitle:Ljava/lang/String;", (190, 1));
//     fields.insert("java/lang/Package#implementationVendor:Ljava/lang/String;", (190, 2));
//     fields.insert("java/lang/Package#implementationVersion:Ljava/lang/String;", (190, 3));
//     fields.insert("java/lang/Package#specificationTitle:Ljava/lang/String;", (190, 4));
//     fields.insert("java/lang/Package#specificationVendor:Ljava/lang/String;", (190, 5));
//     fields.insert("java/lang/Package#specificationVersion:Ljava/lang/String;", (190, 6));
//     fields.insert("java/lang/Package#sealed:Ljava/lang/Object;", (190, 7));
//     fields.insert("java/lang/Package#loader:Ljava/lang/ClassLoader;", (190, 8));
//     fields.insert("java/lang/Paused#indexed_account:Ljava/lang/Address;", (191, 0));
//     fields.insert("java/lang/Runtime#instance:Ljava/lang/Runtime;", (195, 0));
//     fields.insert("java/lang/Short#TYPE:Ljava/lang/Class;", (199, 0));
//     fields.insert("java/lang/Short#MIN_VALUE:S", (199, 1));
//     fields.insert("java/lang/Short#MAX_VALUE:S", (199, 2));
//     fields.insert("java/lang/Short#value:S", (199, 3));
//     fields.insert("java/lang/StackTraceElement#NativeLine:I", (201, 0));
//     fields.insert("java/lang/StackTraceElement#class_:Ljava/lang/String;", (201, 1));
//     fields.insert("java/lang/StackTraceElement#method:Ljava/lang/String;", (201, 2));
//     fields.insert("java/lang/StackTraceElement#file:Ljava/lang/String;", (201, 3));
//     fields.insert("java/lang/StackTraceElement#line:I", (201, 4));
//     fields.insert("java/lang/String#data:[C", (202, 0));
//     fields.insert("java/lang/String#offset:I", (202, 1));
//     fields.insert("java/lang/String#length:I", (202, 2));
//     fields.insert("java/lang/String#hashCode:I", (202, 3));
//     fields.insert("java/lang/String#UTF_8_ENCODING:Ljava/lang/String;", (202, 4));
//     fields.insert("java/lang/String#ISO_8859_1_ENCODING:Ljava/lang/String;", (202, 5));
//     fields.insert("java/lang/String#LATIN_1_ENCODING:Ljava/lang/String;", (202, 6));
//     fields.insert("java/lang/String#DEFAULT_ENCODING:Ljava/lang/String;", (202, 7));
//     fields.insert("java/lang/String#CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;", (202, 8));
//     fields.insert("java/lang/StringBuffer#sb:Ljava/lang/StringBuilder;", (203, 0));
//     fields.insert("java/lang/StringBuilder#BufferSize:I", (204, 0));
//     fields.insert("java/lang/StringBuilder#chain:Ljava/lang/StringBuilderCell;", (204, 1));
//     fields.insert("java/lang/StringBuilder#length:I", (204, 2));
//     fields.insert("java/lang/StringBuilder#buffer:[C", (204, 3));
//     fields.insert("java/lang/StringBuilder#position:I", (204, 4));
//     fields.insert("java/lang/StringBuilderCell#value:Ljava/lang/String;", (205, 0));
//     fields.insert("java/lang/StringBuilderCell#next:Ljava/lang/StringBuilderCell;", (205, 1));
//     fields.insert("java/lang/StringIndexOutOfBoundsException#serialVersionUID:J", (207, 0));
//     fields.insert("java/lang/StringUtil#BITS_PER_DIGIT:[I", (208, 0));
//     fields.insert("java/lang/StringUtil#DIGITS_PER_INT:[I", (208, 1));
//     fields.insert("java/lang/StringUtil#RADIX_LENGTH_LONG:[I", (208, 2));
//     fields.insert("java/lang/StringUtil#RADIX_INT:[I", (208, 3));
//     fields.insert("java/lang/StringUtil#RADIX_LONG:[J", (208, 4));
//     fields.insert("java/lang/StringUtil#ZEROES:Ljava/lang/String;", (208, 5));
//     fields.insert("java/lang/System#out:Ljava/io/SystemPrintStream;", (210, 0));
//     fields.insert("java/lang/System#err:Ljava/io/SystemPrintStream;", (210, 1));
//     fields.insert("java/lang/System#in:Ljava/io/SystemPrintStream;", (210, 2));
//     fields.insert("java/lang/SystemNanoTime#BaseInMillis:J", (211, 0));
//     fields.insert("java/lang/Throwable#message:Ljava/lang/String;", (213, 0));
//     fields.insert("java/lang/Throwable#trace:Ljava/lang/Object;", (213, 1));
//     fields.insert("java/lang/Throwable#cause:Ljava/lang/Throwable;", (213, 2));
//     fields.insert("java/lang/Transfer#indexed_from:Ljava/lang/Address;", (214, 0));
//     fields.insert("java/lang/Transfer#indexed_to:Ljava/lang/Address;", (214, 1));
//     fields.insert("java/lang/Transfer#value:Ljava/lang/Uint256;", (214, 2));
//     fields.insert("java/lang/Uint#MAX_WIDTH:I", (216, 0));
//     fields.insert("java/lang/Uint#MAX_VALUE:Ljava/lang/Uint;", (216, 1));
//     fields.insert("java/lang/Uint#ZERO:Ljava/lang/Uint;", (216, 2));
//     fields.insert("java/lang/Uint#ONE:Ljava/lang/Uint;", (216, 3));
//     fields.insert("java/lang/Uint#TWO:Ljava/lang/Uint;", (216, 4));
//     fields.insert("java/lang/Uint128#MAX_WIDTH:I", (217, 0));
//     fields.insert("java/lang/Uint128#MAX_VALUE:Ljava/lang/Uint128;", (217, 1));
//     fields.insert("java/lang/Uint128#ZERO:Ljava/lang/Uint128;", (217, 2));
//     fields.insert("java/lang/Uint128#ONE:Ljava/lang/Uint128;", (217, 3));
//     fields.insert("java/lang/Uint128#TWO:Ljava/lang/Uint128;", (217, 4));
//     fields.insert("java/lang/Uint16#MAX_WIDTH:I", (218, 0));
//     fields.insert("java/lang/Uint16#MAX_VALUE:Ljava/lang/Uint16;", (218, 1));
//     fields.insert("java/lang/Uint16#ZERO:Ljava/lang/Uint16;", (218, 2));
//     fields.insert("java/lang/Uint16#ONE:Ljava/lang/Uint16;", (218, 3));
//     fields.insert("java/lang/Uint16#TWO:Ljava/lang/Uint16;", (218, 4));
//     fields.insert("java/lang/Uint160#MAX_WIDTH:I", (219, 0));
//     fields.insert("java/lang/Uint160#MAX_VALUE:Ljava/lang/Uint160;", (219, 1));
//     fields.insert("java/lang/Uint160#ZERO:Ljava/lang/Uint160;", (219, 2));
//     fields.insert("java/lang/Uint160#ONE:Ljava/lang/Uint160;", (219, 3));
//     fields.insert("java/lang/Uint160#TWO:Ljava/lang/Uint160;", (219, 4));
//     fields.insert("java/lang/Uint256#MAX_WIDTH:I", (220, 0));
//     fields.insert("java/lang/Uint256#MAX_VALUE:Ljava/lang/Uint256;", (220, 1));
//     fields.insert("java/lang/Uint256#ZERO:Ljava/lang/Uint256;", (220, 2));
//     fields.insert("java/lang/Uint256#ONE:Ljava/lang/Uint256;", (220, 3));
//     fields.insert("java/lang/Uint256#TWO:Ljava/lang/Uint256;", (220, 4));
//     fields.insert("java/lang/Uint32#MAX_WIDTH:I", (221, 0));
//     fields.insert("java/lang/Uint32#MAX_VALUE:Ljava/lang/Uint32;", (221, 1));
//     fields.insert("java/lang/Uint32#ZERO:Ljava/lang/Uint32;", (221, 2));
//     fields.insert("java/lang/Uint32#ONE:Ljava/lang/Uint32;", (221, 3));
//     fields.insert("java/lang/Uint32#TWO:Ljava/lang/Uint32;", (221, 4));
//     fields.insert("java/lang/Uint64#MAX_WIDTH:I", (222, 0));
//     fields.insert("java/lang/Uint64#MAX_VALUE:Ljava/lang/Uint64;", (222, 1));
//     fields.insert("java/lang/Uint64#ZERO:Ljava/lang/Uint64;", (222, 2));
//     fields.insert("java/lang/Uint64#ONE:Ljava/lang/Uint64;", (222, 3));
//     fields.insert("java/lang/Uint64#TWO:Ljava/lang/Uint64;", (222, 4));
//     fields.insert("java/lang/Uint8#MAX_WIDTH:I", (223, 0));
//     fields.insert("java/lang/Uint8#MAX_VALUE:Ljava/lang/Uint8;", (223, 1));
//     fields.insert("java/lang/Uint8#ZERO:Ljava/lang/Uint8;", (223, 2));
//     fields.insert("java/lang/Uint8#ONE:Ljava/lang/Uint8;", (223, 3));
//     fields.insert("java/lang/Uint8#value:I", (223, 4));
//     fields.insert("java/lang/UintType#ints:[I", (224, 0));
//     fields.insert("java/lang/UintType#DEFAULT_RADIX:I", (224, 1));
//     fields.insert("java/lang/Unpaused#indexed_account:Ljava/lang/Address;", (225, 0));
//     fields.insert("java/lang/Void#TYPE:Ljava/lang/Class;", (229, 0));
//     fields.insert("java/lang/annotation/ElementType#ANNOTATION_TYPE:Ljava/lang/annotation/ElementType;", (232, 0));
//     fields.insert("java/lang/annotation/ElementType#CONSTRUCTOR:Ljava/lang/annotation/ElementType;", (232, 1));
//     fields.insert("java/lang/annotation/ElementType#FIELD:Ljava/lang/annotation/ElementType;", (232, 2));
//     fields.insert("java/lang/annotation/ElementType#LOCAL_VARIABLE:Ljava/lang/annotation/ElementType;", (232, 3));
//     fields.insert("java/lang/annotation/ElementType#METHOD:Ljava/lang/annotation/ElementType;", (232, 4));
//     fields.insert("java/lang/annotation/ElementType#PACKAGE:Ljava/lang/annotation/ElementType;", (232, 5));
//     fields.insert("java/lang/annotation/ElementType#PARAMETER:Ljava/lang/annotation/ElementType;", (232, 6));
//     fields.insert("java/lang/annotation/ElementType#TYPE:Ljava/lang/annotation/ElementType;", (232, 7));
//     fields.insert("java/lang/annotation/ElementType#$VALUES:[Ljava/lang/annotation/ElementType;", (232, 8));
//     fields.insert("java/lang/annotation/RetentionPolicy#CLASS:Ljava/lang/annotation/RetentionPolicy;", (238, 0));
//     fields.insert("java/lang/annotation/RetentionPolicy#RUNTIME:Ljava/lang/annotation/RetentionPolicy;", (238, 1));
//     fields.insert("java/lang/annotation/RetentionPolicy#SOURCE:Ljava/lang/annotation/RetentionPolicy;", (238, 2));
//     fields.insert("java/lang/annotation/RetentionPolicy#$VALUES:[Ljava/lang/annotation/RetentionPolicy;", (238, 3));
//     fields.insert("java/lang/bytes/Division#LONG:J", (242, 0));
//     fields.insert("java/lang/bytes/Hex#HEX_PREFIX:Ljava/lang/String;", (243, 0));
//     fields.insert("java/lang/bytes/Hex#HEX_CHAR_MAP:[C", (243, 1));
//     fields.insert("java/lang/bytes/Type#MAX_BIT_LENGTH:I", (244, 0));
//     fields.insert("java/lang/bytes/Type#MAX_BYTE_LENGTH:I", (244, 1));
//     fields.insert("java/lang/contract/ERC20#balances:Ljava/lang/Mapping;", (246, 0));
//     fields.insert("java/lang/contract/ERC20#allowances:Ljava/lang/Mapping;", (246, 1));
//     fields.insert("java/lang/contract/ERC20#totalSupply:Ljava/lang/Uint256;", (246, 2));
//     fields.insert("java/lang/contract/ERC20#name:Ljava/lang/String;", (246, 3));
//     fields.insert("java/lang/contract/ERC20#symbol:Ljava/lang/String;", (246, 4));
//     fields.insert("java/lang/contract/ERC20#paused:Ljava/lang/Bool;", (246, 5));
//     fields.insert("java/lang/contract/ERC20#owner:Ljava/lang/Address;", (246, 6));
//     fields.insert("java/lang/invoke/MethodHandle#REF_invokeVirtual:I", (259, 0));
//     fields.insert("java/lang/invoke/MethodHandle#REF_invokeStatic:I", (259, 1));
//     fields.insert("java/lang/invoke/MethodHandle#REF_invokeSpecial:I", (259, 2));
//     fields.insert("java/lang/invoke/MethodHandle#REF_newInvokeSpecial:I", (259, 3));
//     fields.insert("java/lang/invoke/MethodHandle#REF_invokeInterface:I", (259, 4));
//     fields.insert("java/lang/invoke/MethodHandle#kind:I", (259, 5));
//     fields.insert("java/lang/invoke/MethodHandle#loader:Ljava/lang/ClassLoader;", (259, 6));
//     fields.insert("java/lang/invoke/MethodHandle#method:Ljava/base/VMMethod;", (259, 7));
//     fields.insert("java/lang/invoke/MethodHandle#type:Ljava/lang/invoke/MethodType;", (259, 8));
//     fields.insert("java/lang/invoke/MethodHandlesLookup#class_:Ljava/base/VMClass;", (261, 0));
//     fields.insert("java/lang/invoke/MethodHandlesLookup#modes:I", (261, 1));
//     fields.insert("java/lang/invoke/MethodType#Primitives:[C", (262, 0));
//     fields.insert("java/lang/invoke/MethodType#loader:Ljava/lang/ClassLoader;", (262, 1));
//     fields.insert("java/lang/invoke/MethodType#spec:[B", (262, 2));
//     fields.insert("java/lang/invoke/MethodType#parameters:Ljava/util/List;", (262, 3));
//     fields.insert("java/lang/invoke/MethodType#result:Ljava/lang/invoke/MethodTypeResult;", (262, 4));
//     fields.insert("java/lang/invoke/MethodType#footprint:I", (262, 5));
//     fields.insert("java/lang/invoke/MethodTypeParameter#index:I", (263, 0));
//     fields.insert("java/lang/invoke/MethodTypeParameter#position:I", (263, 1));
//     fields.insert("java/lang/invoke/MethodTypeParameter#spec:Ljava/lang/String;", (263, 2));
//     fields.insert("java/lang/invoke/MethodTypeParameter#type:Ljava/lang/Class;", (263, 3));
//     fields.insert("java/lang/invoke/MethodTypeParameter#load:I", (263, 4));
//     fields.insert("java/lang/invoke/MethodTypeResult#spec:Ljava/lang/String;", (264, 0));
//     fields.insert("java/lang/invoke/MethodTypeResult#type:Ljava/lang/Class;", (264, 1));
//     fields.insert("java/lang/invoke/MethodTypeResult#return_:I", (264, 2));
//     fields.insert("java/lang/invoke/MethodTypeType#ObjectType:Ljava/lang/invoke/MethodTypeType;", (265, 0));
//     fields.insert("java/lang/invoke/MethodTypeType#IntegerType:Ljava/lang/invoke/MethodTypeType;", (265, 1));
//     fields.insert("java/lang/invoke/MethodTypeType#FloatType:Ljava/lang/invoke/MethodTypeType;", (265, 2));
//     fields.insert("java/lang/invoke/MethodTypeType#LongType:Ljava/lang/invoke/MethodTypeType;", (265, 3));
//     fields.insert("java/lang/invoke/MethodTypeType#DoubleType:Ljava/lang/invoke/MethodTypeType;", (265, 4));
//     fields.insert("java/lang/invoke/MethodTypeType#VoidType:Ljava/lang/invoke/MethodTypeType;", (265, 5));
//     fields.insert("java/lang/invoke/MethodTypeType#load:I", (265, 6));
//     fields.insert("java/lang/invoke/MethodTypeType#return_:I", (265, 7));
//     fields.insert("java/lang/invoke/MethodTypeType#size:I", (265, 8));
//     fields.insert("java/lang/invoke/MethodTypeType#$VALUES:[Ljava/lang/invoke/MethodTypeType;", (265, 9));
//     fields.insert("java/lang/reflect/AccessibleObject#Accessible:I", (267, 0));
//     fields.insert("java/lang/reflect/AccessibleObject#ACC_VARARGS:I", (267, 1));
//     fields.insert("java/lang/reflect/AccessibleObject#ACC_SYNTHETIC:I", (267, 2));
//     fields.insert("java/lang/reflect/Constructor#method:Ljava/lang/reflect/Method;", (270, 0));
//     fields.insert("java/lang/reflect/Field#VoidField:I", (271, 0));
//     fields.insert("java/lang/reflect/Field#ByteField:I", (271, 1));
//     fields.insert("java/lang/reflect/Field#CharField:I", (271, 2));
//     fields.insert("java/lang/reflect/Field#IntField:I", (271, 3));
//     fields.insert("java/lang/reflect/Field#LongField:I", (271, 4));
//     fields.insert("java/lang/reflect/Field#ShortField:I", (271, 5));
//     fields.insert("java/lang/reflect/Field#BooleanField:I", (271, 6));
//     fields.insert("java/lang/reflect/Field#ObjectField:I", (271, 7));
//     fields.insert("java/lang/reflect/Field#vmField:Ljava/base/VMField;", (271, 8));
//     fields.insert("java/lang/reflect/Field#accessible:Z", (271, 9));
//     fields.insert("java/lang/reflect/InvocationTargetException#target:Ljava/lang/Throwable;", (274, 0));
//     fields.insert("java/lang/reflect/Member#PUBLIC:I", (275, 0));
//     fields.insert("java/lang/reflect/Member#DECLARED:I", (275, 1));
//     fields.insert("java/lang/reflect/Method#vmMethod:Ljava/base/VMMethod;", (276, 0));
//     fields.insert("java/lang/reflect/Method#accessible:Z", (276, 1));
//     fields.insert("java/lang/reflect/Modifier#PUBLIC:I", (277, 0));
//     fields.insert("java/lang/reflect/Modifier#PRIVATE:I", (277, 1));
//     fields.insert("java/lang/reflect/Modifier#PROTECTED:I", (277, 2));
//     fields.insert("java/lang/reflect/Modifier#STATIC:I", (277, 3));
//     fields.insert("java/lang/reflect/Modifier#FINAL:I", (277, 4));
//     fields.insert("java/lang/reflect/Modifier#SUPER:I", (277, 5));
//     fields.insert("java/lang/reflect/Modifier#SYNCHRONIZED:I", (277, 6));
//     fields.insert("java/lang/reflect/Modifier#VOLATILE:I", (277, 7));
//     fields.insert("java/lang/reflect/Modifier#TRANSIENT:I", (277, 8));
//     fields.insert("java/lang/reflect/Modifier#NATIVE:I", (277, 9));
//     fields.insert("java/lang/reflect/Modifier#INTERFACE:I", (277, 10));
//     fields.insert("java/lang/reflect/Modifier#ABSTRACT:I", (277, 11));
//     fields.insert("java/lang/reflect/Modifier#STRICT:I", (277, 12));
//     fields.insert("java/lang/reflect/Proxy#nextNumber:I", (279, 0));
//     fields.insert("java/lang/reflect/Proxy#h:Ljava/lang/reflect/InvocationHandler;", (279, 1));
//     fields.insert("java/lang/reflect/Proxy#methodRefsMap:Ljava/util/Map;", (279, 2));
//     fields.insert("java/lang/reflect/Proxy#methodRefs:[Ljava/lang/reflect/Method;", (279, 3));
//     fields.insert("java/lang/reflect/SignatureParser#loader:Ljava/lang/ClassLoader;", (280, 0));
//     fields.insert("java/lang/reflect/SignatureParser#array:[C", (280, 1));
//     fields.insert("java/lang/reflect/SignatureParser#signature:Ljava/lang/String;", (280, 2));
//     fields.insert("java/lang/reflect/SignatureParser#offset:I", (280, 3));
//     fields.insert("java/lang/reflect/SignatureParser#type:Ljava/lang/reflect/Type;", (280, 4));
//     fields.insert("java/lang/reflect/SignatureParser#typeVariables:Ljava/util/Map;", (280, 5));
//     fields.insert("java/lang/reflect/SignatureParserType#args:[Ljava/lang/reflect/Type;", (281, 0));
//     fields.insert("java/lang/reflect/SignatureParserType#owner:Ljava/lang/reflect/Type;", (281, 1));
//     fields.insert("java/lang/reflect/SignatureParserType#raw:Ljava/lang/reflect/Type;", (281, 2));
//     fields.insert("java/lang/reflect/TypeVariableImpl#name:Ljava/lang/String;", (284, 0));
//     fields.insert("java/lang/reflect/TypeVariableImpl#baseType:Ljava/lang/reflect/Type;", (284, 1));
//     fields.insert("java/lang/reflect/TypeVariableImpl#vars:[Ljava/lang/reflect/TypeVariableImpl;", (284, 2));
//     fields.insert("java/lang/reflect/TypeVariableImpl1#vars:[Ljava/lang/reflect/TypeVariableImpl;", (285, 0));
//     fields.insert("java/math/BigInteger#sign:I", (286, 0));
//     fields.insert("java/math/BigInteger#value:[I", (286, 1));
//     fields.insert("java/math/BigInteger#ZERO:Ljava/math/BigInteger;", (286, 2));
//     fields.insert("java/math/BigInteger#ONE:Ljava/math/BigInteger;", (286, 3));
//     fields.insert("java/math/BigInteger#TEN:Ljava/math/BigInteger;", (286, 4));
//     fields.insert("java/util/AbstractList#modCount:I", (288, 0));
//     fields.insert("java/util/ArrayList#MinimumCapacity:I", (292, 0));
//     fields.insert("java/util/ArrayList#array:[Ljava/lang/Object;", (292, 1));
//     fields.insert("java/util/ArrayList#size:I", (292, 2));
//     fields.insert("java/util/ArrayListIterator#list:Ljava/util/List;", (293, 0));
//     fields.insert("java/util/ArrayListIterator#toRemove:I", (293, 1));
//     fields.insert("java/util/ArrayListIterator#index:I", (293, 2));
//     fields.insert("java/util/Arrays#SORT_SIZE_THRESHOLD:I", (294, 0));
//     fields.insert("java/util/ArraysAbstractList#array:[Ljava/lang/Object;", (295, 0));
//     fields.insert("java/util/ArraysListIterator#array:[Ljava/lang/Object;", (297, 0));
//     fields.insert("java/util/ArraysListIterator#currentIndex:I", (297, 1));
//     fields.insert("java/util/BitSet#BITS_PER_LONG:I", (298, 0));
//     fields.insert("java/util/BitSet#BITS_PER_LONG_SHIFT:I", (298, 1));
//     fields.insert("java/util/BitSet#MASK:J", (298, 2));
//     fields.insert("java/util/BitSet#bits:[J", (298, 3));
//     fields.insert("java/util/Collections#SORT_SIZE_THRESHOLD:I", (300, 0));
//     fields.insert("java/util/Collections#EMPTY_LIST:Ljava/util/List;", (300, 1));
//     fields.insert("java/util/Date#when:J", (303, 0));
//     fields.insert("java/util/EnumSet#bitset:Ljava/util/BitSet;", (306, 0));
//     fields.insert("java/util/EnumSet#elementType:Ljava/lang/Class;", (306, 1));
//     fields.insert("java/util/EnumSetIterator#enumSet:Ljava/util/EnumSet;", (307, 0));
//     fields.insert("java/util/EnumSetIterator#elementType:Ljava/lang/Class;", (307, 1));
//     fields.insert("java/util/EnumSetIterator#bitset:Ljava/util/BitSet;", (307, 2));
//     fields.insert("java/util/EnumSetIterator#currentIndex:I", (307, 3));
//     fields.insert("java/util/EnumSetIterator#removeAllowed:Z", (307, 4));
//     fields.insert("java/util/EventObject#source:Ljava/lang/Object;", (310, 0));
//     fields.insert("java/util/HashMap#MinimumCapacity:I", (311, 0));
//     fields.insert("java/util/HashMap#size:I", (311, 1));
//     fields.insert("java/util/HashMap#array:[Ljava/util/HashMapCell;", (311, 2));
//     fields.insert("java/util/HashMap#helper:Ljava/util/HashMapHelper;", (311, 3));
//     fields.insert("java/util/HashMap#head:Ljava/util/HashMapCell;", (311, 4));
//     fields.insert("java/util/HashMap#tail:Ljava/util/HashMapCell;", (311, 5));
//     fields.insert("java/util/HashMapMyCell#key:Ljava/lang/Object;", (314, 0));
//     fields.insert("java/util/HashMapMyCell#value:Ljava/lang/Object;", (314, 1));
//     fields.insert("java/util/HashMapMyCell#next:Ljava/util/HashMapCell;", (314, 2));
//     fields.insert("java/util/HashMapMyCell#hashCode:I", (314, 3));
//     fields.insert("java/util/HashMapMyCell#before:Ljava/util/HashMapCell;", (314, 4));
//     fields.insert("java/util/HashMapMyCell#after:Ljava/util/HashMapCell;", (314, 5));
//     fields.insert("java/util/HashMapMyEntryMap#hashMap:Ljava/util/HashMap;", (315, 0));
//     fields.insert("java/util/HashMapMyIterator#hashMap:Ljava/util/HashMap;", (317, 0));
//     fields.insert("java/util/HashMapMyIterator#next:Ljava/util/HashMapCell;", (317, 1));
//     fields.insert("java/util/HashSet#Value:Ljava/lang/Object;", (318, 0));
//     fields.insert("java/util/HashSet#map:Ljava/util/HashMap;", (318, 1));
//     fields.insert("java/util/HashSetMyIterator#it:Ljava/util/Iterator;", (319, 0));
//     fields.insert("java/util/Hashtable#map:Ljava/util/HashMap;", (320, 0));
//     fields.insert("java/util/IdentityHashMap#map:Ljava/util/HashMap;", (321, 0));
//     fields.insert("java/util/IteratorEnumeration#it:Ljava/util/Iterator;", (326, 0));
//     fields.insert("java/util/LinkedList#front:Ljava/util/LinkedListCell;", (327, 0));
//     fields.insert("java/util/LinkedList#rear:Ljava/util/LinkedListCell;", (327, 1));
//     fields.insert("java/util/LinkedList#size:I", (327, 2));
//     fields.insert("java/util/LinkedListCell#value:Ljava/lang/Object;", (328, 0));
//     fields.insert("java/util/LinkedListCell#prev:Ljava/util/LinkedListCell;", (328, 1));
//     fields.insert("java/util/LinkedListCell#next:Ljava/util/LinkedListCell;", (328, 2));
//     fields.insert("java/util/LinkedListDescendingIterator#listIterator:Ljava/util/ListIterator;", (329, 0));
//     fields.insert("java/util/LinkedListMyIterator#linkedList:Ljava/util/LinkedList;", (330, 0));
//     fields.insert("java/util/LinkedListMyIterator#toRemove:Ljava/util/LinkedListCell;", (330, 1));
//     fields.insert("java/util/LinkedListMyIterator#current:Ljava/util/LinkedListCell;", (330, 2));
//     fields.insert("java/util/MaskInfo#mask:J", (334, 0));
//     fields.insert("java/util/MaskInfo#partitionIndex:I", (334, 1));
//     fields.insert("java/util/MaskInfoIterator#basePartition:I", (335, 0));
//     fields.insert("java/util/MaskInfoIterator#numPartitionsToTraverse:I", (335, 1));
//     fields.insert("java/util/MaskInfoIterator#currentPartitionOffset:I", (335, 2));
//     fields.insert("java/util/MaskInfoIterator#toIndex:I", (335, 3));
//     fields.insert("java/util/MaskInfoIterator#currentFirstIndex:I", (335, 4));
//     fields.insert("java/util/MaskInfoIterator#BITS_PER_LONG:I", (335, 5));
//     fields.insert("java/util/MaskInfoIterator#BITS_PER_LONG_SHIFT:I", (335, 6));
//     fields.insert("java/util/MaskInfoIterator#MASK:J", (335, 7));
//     fields.insert("java/util/ReverseComparator#cmp:Ljava/util/Comparator;", (341, 0));
//     fields.insert("java/util/SynchronizedCollection#lock:Ljava/lang/Object;", (343, 0));
//     fields.insert("java/util/SynchronizedCollection#collection:Ljava/util/Collection;", (343, 1));
//     fields.insert("java/util/SynchronizedIterator#lock:Ljava/lang/Object;", (344, 0));
//     fields.insert("java/util/SynchronizedIterator#it:Ljava/util/Iterator;", (344, 1));
//     fields.insert("java/util/SynchronizedList#list:Ljava/util/List;", (345, 0));
//     fields.insert("java/util/SynchronizedMap#lock:Ljava/lang/Object;", (346, 0));
//     fields.insert("java/util/SynchronizedMap#map:Ljava/util/Map;", (346, 1));
//     fields.insert("java/util/UnmodifiableCollection#inner:Ljava/util/Collection;", (348, 0));
//     fields.insert("java/util/UnmodifiableIterator#inner:Ljava/util/Iterator;", (349, 0));
//     fields.insert("java/util/UnmodifiableList#inner:Ljava/util/List;", (350, 0));
//     fields.insert("java/util/UnmodifiableListIterator#innerListIterator:Ljava/util/ListIterator;", (351, 0));
//     fields.insert("java/util/UnmodifiableMap#inner:Ljava/util/Map;", (352, 0));
//     (classes, methods, fields)
// }
